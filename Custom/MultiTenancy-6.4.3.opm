<?xml version="1.0" encoding="utf-8" ?>
<otrs_package version="1.1">
    <Name>MultiTenancy</Name>
    <Version>6.4.4</Version>
    <Vendor>terreActive AG</Vendor>
    <URL>http://www.terreactive.ch/</URL>
    <License>GNU AFFERO GENERAL PUBLIC LICENSE Version 3, November 2007</License>
    <Description>Dedicated queues for groups of agents and customers.</Description>
    <Framework>6.2.x</Framework>
    <Framework>6.3.x</Framework>
    <Framework>6.4.x</Framework>
    <BuildDate>2022-12-02 08:25:37</BuildDate>
    <BuildHost>yourhost.example.com</BuildHost>
    <Filelist>
        <File Location="doc/en/MultiTenancy.pod" Permission="660" Encode="Base64">PXBvZAoKPWVuY29kaW5nIHV0Zi04Cgo9aGVhZDEgTkFNRQoKTXVsdGlUZW5hbmN5IC0gZ3JvdXAgYWdlbnRzIGFuZCBjdXN0b21lciB1c2VycwoKPWhlYWQxIERFU0NSSVBUSU9OCgpEZWRpY2F0ZWQgcmVzb3VyY2VzIGZvciBncm91cHMgb2YgYWdlbnRzIGFuZCBjdXN0b21lcnMuCgo9aGVhZDEgVERCCgpUQkQKCj1oZWFkMSBDT1BZUklHSFQgQU5EIExJQ0VOQ0UKCkNvcHlyaWdodCAoYykgMjAyMiBieSBPdGhtYXIgV2lnZ2VyIDxvdGhtYXIud2lnZ2VyQHRlcnJlYWN0aXZlLmNoPgoKVGhpcyBpcyBmcmVlIHNvZnR3YXJlOyB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5IGl0IHVuZGVyCnRoZSBHbnUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgdmVyc2lvbiAzLgoKVGhpcyBwYWNrYWdlIGlzIHByb3ZpZGVkICJhcyBpcyIgYW5kIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZAp3YXJyYW50aWVzLCBpbmNsdWRpbmcsIHdpdGhvdXQgbGltaXRhdGlvbiwgdGhlIGltcGxpZWQgd2FycmFudGllcyBvZgptZXJjaGFudGliaWxpdHkgYW5kIGZpdG5lc3MgZm9yIGEgcGFydGljdWxhciBwdXJwb3NlLgoKPWN1dAoK</File>
        <File Location="Custom/Kernel/GenericInterface/Operation/Ticket/TicketCreate.pm" Permission="660" Encode="Base64"></File>
        <File Location="Custom/Kernel/Modules/AdminCustomerCompany.pm" Permission="660" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDIxIE9UUlMgQUcsIGh0dHBzOi8vb3Rycy5jb20vCiMgQ29weXJpZ2h0IChDKSAyMDIxLTIwMjIgWm51bnkgR21iSCwgaHR0cHM6Ly96bnVueS5vcmcvCiMgLS0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQojIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwczovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2dwbC0zLjAudHh0LgojIC0tCgpwYWNrYWdlIEtlcm5lbDo6TW9kdWxlczo6QWRtaW5DdXN0b21lckNvbXBhbnk7Cgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7Cgp1c2UgS2VybmVsOjpMYW5ndWFnZSBxdyhUcmFuc2xhdGFibGUpOwoKb3VyICRPYmplY3RNYW5hZ2VyRGlzYWJsZWQgPSAxOwoKdXNlIEtlcm5lbDo6U3lzdGVtOjpWYXJpYWJsZUNoZWNrIHF3KDphbGwpOwoKc3ViIG5ldyB7CiAgICBteSAoICRUeXBlLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgYWxsb2NhdGUgbmV3IGhhc2ggZm9yIG9iamVjdAogICAgbXkgJFNlbGYgPSB7JVBhcmFtfTsKICAgIGJsZXNzKCAkU2VsZiwgJFR5cGUgKTsKCiAgICBteSAkRHluYW1pY0ZpZWxkQ29uZmlncyA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpEeW5hbWljRmllbGQnKS0+RHluYW1pY0ZpZWxkTGlzdEdldCgKICAgICAgICBPYmplY3RUeXBlID0+ICdDdXN0b21lckNvbXBhbnknLAogICAgKTsKCiAgICAkU2VsZi0+e0R5bmFtaWNGaWVsZExvb2t1cH0gPSB7IG1hcCB7ICRfLT57TmFtZX0gPT4gJF8gfSBAeyREeW5hbWljRmllbGRDb25maWdzfSB9OwoKICAgIHJldHVybiAkU2VsZjsKfQoKc3ViIFJ1biB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICRQYXJhbU9iamVjdCAgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6V2ViOjpSZXF1ZXN0Jyk7CiAgICBteSAkQ29uZmlnT2JqZWN0ID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpDb25maWcnKTsKCiAgICBteSAkTmF2ICAgICAgICAgICAgICAgPSAkUGFyYW1PYmplY3QtPkdldFBhcmFtKCBQYXJhbSA9PiAnTmF2JyApIHx8IDA7CiAgICBteSAkTmF2aWdhdGlvbkJhclR5cGUgPSAkTmF2IGVxICdBZ2VudCcgPyAnQ3VzdG9tZXJzJyA6ICdBZG1pbic7CiAgICBteSAkU2VhcmNoICAgICAgICAgICAgPSAkUGFyYW1PYmplY3QtPkdldFBhcmFtKCBQYXJhbSA9PiAnU2VhcmNoJyApOwogICAgJFNlYXJjaAogICAgICAgIHx8PSAkQ29uZmlnT2JqZWN0LT5HZXQoJ0FkbWluQ3VzdG9tZXJDb21wYW55OjpSdW5Jbml0aWFsV2lsZGNhcmRTZWFyY2gnKSA/ICcqJyA6ICcnOwogICAgbXkgJExheW91dE9iamVjdCAgICAgICAgICA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6T3V0cHV0OjpIVE1MOjpMYXlvdXQnKTsKICAgIG15ICRDdXN0b21lckNvbXBhbnlPYmplY3QgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6Q3VzdG9tZXJDb21wYW55Jyk7CgogICAgbXkgJUdldFBhcmFtOwogICAgJEdldFBhcmFte1NvdXJjZX0gPSAkUGFyYW1PYmplY3QtPkdldFBhcmFtKCBQYXJhbSA9PiAnU291cmNlJyApIHx8ICdDdXN0b21lckNvbXBhbnknOwoKICAgICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICMKICAgICMgY2hhbmdlCiAgICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAjCiAgICBpZiAoICRTZWxmLT57U3ViYWN0aW9ufSBlcSAnQ2hhbmdlJyApIHsKICAgICAgICBteSAkQ3VzdG9tZXJJRAogICAgICAgICAgICA9ICRQYXJhbU9iamVjdC0+R2V0UGFyYW0oIFBhcmFtID0+ICdDdXN0b21lcklEJyApIHx8ICRQYXJhbU9iamVjdC0+R2V0UGFyYW0oIFBhcmFtID0+ICdJRCcgKSB8fCAnJzsKICAgICAgICBteSAkTm90aWZpY2F0aW9uID0gJFBhcmFtT2JqZWN0LT5HZXRQYXJhbSggUGFyYW0gPT4gJ05vdGlmaWNhdGlvbicgKSB8fCAnJzsKICAgICAgICBteSAlRGF0YSAgICAgICAgID0gJEN1c3RvbWVyQ29tcGFueU9iamVjdC0+Q3VzdG9tZXJDb21wYW55R2V0KAogICAgICAgICAgICBDdXN0b21lcklEID0+ICRDdXN0b21lcklELAogICAgICAgICk7CiAgICAgICAgJERhdGF7Q3VzdG9tZXJDb21wYW55SUR9ID0gJEN1c3RvbWVySUQ7CiAgICAgICAgbXkgJE91dHB1dCA9ICRMYXlvdXRPYmplY3QtPkhlYWRlcigpOwogICAgICAgICRPdXRwdXQgLj0gJExheW91dE9iamVjdC0+TmF2aWdhdGlvbkJhcigKICAgICAgICAgICAgVHlwZSA9PiAkTmF2aWdhdGlvbkJhclR5cGUsCiAgICAgICAgKTsKICAgICAgICAkT3V0cHV0IC49ICRMYXlvdXRPYmplY3QtPk5vdGlmeSggSW5mbyA9PiBUcmFuc2xhdGFibGUoJ0N1c3RvbWVyIGNvbXBhbnkgdXBkYXRlZCEnKSApCiAgICAgICAgICAgIGlmICggJE5vdGlmaWNhdGlvbiAmJiAkTm90aWZpY2F0aW9uIGVxICdVcGRhdGUnICk7CiAgICAgICAgJFNlbGYtPl9FZGl0KAogICAgICAgICAgICBBY3Rpb24gPT4gJ0NoYW5nZScsCiAgICAgICAgICAgIE5hdiAgICA9PiAkTmF2LAogICAgICAgICAgICAlRGF0YSwKICAgICAgICApOwogICAgICAgICRPdXRwdXQgLj0gJExheW91dE9iamVjdC0+T3V0cHV0KAogICAgICAgICAgICBUZW1wbGF0ZUZpbGUgPT4gJ0FkbWluQ3VzdG9tZXJDb21wYW55JywKICAgICAgICAgICAgRGF0YSAgICAgICAgID0+IFwlUGFyYW0sCiAgICAgICAgKTsKICAgICAgICAkT3V0cHV0IC49ICRMYXlvdXRPYmplY3QtPkZvb3RlcigpOwogICAgICAgIHJldHVybiAkT3V0cHV0OwogICAgfQoKICAgICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICMKICAgICMgY2hhbmdlIGFjdGlvbgogICAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gIwogICAgZWxzaWYgKCAkU2VsZi0+e1N1YmFjdGlvbn0gZXEgJ0NoYW5nZUFjdGlvbicgKSB7CgogICAgICAgICMgY2hhbGxlbmdlIHRva2VuIGNoZWNrIGZvciB3cml0ZSBhY3Rpb24KICAgICAgICAkTGF5b3V0T2JqZWN0LT5DaGFsbGVuZ2VUb2tlbkNoZWNrKCk7CgogICAgICAgIG15ICROb3RlID0gJyc7CiAgICAgICAgbXkgJUVycm9yczsKICAgICAgICAkR2V0UGFyYW17Q3VzdG9tZXJDb21wYW55SUR9ID0gJFBhcmFtT2JqZWN0LT5HZXRQYXJhbSggUGFyYW0gPT4gJ0N1c3RvbWVyQ29tcGFueUlEJyApOwoKICAgICAgICAjIEdldCBkeW5hbWljIGZpZWxkIGJhY2tlbmQgb2JqZWN0LgogICAgICAgIG15ICREeW5hbWljRmllbGRCYWNrZW5kT2JqZWN0ID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkR5bmFtaWNGaWVsZDo6QmFja2VuZCcpOwoKICAgICAgICBFTlRSWToKICAgICAgICBmb3IgbXkgJEVudHJ5ICggQHsgJENvbmZpZ09iamVjdC0+R2V0KCAkR2V0UGFyYW17U291cmNlfSApLT57TWFwfSB9ICkgewoKICAgICAgICAgICAgIyBjaGVjayBkeW5hbWljIGZpZWxkcwogICAgICAgICAgICBpZiAoICRFbnRyeS0+WzVdIGVxICdkeW5hbWljX2ZpZWxkJyApIHsKCiAgICAgICAgICAgICAgICBteSAkRHluYW1pY0ZpZWxkQ29uZmlnID0gJFNlbGYtPntEeW5hbWljRmllbGRMb29rdXB9LT57ICRFbnRyeS0+WzJdIH07CgogICAgICAgICAgICAgICAgaWYgKCAhSXNIYXNoUmVmV2l0aERhdGEoJER5bmFtaWNGaWVsZENvbmZpZykgKSB7CiAgICAgICAgICAgICAgICAgICAgJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkxvZycpLT5Mb2coCiAgICAgICAgICAgICAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgICAgICAgICAgICAgIE1lc3NhZ2UgID0+ICJEeW5hbWljRmllbGQgJEVudHJ5LT5bMl0gbm90IGZvdW5kISIsCiAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgICAgICBuZXh0IEVOVFJZOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIG15ICRWYWxpZGF0aW9uUmVzdWx0ID0gJER5bmFtaWNGaWVsZEJhY2tlbmRPYmplY3QtPkVkaXRGaWVsZFZhbHVlVmFsaWRhdGUoCiAgICAgICAgICAgICAgICAgICAgRHluYW1pY0ZpZWxkQ29uZmlnID0+ICREeW5hbWljRmllbGRDb25maWcsCiAgICAgICAgICAgICAgICAgICAgUGFyYW1PYmplY3QgICAgICAgID0+ICRQYXJhbU9iamVjdCwKICAgICAgICAgICAgICAgICAgICBNYW5kYXRvcnkgICAgICAgICAgPT4gJEVudHJ5LT5bNF0sCiAgICAgICAgICAgICAgICApOwoKICAgICAgICAgICAgICAgIGlmICggJFZhbGlkYXRpb25SZXN1bHQtPntTZXJ2ZXJFcnJvcn0gKSB7CiAgICAgICAgICAgICAgICAgICAgJEVycm9yc3sgJEVudHJ5LT5bMF0gfSA9ICRWYWxpZGF0aW9uUmVzdWx0OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CgogICAgICAgICAgICAgICAgICAgICMgZ2VuZXJhdGUgc3RvcmFibGUgdmFsdWUgb2YgZHluYW1pYyBmaWVsZCBlZGl0IGZpZWxkCiAgICAgICAgICAgICAgICAgICAgJEdldFBhcmFteyAkRW50cnktPlswXSB9ID0gJER5bmFtaWNGaWVsZEJhY2tlbmRPYmplY3QtPkVkaXRGaWVsZFZhbHVlR2V0KAogICAgICAgICAgICAgICAgICAgICAgICBEeW5hbWljRmllbGRDb25maWcgPT4gJER5bmFtaWNGaWVsZENvbmZpZywKICAgICAgICAgICAgICAgICAgICAgICAgUGFyYW1PYmplY3QgICAgICAgID0+ICRQYXJhbU9iamVjdCwKICAgICAgICAgICAgICAgICAgICAgICAgTGF5b3V0T2JqZWN0ICAgICAgID0+ICRMYXlvdXRPYmplY3QsCiAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgIyBjaGVjayByZW1haW5pbmcgbm9uLWR5bmFtaWMtZmllbGQgbWFuZGF0b3J5IGZpZWxkcwogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICRHZXRQYXJhbXsgJEVudHJ5LT5bMF0gfSA9ICRQYXJhbU9iamVjdC0+R2V0UGFyYW0oIFBhcmFtID0+ICRFbnRyeS0+WzBdICkgLy8gJyc7CiAgICAgICAgICAgICAgICBpZiAoICEkR2V0UGFyYW17ICRFbnRyeS0+WzBdIH0gJiYgJEVudHJ5LT5bNF0gKSB7CiAgICAgICAgICAgICAgICAgICAgJEVycm9yc3sgJEVudHJ5LT5bMF0gLiAnSW52YWxpZCcgfSA9ICdTZXJ2ZXJFcnJvcic7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmICggIWRlZmluZWQgJEdldFBhcmFte0N1c3RvbWVySUR9ICkgewogICAgICAgICAgICAkR2V0UGFyYW17Q3VzdG9tZXJJRH0gPSAkUGFyYW1PYmplY3QtPkdldFBhcmFtKCBQYXJhbSA9PiAnQ3VzdG9tZXJJRCcgKSB8fCAnJzsKICAgICAgICB9CgogICAgICAgICMgY2hlY2sgZm9yIGR1cGxpY2F0ZSBlbnRyaWVzCiAgICAgICAgaWYgKCAkR2V0UGFyYW17Q3VzdG9tZXJDb21wYW55SUR9IG5lICRHZXRQYXJhbXtDdXN0b21lcklEfSApIHsKCiAgICAgICAgICAgICMgZ2V0IEN1c3RvbWVyQ29tcGFueSBsaXN0CiAgICAgICAgICAgIG15ICVMaXN0ID0gJEN1c3RvbWVyQ29tcGFueU9iamVjdC0+Q3VzdG9tZXJDb21wYW55TGlzdCgKICAgICAgICAgICAgICAgIFNlYXJjaCA9PiAkUGFyYW17U2VhcmNofSwKICAgICAgICAgICAgICAgIFZhbGlkICA9PiAwLAogICAgICAgICAgICAgICAgVXNlcklEID0+ICRTZWxmLT57VXNlcklEfSwKICAgICAgICAgICAgKTsKCiAgICAgICAgICAgICMgY2hlY2sgZHVwbGljYXRlIGZpZWxkCiAgICAgICAgICAgIGlmICggJUxpc3QgJiYgJExpc3R7ICRHZXRQYXJhbXtDdXN0b21lcklEfSB9ICkgewogICAgICAgICAgICAgICAgJEVycm9yc3tEdXBsaWNhdGV9ID0gJ1NlcnZlckVycm9yJzsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgIyBpZiBubyBlcnJvcnMgb2NjdXJyZWQKICAgICAgICBpZiAoICElRXJyb3JzICkgewoKICAgICAgICAgICAgIyB1cGRhdGUgZ3JvdXAKICAgICAgICAgICAgbXkgJFVwZGF0ZSA9ICRDdXN0b21lckNvbXBhbnlPYmplY3QtPkN1c3RvbWVyQ29tcGFueVVwZGF0ZSggJUdldFBhcmFtLCBVc2VySUQgPT4gJFNlbGYtPntVc2VySUR9ICk7CgogICAgICAgICAgICBpZiAoJFVwZGF0ZSkgewoKICAgICAgICAgICAgICAgIG15ICRTZXRERkVycm9yOwoKICAgICAgICAgICAgICAgICMgc2V0IGR5bmFtaWMgZmllbGQgdmFsdWVzCiAgICAgICAgICAgICAgICBteSAkRHluYW1pY0ZpZWxkT2JqZWN0ID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkR5bmFtaWNGaWVsZCcpOwoKICAgICAgICAgICAgICAgIEVOVFJZOgogICAgICAgICAgICAgICAgZm9yIG15ICRFbnRyeSAoIEB7ICRDb25maWdPYmplY3QtPkdldCggJEdldFBhcmFte1NvdXJjZX0gKS0+e01hcH0gfSApIHsKICAgICAgICAgICAgICAgICAgICBuZXh0IEVOVFJZIGlmICRFbnRyeS0+WzVdIG5lICdkeW5hbWljX2ZpZWxkJzsKCiAgICAgICAgICAgICAgICAgICAgbXkgJER5bmFtaWNGaWVsZENvbmZpZyA9ICRTZWxmLT57RHluYW1pY0ZpZWxkTG9va3VwfS0+eyAkRW50cnktPlsyXSB9OwoKICAgICAgICAgICAgICAgICAgICBpZiAoICFJc0hhc2hSZWZXaXRoRGF0YSgkRHluYW1pY0ZpZWxkQ29uZmlnKSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgJFNldERGRXJyb3IgLj0gJExheW91dE9iamVjdC0+Tm90aWZ5KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgSW5mbyA9PiAkTGF5b3V0T2JqZWN0LT57TGFuZ3VhZ2VPYmplY3R9LT5UcmFuc2xhdGUoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0R5bmFtaWMgZmllbGQgJXMgbm90IGZvdW5kIScsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEVudHJ5LT5bMl0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICAgICAgICAgIG5leHQgRU5UUlk7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBteSAkVmFsdWVTZXQgPSAkRHluYW1pY0ZpZWxkQmFja2VuZE9iamVjdC0+VmFsdWVTZXQoCiAgICAgICAgICAgICAgICAgICAgICAgIER5bmFtaWNGaWVsZENvbmZpZyA9PiAkRHluYW1pY0ZpZWxkQ29uZmlnLAogICAgICAgICAgICAgICAgICAgICAgICBPYmplY3ROYW1lICAgICAgICAgPT4gJEdldFBhcmFte0N1c3RvbWVySUR9LAogICAgICAgICAgICAgICAgICAgICAgICBWYWx1ZSAgICAgICAgICAgICAgPT4gJEdldFBhcmFteyAkRW50cnktPlswXSB9LAogICAgICAgICAgICAgICAgICAgICAgICBVc2VySUQgICAgICAgICAgICAgPT4gJFNlbGYtPntVc2VySUR9LAogICAgICAgICAgICAgICAgICAgICk7CgogICAgICAgICAgICAgICAgICAgIGlmICggISRWYWx1ZVNldCApIHsKICAgICAgICAgICAgICAgICAgICAgICAgJFNldERGRXJyb3IKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC49ICRMYXlvdXRPYmplY3QtPk5vdGlmeSgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEluZm8gPT4gJExheW91dE9iamVjdC0+e0xhbmd1YWdlT2JqZWN0fS0+VHJhbnNsYXRlKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdVbmFibGUgdG8gc2V0IHZhbHVlIGZvciBkeW5hbWljIGZpZWxkICVzIScsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJEVudHJ5LT5bMl0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgICAgICAgICAgbmV4dCBFTlRSWTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgbXkgJENvbnRpbnVlQWZ0ZXJTYXZlID0gJFBhcmFtT2JqZWN0LT5HZXRQYXJhbSggUGFyYW0gPT4gJ0NvbnRpbnVlQWZ0ZXJTYXZlJyApIHx8IDA7CgogICAgICAgICAgICAgICAgIyBpZiBzZXQgREYgZXJyb3IgZXhpc3RzLCBjcmVhdGUgbm90aWZpY2F0aW9uCiAgICAgICAgICAgICAgICBpZiAoJFNldERGRXJyb3IpIHsKCiAgICAgICAgICAgICAgICAgICAgIyBpZiB0aGUgdXNlciB3b3VsZCBsaWtlIHRvIGNvbnRpbnVlIGVkaXRpbmcgdGhlIGN1c3RvbWVyIGNvbXBhbnksIGp1c3QgcmVkaXJlY3QgdG8gdGhlIGVkaXQgc2NyZWVuCiAgICAgICAgICAgICAgICAgICAgaWYgKCAkQ29udGludWVBZnRlclNhdmUgZXEgJzEnICkgewogICAgICAgICAgICAgICAgICAgICAgICAkU2VsZi0+X0VkaXQoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBY3Rpb24gPT4gJ0NoYW5nZScsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBOYXYgICAgPT4gJE5hdiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEVycm9ycyA9PiBcJUVycm9ycywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICVHZXRQYXJhbSwKICAgICAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRTZWxmLT5fT3ZlcnZpZXcoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBOYXYgICAgPT4gJE5hdiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNlYXJjaCA9PiAkU2VhcmNoLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJUdldFBhcmFtLAogICAgICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBteSAkT3V0cHV0ID0gJExheW91dE9iamVjdC0+SGVhZGVyKCk7CiAgICAgICAgICAgICAgICAgICAgJE91dHB1dCAuPSAkTGF5b3V0T2JqZWN0LT5OYXZpZ2F0aW9uQmFyKAogICAgICAgICAgICAgICAgICAgICAgICBUeXBlID0+ICROYXZpZ2F0aW9uQmFyVHlwZSwKICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgICAgICRPdXRwdXQgLj0gJExheW91dE9iamVjdC0+Tm90aWZ5KCBJbmZvID0+IFRyYW5zbGF0YWJsZSgnQ3VzdG9tZXIgY29tcGFueSB1cGRhdGVkIScpICk7CiAgICAgICAgICAgICAgICAgICAgJE91dHB1dCAuPSAkU2V0REZFcnJvcjsKICAgICAgICAgICAgICAgICAgICAkT3V0cHV0IC49ICRMYXlvdXRPYmplY3QtPk91dHB1dCgKICAgICAgICAgICAgICAgICAgICAgICAgVGVtcGxhdGVGaWxlID0+ICdBZG1pbkN1c3RvbWVyQ29tcGFueScsCiAgICAgICAgICAgICAgICAgICAgICAgIERhdGEgICAgICAgICA9PiBcJVBhcmFtLAogICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICAgICAgJE91dHB1dCAuPSAkTGF5b3V0T2JqZWN0LT5Gb290ZXIoKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gJE91dHB1dDsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAjIGlmIHRoZSB1c2VyIHdvdWxkIGxpa2UgdG8gY29udGludWUgZWRpdGluZyB0aGUgY3VzdG9tZXIgY29tcGFueSwganVzdCByZWRpcmVjdCB0byB0aGUgZWRpdCBzY3JlZW4KICAgICAgICAgICAgICAgIGlmICggJENvbnRpbnVlQWZ0ZXJTYXZlIGVxICcxJyApIHsKICAgICAgICAgICAgICAgICAgICBteSAkQ3VzdG9tZXJJRCA9ICRQYXJhbU9iamVjdC0+R2V0UGFyYW0oIFBhcmFtID0+ICdDdXN0b21lcklEJyApIHx8ICcnOwogICAgICAgICAgICAgICAgICAgIHJldHVybiAkTGF5b3V0T2JqZWN0LT5SZWRpcmVjdCgKICAgICAgICAgICAgICAgICAgICAgICAgT1AgPT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICJBY3Rpb249JFNlbGYtPntBY3Rpb259O1N1YmFjdGlvbj1DaGFuZ2U7Q3VzdG9tZXJJRD0kQ3VzdG9tZXJJRDtOYXY9JE5hdjtOb3RpZmljYXRpb249VXBkYXRlIgogICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKCiAgICAgICAgICAgICAgICAgICAgIyBvdGhlcndpc2UgcmV0dXJuIHRvIG92ZXJ2aWV3CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRMYXlvdXRPYmplY3QtPlJlZGlyZWN0KCBPUCA9PiAiQWN0aW9uPSRTZWxmLT57QWN0aW9ufTtOb3RpZmljYXRpb249VXBkYXRlIiApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAjIHNvbWV0aGluZyB3ZW50IHdyb25nCiAgICAgICAgbXkgJE91dHB1dCA9ICRMYXlvdXRPYmplY3QtPkhlYWRlcigpOwogICAgICAgICRPdXRwdXQgLj0gJExheW91dE9iamVjdC0+TmF2aWdhdGlvbkJhcigKICAgICAgICAgICAgVHlwZSA9PiAkTmF2aWdhdGlvbkJhclR5cGUsCiAgICAgICAgKTsKCiAgICAgICAgJE91dHB1dCAuPSAkTGF5b3V0T2JqZWN0LT5Ob3RpZnkoIFByaW9yaXR5ID0+ICdFcnJvcicgKTsKCiAgICAgICAgIyBzZXQgbm90aWZpY2F0aW9uIGZvciBkdXBsaWNhdGUgZW50cnkKICAgICAgICBpZiAoICRFcnJvcnN7RHVwbGljYXRlfSApIHsKICAgICAgICAgICAgJE91dHB1dCAuPSAkTGF5b3V0T2JqZWN0LT5Ob3RpZnkoCiAgICAgICAgICAgICAgICBQcmlvcml0eSA9PiAnRXJyb3InLAogICAgICAgICAgICAgICAgSW5mbyAgICAgPT4gJExheW91dE9iamVjdC0+e0xhbmd1YWdlT2JqZWN0fS0+VHJhbnNsYXRlKAogICAgICAgICAgICAgICAgICAgICdDdXN0b21lciBDb21wYW55ICVzIGFscmVhZHkgZXhpc3RzIScsCiAgICAgICAgICAgICAgICAgICAgJEdldFBhcmFte0N1c3RvbWVySUR9LAogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgKTsKICAgICAgICB9CgogICAgICAgICRTZWxmLT5fRWRpdCgKICAgICAgICAgICAgQWN0aW9uID0+ICdDaGFuZ2UnLAogICAgICAgICAgICBOYXYgICAgPT4gJE5hdiwKICAgICAgICAgICAgRXJyb3JzID0+IFwlRXJyb3JzLAogICAgICAgICAgICAlR2V0UGFyYW0sCiAgICAgICAgKTsKICAgICAgICAkT3V0cHV0IC49ICRMYXlvdXRPYmplY3QtPk91dHB1dCgKICAgICAgICAgICAgVGVtcGxhdGVGaWxlID0+ICdBZG1pbkN1c3RvbWVyQ29tcGFueScsCiAgICAgICAgICAgIERhdGEgICAgICAgICA9PiBcJVBhcmFtLAogICAgICAgICk7CiAgICAgICAgJE91dHB1dCAuPSAkTGF5b3V0T2JqZWN0LT5Gb290ZXIoKTsKICAgICAgICByZXR1cm4gJE91dHB1dDsKICAgIH0KCiAgICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAjCiAgICAjIGFkZAogICAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gIwogICAgZWxzaWYgKCAkU2VsZi0+e1N1YmFjdGlvbn0gZXEgJ0FkZCcgKSB7CiAgICAgICAgJEdldFBhcmFte05hbWV9ID0gJFBhcmFtT2JqZWN0LT5HZXRQYXJhbSggUGFyYW0gPT4gJ05hbWUnICk7CiAgICAgICAgbXkgJE91dHB1dCA9ICRMYXlvdXRPYmplY3QtPkhlYWRlcigpOwogICAgICAgICRPdXRwdXQgLj0gJExheW91dE9iamVjdC0+TmF2aWdhdGlvbkJhcigKICAgICAgICAgICAgVHlwZSA9PiAkTmF2aWdhdGlvbkJhclR5cGUsCiAgICAgICAgKTsKICAgICAgICAkU2VsZi0+X0VkaXQoCiAgICAgICAgICAgIEFjdGlvbiA9PiAnQWRkJywKICAgICAgICAgICAgTmF2ICAgID0+ICROYXYsCiAgICAgICAgICAgICVHZXRQYXJhbSwKICAgICAgICApOwogICAgICAgICRPdXRwdXQgLj0gJExheW91dE9iamVjdC0+T3V0cHV0KAogICAgICAgICAgICBUZW1wbGF0ZUZpbGUgPT4gJ0FkbWluQ3VzdG9tZXJDb21wYW55JywKICAgICAgICAgICAgRGF0YSAgICAgICAgID0+IFwlUGFyYW0sCiAgICAgICAgKTsKICAgICAgICAkT3V0cHV0IC49ICRMYXlvdXRPYmplY3QtPkZvb3RlcigpOwogICAgICAgIHJldHVybiAkT3V0cHV0OwogICAgfQoKICAgICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICMKICAgICMgYWRkIGFjdGlvbgogICAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gIwogICAgZWxzaWYgKCAkU2VsZi0+e1N1YmFjdGlvbn0gZXEgJ0FkZEFjdGlvbicgKSB7CgogICAgICAgICMgY2hhbGxlbmdlIHRva2VuIGNoZWNrIGZvciB3cml0ZSBhY3Rpb24KICAgICAgICAkTGF5b3V0T2JqZWN0LT5DaGFsbGVuZ2VUb2tlbkNoZWNrKCk7CgogICAgICAgIG15ICROb3RlID0gJyc7CiAgICAgICAgbXkgJUVycm9yczsKCiAgICAgICAgbXkgJEN1c3RvbWVyQ29tcGFueUtleSA9ICRDb25maWdPYmplY3QtPkdldCggJEdldFBhcmFte1NvdXJjZX0gKS0+e0N1c3RvbWVyQ29tcGFueUtleX07CiAgICAgICAgbXkgJEN1c3RvbWVyQ29tcGFueUlEOwoKICAgICAgICAjIEdldCBkeW5hbWljIGZpZWxkIGJhY2tlbmQgb2JqZWN0LgogICAgICAgIG15ICREeW5hbWljRmllbGRCYWNrZW5kT2JqZWN0ID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkR5bmFtaWNGaWVsZDo6QmFja2VuZCcpOwoKICAgICAgICBFTlRSWToKICAgICAgICBmb3IgbXkgJEVudHJ5ICggQHsgJENvbmZpZ09iamVjdC0+R2V0KCAkR2V0UGFyYW17U291cmNlfSApLT57TWFwfSB9ICkgewoKICAgICAgICAgICAgIyBjaGVjayBkeW5hbWljIGZpZWxkcwogICAgICAgICAgICBpZiAoICRFbnRyeS0+WzVdIGVxICdkeW5hbWljX2ZpZWxkJyApIHsKCiAgICAgICAgICAgICAgICBteSAkRHluYW1pY0ZpZWxkQ29uZmlnID0gJFNlbGYtPntEeW5hbWljRmllbGRMb29rdXB9LT57ICRFbnRyeS0+WzJdIH07CgogICAgICAgICAgICAgICAgaWYgKCAhSXNIYXNoUmVmV2l0aERhdGEoJER5bmFtaWNGaWVsZENvbmZpZykgKSB7CiAgICAgICAgICAgICAgICAgICAgJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkxvZycpLT5Mb2coCiAgICAgICAgICAgICAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgICAgICAgICAgICAgIE1lc3NhZ2UgID0+ICJEeW5hbWljRmllbGQgJEVudHJ5LT5bMl0gbm90IGZvdW5kISIsCiAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgICAgICBuZXh0IEVOVFJZOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIG15ICRWYWxpZGF0aW9uUmVzdWx0ID0gJER5bmFtaWNGaWVsZEJhY2tlbmRPYmplY3QtPkVkaXRGaWVsZFZhbHVlVmFsaWRhdGUoCiAgICAgICAgICAgICAgICAgICAgRHluYW1pY0ZpZWxkQ29uZmlnID0+ICREeW5hbWljRmllbGRDb25maWcsCiAgICAgICAgICAgICAgICAgICAgUGFyYW1PYmplY3QgICAgICAgID0+ICRQYXJhbU9iamVjdCwKICAgICAgICAgICAgICAgICAgICBNYW5kYXRvcnkgICAgICAgICAgPT4gJEVudHJ5LT5bNF0sCiAgICAgICAgICAgICAgICApOwoKICAgICAgICAgICAgICAgIGlmICggJFZhbGlkYXRpb25SZXN1bHQtPntTZXJ2ZXJFcnJvcn0gKSB7CiAgICAgICAgICAgICAgICAgICAgJEVycm9yc3sgJEVudHJ5LT5bMF0gfSA9ICRWYWxpZGF0aW9uUmVzdWx0OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CgogICAgICAgICAgICAgICAgICAgICMgZ2VuZXJhdGUgc3RvcmFibGUgdmFsdWUgb2YgZHluYW1pYyBmaWVsZCBlZGl0IGZpZWxkCiAgICAgICAgICAgICAgICAgICAgJEdldFBhcmFteyAkRW50cnktPlswXSB9ID0gJER5bmFtaWNGaWVsZEJhY2tlbmRPYmplY3QtPkVkaXRGaWVsZFZhbHVlR2V0KAogICAgICAgICAgICAgICAgICAgICAgICBEeW5hbWljRmllbGRDb25maWcgPT4gJER5bmFtaWNGaWVsZENvbmZpZywKICAgICAgICAgICAgICAgICAgICAgICAgUGFyYW1PYmplY3QgICAgICAgID0+ICRQYXJhbU9iamVjdCwKICAgICAgICAgICAgICAgICAgICAgICAgTGF5b3V0T2JqZWN0ICAgICAgID0+ICRMYXlvdXRPYmplY3QsCiAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgIyBjaGVjayByZW1haW5pbmcgbm9uLWR5bmFtaWMtZmllbGQgbWFuZGF0b3J5IGZpZWxkcwogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICRHZXRQYXJhbXsgJEVudHJ5LT5bMF0gfSA9ICRQYXJhbU9iamVjdC0+R2V0UGFyYW0oIFBhcmFtID0+ICRFbnRyeS0+WzBdICkgLy8gJyc7CiAgICAgICAgICAgICAgICBpZiAoICEkR2V0UGFyYW17ICRFbnRyeS0+WzBdIH0gJiYgJEVudHJ5LT5bNF0gKSB7CiAgICAgICAgICAgICAgICAgICAgJEVycm9yc3sgJEVudHJ5LT5bMF0gLiAnSW52YWxpZCcgfSA9ICdTZXJ2ZXJFcnJvcic7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICMgc2F2ZSBjdXN0b21lciBjb21wYW55IGtleSBmb3IgY2hlY2tpbmcgZHVwbGljYXRlCiAgICAgICAgICAgIGlmICggJEVudHJ5LT5bMl0gZXEgJEN1c3RvbWVyQ29tcGFueUtleSApIHsKICAgICAgICAgICAgICAgICRDdXN0b21lckNvbXBhbnlJRCA9ICRHZXRQYXJhbXsgJEVudHJ5LT5bMF0gfTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgIyBnZXQgQ3VzdG9tZXJDb21wYW55IGxpc3QKICAgICAgICBteSAlTGlzdCA9ICRDdXN0b21lckNvbXBhbnlPYmplY3QtPkN1c3RvbWVyQ29tcGFueUxpc3QoCiAgICAgICAgICAgIFNlYXJjaCA9PiAkUGFyYW17U2VhcmNofSwKICAgICAgICAgICAgVmFsaWQgID0+IDAsCiAgICAgICAgICAgIFVzZXJJRCA9PiAkU2VsZi0+e1VzZXJJRH0sCiAgICAgICAgKTsKCiAgICAgICAgIyBjaGVjayBkdXBsaWNhdGUgZmllbGQKICAgICAgICBpZiAoICVMaXN0ICYmICRMaXN0eyRDdXN0b21lckNvbXBhbnlJRH0gKSB7CiAgICAgICAgICAgICRFcnJvcnN7RHVwbGljYXRlfSA9ICdTZXJ2ZXJFcnJvcic7CiAgICAgICAgfQoKICAgICAgICAjIGlmIG5vIGVycm9ycyBvY2N1cnJlZAogICAgICAgIGlmICggISVFcnJvcnMgKSB7CgogICAgICAgICAgICAjIGFkZCBjb21wYW55CiAgICAgICAgICAgIGlmICgKICAgICAgICAgICAgICAgICRDdXN0b21lckNvbXBhbnlPYmplY3QtPkN1c3RvbWVyQ29tcGFueUFkZCgKICAgICAgICAgICAgICAgICAgICAlR2V0UGFyYW0sCiAgICAgICAgICAgICAgICAgICAgVXNlcklEID0+ICRTZWxmLT57VXNlcklEfSwKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgewoKICAgICAgICAgICAgICAgICRTZWxmLT5fT3ZlcnZpZXcoCiAgICAgICAgICAgICAgICAgICAgTmF2ICAgID0+ICROYXYsCiAgICAgICAgICAgICAgICAgICAgU2VhcmNoID0+ICRTZWFyY2gsCiAgICAgICAgICAgICAgICAgICAgJUdldFBhcmFtLAogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgIG15ICRPdXRwdXQgPSAkTGF5b3V0T2JqZWN0LT5IZWFkZXIoKTsKICAgICAgICAgICAgICAgICRPdXRwdXQgLj0gJExheW91dE9iamVjdC0+TmF2aWdhdGlvbkJhcigKICAgICAgICAgICAgICAgICAgICBUeXBlID0+ICROYXZpZ2F0aW9uQmFyVHlwZSwKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICAkT3V0cHV0IC49ICRMYXlvdXRPYmplY3QtPk5vdGlmeSgKICAgICAgICAgICAgICAgICAgICBJbmZvID0+IFRyYW5zbGF0YWJsZSgnQ3VzdG9tZXIgY29tcGFueSBhZGRlZCEnKSwKICAgICAgICAgICAgICAgICk7CgogICAgICAgICAgICAgICAgIyBzZXQgZHluYW1pYyBmaWVsZCB2YWx1ZXMKICAgICAgICAgICAgICAgIG15ICREeW5hbWljRmllbGRPYmplY3QgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6RHluYW1pY0ZpZWxkJyk7CgogICAgICAgICAgICAgICAgRU5UUlk6CiAgICAgICAgICAgICAgICBmb3IgbXkgJEVudHJ5ICggQHsgJENvbmZpZ09iamVjdC0+R2V0KCAkR2V0UGFyYW17U291cmNlfSApLT57TWFwfSB9ICkgewogICAgICAgICAgICAgICAgICAgIG5leHQgRU5UUlkgaWYgJEVudHJ5LT5bNV0gbmUgJ2R5bmFtaWNfZmllbGQnOwoKICAgICAgICAgICAgICAgICAgICBteSAkRHluYW1pY0ZpZWxkQ29uZmlnID0gJFNlbGYtPntEeW5hbWljRmllbGRMb29rdXB9LT57ICRFbnRyeS0+WzJdIH07CgogICAgICAgICAgICAgICAgICAgIGlmICggIUlzSGFzaFJlZldpdGhEYXRhKCREeW5hbWljRmllbGRDb25maWcpICkgewogICAgICAgICAgICAgICAgICAgICAgICAkT3V0cHV0IC49ICRMYXlvdXRPYmplY3QtPk5vdGlmeSgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEluZm8gPT4gJExheW91dE9iamVjdC0+e0xhbmd1YWdlT2JqZWN0fS0+VHJhbnNsYXRlKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdEeW5hbWljIGZpZWxkICVzIG5vdCBmb3VuZCEnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRFbnRyeS0+WzJdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgICAgICAgICAgbmV4dCBFTlRSWTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIG15ICRWYWx1ZVNldCA9ICREeW5hbWljRmllbGRCYWNrZW5kT2JqZWN0LT5WYWx1ZVNldCgKICAgICAgICAgICAgICAgICAgICAgICAgRHluYW1pY0ZpZWxkQ29uZmlnID0+ICREeW5hbWljRmllbGRDb25maWcsCiAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdE5hbWUgICAgICAgICA9PiAkR2V0UGFyYW17Q3VzdG9tZXJJRH0sCiAgICAgICAgICAgICAgICAgICAgICAgIFZhbHVlICAgICAgICAgICAgICA9PiAkR2V0UGFyYW17ICRFbnRyeS0+WzBdIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIFVzZXJJRCAgICAgICAgICAgICA9PiAkU2VsZi0+e1VzZXJJRH0sCiAgICAgICAgICAgICAgICAgICAgKTsKCiAgICAgICAgICAgICAgICAgICAgaWYgKCAhJFZhbHVlU2V0ICkgewogICAgICAgICAgICAgICAgICAgICAgICAkT3V0cHV0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuPSAkTGF5b3V0T2JqZWN0LT5Ob3RpZnkoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBJbmZvID0+ICRMYXlvdXRPYmplY3QtPntMYW5ndWFnZU9iamVjdH0tPlRyYW5zbGF0ZSgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnVW5hYmxlIHRvIHNldCB2YWx1ZSBmb3IgZHluYW1pYyBmaWVsZCAlcyEnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRFbnRyeS0+WzJdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICAgICAgICAgIG5leHQgRU5UUlk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICRPdXRwdXQgLj0gJExheW91dE9iamVjdC0+T3V0cHV0KAogICAgICAgICAgICAgICAgICAgIFRlbXBsYXRlRmlsZSA9PiAnQWRtaW5DdXN0b21lckNvbXBhbnknLAogICAgICAgICAgICAgICAgICAgIERhdGEgICAgICAgICA9PiBcJVBhcmFtLAogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgICRPdXRwdXQgLj0gJExheW91dE9iamVjdC0+Rm9vdGVyKCk7CiAgICAgICAgICAgICAgICByZXR1cm4gJE91dHB1dDsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgIyBzb21ldGhpbmcgd2VudCB3cm9uZwogICAgICAgIG15ICRPdXRwdXQgPSAkTGF5b3V0T2JqZWN0LT5IZWFkZXIoKTsKICAgICAgICAkT3V0cHV0IC49ICRMYXlvdXRPYmplY3QtPk5hdmlnYXRpb25CYXIoCiAgICAgICAgICAgIFR5cGUgPT4gJE5hdmlnYXRpb25CYXJUeXBlLAogICAgICAgICk7CgogICAgICAgICRPdXRwdXQgLj0gJExheW91dE9iamVjdC0+Tm90aWZ5KCBQcmlvcml0eSA9PiAnRXJyb3InICk7CgogICAgICAgICMgc2V0IG5vdGlmaWNhdGlvbiBmb3IgZHVwbGljYXRlIGVudHJ5CiAgICAgICAgaWYgKCAkRXJyb3Jze0R1cGxpY2F0ZX0gKSB7CiAgICAgICAgICAgICRPdXRwdXQgLj0gJExheW91dE9iamVjdC0+Tm90aWZ5KAogICAgICAgICAgICAgICAgUHJpb3JpdHkgPT4gJ0Vycm9yJywKICAgICAgICAgICAgICAgIEluZm8gICAgID0+ICRMYXlvdXRPYmplY3QtPntMYW5ndWFnZU9iamVjdH0tPlRyYW5zbGF0ZSgKICAgICAgICAgICAgICAgICAgICAnQ3VzdG9tZXIgQ29tcGFueSAlcyBhbHJlYWR5IGV4aXN0cyEnLAogICAgICAgICAgICAgICAgICAgICRDdXN0b21lckNvbXBhbnlJRCwKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICk7CiAgICAgICAgfQoKICAgICAgICAkU2VsZi0+X0VkaXQoCiAgICAgICAgICAgIEFjdGlvbiA9PiAnQWRkJywKICAgICAgICAgICAgTmF2ICAgID0+ICROYXYsCiAgICAgICAgICAgIEVycm9ycyA9PiBcJUVycm9ycywKICAgICAgICAgICAgJUdldFBhcmFtLAogICAgICAgICk7CiAgICAgICAgJE91dHB1dCAuPSAkTGF5b3V0T2JqZWN0LT5PdXRwdXQoCiAgICAgICAgICAgIFRlbXBsYXRlRmlsZSA9PiAnQWRtaW5DdXN0b21lckNvbXBhbnknLAogICAgICAgICAgICBEYXRhICAgICAgICAgPT4gXCVQYXJhbSwKICAgICAgICApOwogICAgICAgICRPdXRwdXQgLj0gJExheW91dE9iamVjdC0+Rm9vdGVyKCk7CiAgICAgICAgcmV0dXJuICRPdXRwdXQ7CiAgICB9CgogICAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgICMgb3ZlcnZpZXcKICAgICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICBlbHNlIHsKICAgICAgICAkU2VsZi0+X092ZXJ2aWV3KAogICAgICAgICAgICBOYXYgICAgPT4gJE5hdiwKICAgICAgICAgICAgU2VhcmNoID0+ICRTZWFyY2gsCiAgICAgICAgICAgICVHZXRQYXJhbSwKICAgICAgICApOwogICAgICAgIG15ICRPdXRwdXQgICAgICAgPSAkTGF5b3V0T2JqZWN0LT5IZWFkZXIoKTsKICAgICAgICBteSAkTm90aWZpY2F0aW9uID0gJFBhcmFtT2JqZWN0LT5HZXRQYXJhbSggUGFyYW0gPT4gJ05vdGlmaWNhdGlvbicgKSB8fCAnJzsKICAgICAgICAkT3V0cHV0IC49ICRMYXlvdXRPYmplY3QtPk5hdmlnYXRpb25CYXIoCiAgICAgICAgICAgIFR5cGUgPT4gJE5hdmlnYXRpb25CYXJUeXBlLAogICAgICAgICk7CiAgICAgICAgJE91dHB1dCAuPSAkTGF5b3V0T2JqZWN0LT5Ob3RpZnkoIEluZm8gPT4gVHJhbnNsYXRhYmxlKCdDdXN0b21lciBjb21wYW55IHVwZGF0ZWQhJykgKQogICAgICAgICAgICBpZiAoICROb3RpZmljYXRpb24gJiYgJE5vdGlmaWNhdGlvbiBlcSAnVXBkYXRlJyApOwoKICAgICAgICAkT3V0cHV0IC49ICRMYXlvdXRPYmplY3QtPk91dHB1dCgKICAgICAgICAgICAgVGVtcGxhdGVGaWxlID0+ICdBZG1pbkN1c3RvbWVyQ29tcGFueScsCiAgICAgICAgICAgIERhdGEgICAgICAgICA9PiBcJVBhcmFtLAogICAgICAgICk7CgogICAgICAgICRPdXRwdXQgLj0gJExheW91dE9iamVjdC0+Rm9vdGVyKCk7CiAgICAgICAgcmV0dXJuICRPdXRwdXQ7CiAgICB9Cn0KCnN1YiBfRWRpdCB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICRMYXlvdXRPYmplY3QgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6Ok91dHB1dDo6SFRNTDo6TGF5b3V0Jyk7CgogICAgJExheW91dE9iamVjdC0+QmxvY2soCiAgICAgICAgTmFtZSA9PiAnT3ZlcnZpZXcnLAogICAgICAgIERhdGEgPT4gXCVQYXJhbSwKICAgICk7CgogICAgJExheW91dE9iamVjdC0+QmxvY2soIE5hbWUgPT4gJ0FjdGlvbkxpc3QnICk7CiAgICAkTGF5b3V0T2JqZWN0LT5CbG9jaygKICAgICAgICBOYW1lID0+ICdBY3Rpb25PdmVydmlldycsCiAgICAgICAgRGF0YSA9PiBcJVBhcmFtLAogICAgKTsKCiAgICAkTGF5b3V0T2JqZWN0LT5CbG9jaygKICAgICAgICBOYW1lID0+ICdPdmVydmlld1VwZGF0ZScsCiAgICAgICAgRGF0YSA9PiBcJVBhcmFtLAogICAgKTsKCiAgICAjIGdldCBjb25maWcgb2JqZWN0CiAgICBteSAkQ29uZmlnT2JqZWN0ID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpDb25maWcnKTsKCiAgICAjIHNlbmQgcGFyYW1ldGVyIFJlYWRPbmx5IHRvIEpTIG9iamVjdAogICAgJExheW91dE9iamVjdC0+QWRkSlNEYXRhKAogICAgICAgIEtleSAgID0+ICdSZWFkT25seScsCiAgICAgICAgVmFsdWUgPT4gJENvbmZpZ09iamVjdC0+eyAkUGFyYW17U291cmNlfSB9LT57UmVhZE9ubHl9LAogICAgKTsKCiAgICAjIEdldCB2YWxpZCBvYmplY3QuCiAgICBteSAkVmFsaWRPYmplY3QgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6VmFsaWQnKTsKCiAgICAkUGFyYW17J1ZhbGlkT3B0aW9uJ30gPSAkTGF5b3V0T2JqZWN0LT5CdWlsZFNlbGVjdGlvbigKICAgICAgICBEYXRhICAgICAgID0+IHsgJFZhbGlkT2JqZWN0LT5WYWxpZExpc3QoKSwgfSwKICAgICAgICBOYW1lICAgICAgID0+ICdWYWxpZElEJywKICAgICAgICBDbGFzcyAgICAgID0+ICdNb2Rlcm5pemUnLAogICAgICAgIFNlbGVjdGVkSUQgPT4gJFBhcmFte1ZhbGlkSUR9LAogICAgKTsKCiAgICAjIEdldCBuZWVkZWQgb2JqZWN0cy4KICAgIG15ICRQYXJhbU9iamVjdCAgICAgICAgICAgICAgID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OldlYjo6UmVxdWVzdCcpOwogICAgbXkgJER5bmFtaWNGaWVsZEJhY2tlbmRPYmplY3QgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6RHluYW1pY0ZpZWxkOjpCYWNrZW5kJyk7CgogICAgRU5UUlk6CiAgICBmb3IgbXkgJEVudHJ5ICggQHsgJENvbmZpZ09iamVjdC0+R2V0KCAkUGFyYW17U291cmNlfSApLT57TWFwfSB9ICkgewogICAgICAgIGlmICggJEVudHJ5LT5bMF0gKSB7CgogICAgICAgICAgICAjIEhhbmRsZSBkeW5hbWljIGZpZWxkcwogICAgICAgICAgICBpZiAoICRFbnRyeS0+WzVdIGVxICdkeW5hbWljX2ZpZWxkJyApIHsKCiAgICAgICAgICAgICAgICBteSAkRHluYW1pY0ZpZWxkQ29uZmlnID0gJFNlbGYtPntEeW5hbWljRmllbGRMb29rdXB9LT57ICRFbnRyeS0+WzJdIH07CgogICAgICAgICAgICAgICAgbmV4dCBFTlRSWSBpZiAhSXNIYXNoUmVmV2l0aERhdGEoJER5bmFtaWNGaWVsZENvbmZpZyk7CgogICAgICAgICAgICAgICAgIyBHZXQgSFRNTCBmb3IgZHluYW1pYyBmaWVsZAogICAgICAgICAgICAgICAgbXkgJER5bmFtaWNGaWVsZEhUTUwgPSAkRHluYW1pY0ZpZWxkQmFja2VuZE9iamVjdC0+RWRpdEZpZWxkUmVuZGVyKAogICAgICAgICAgICAgICAgICAgIER5bmFtaWNGaWVsZENvbmZpZyA9PiAkRHluYW1pY0ZpZWxkQ29uZmlnLAogICAgICAgICAgICAgICAgICAgIFZhbHVlICAgICAgICAgICAgICA9PiAkUGFyYW17ICRFbnRyeS0+WzBdIH0gPyAkUGFyYW17ICRFbnRyeS0+WzBdIH0gOiB1bmRlZiwKICAgICAgICAgICAgICAgICAgICBNYW5kYXRvcnkgICAgICAgICAgPT4gJEVudHJ5LT5bNF0sCiAgICAgICAgICAgICAgICAgICAgTGF5b3V0T2JqZWN0ICAgICAgID0+ICRMYXlvdXRPYmplY3QsCiAgICAgICAgICAgICAgICAgICAgUGFyYW1PYmplY3QgICAgICAgID0+ICRQYXJhbU9iamVjdCwKCiAgICAgICAgICAgICAgICAgICAgIyBTZXJ2ZXIgZXJyb3IsIGlmIGFueQogICAgICAgICAgICAgICAgICAgICV7ICRQYXJhbXtFcnJvcnN9LT57ICRFbnRyeS0+WzBdIH0gfSwKICAgICAgICAgICAgICAgICk7CgogICAgICAgICAgICAgICAgIyBza2lwIGZpZWxkcyBmb3Igd2hpY2ggSFRNTCBjb3VsZCBub3QgYmUgcmV0cmlldmVkCiAgICAgICAgICAgICAgICBuZXh0IEVOVFJZIGlmICFJc0hhc2hSZWZXaXRoRGF0YSgkRHluYW1pY0ZpZWxkSFRNTCk7CgogICAgICAgICAgICAgICAgJExheW91dE9iamVjdC0+QmxvY2soCiAgICAgICAgICAgICAgICAgICAgTmFtZSA9PiAnUHJlZmVyZW5jZXNHZW5lcmljJywKICAgICAgICAgICAgICAgICAgICBEYXRhID0+IHt9LAogICAgICAgICAgICAgICAgKTsKCiAgICAgICAgICAgICAgICAkTGF5b3V0T2JqZWN0LT5CbG9jaygKICAgICAgICAgICAgICAgICAgICBOYW1lID0+ICdEeW5hbWljRmllbGQnLAogICAgICAgICAgICAgICAgICAgIERhdGEgPT4gewogICAgICAgICAgICAgICAgICAgICAgICBOYW1lICA9PiAkRHluYW1pY0ZpZWxkQ29uZmlnLT57TmFtZX0sCiAgICAgICAgICAgICAgICAgICAgICAgIExhYmVsID0+ICREeW5hbWljRmllbGRIVE1MLT57TGFiZWx9LAogICAgICAgICAgICAgICAgICAgICAgICBGaWVsZCA9PiAkRHluYW1pY0ZpZWxkSFRNTC0+e0ZpZWxkfSwKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgKTsKCiAgICAgICAgICAgICAgICBuZXh0IEVOVFJZOwogICAgICAgICAgICB9CgogICAgICAgICAgICBteSAkQmxvY2sgPSAnSW5wdXQnOwoKICAgICAgICAgICAgIyBidWlsZCBzZWxlY3Rpb25zIG9yIGlucHV0IGZpZWxkcwogICAgICAgICAgICBpZiAoICRDb25maWdPYmplY3QtPkdldCggJFBhcmFte1NvdXJjZX0gKS0+e1NlbGVjdGlvbnN9LT57ICRFbnRyeS0+WzBdIH0gKSB7CiAgICAgICAgICAgICAgICBteSAkT3B0aW9uUmVxdWlyZWQgPSAnJzsKICAgICAgICAgICAgICAgIGlmICggJEVudHJ5LT5bNF0gKSB7CiAgICAgICAgICAgICAgICAgICAgJE9wdGlvblJlcXVpcmVkID0gJ1ZhbGlkYXRlX1JlcXVpcmVkJzsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAjIGJ1aWxkIFZhbGlkSUQgc3RyaW5nCiAgICAgICAgICAgICAgICAkQmxvY2sgPSAnT3B0aW9uJzsKICAgICAgICAgICAgICAgICRQYXJhbXtPcHRpb259ID0gJExheW91dE9iamVjdC0+QnVpbGRTZWxlY3Rpb24oCiAgICAgICAgICAgICAgICAgICAgRGF0YSA9PgogICAgICAgICAgICAgICAgICAgICAgICAkQ29uZmlnT2JqZWN0LT5HZXQoICRQYXJhbXtTb3VyY2V9ICktPntTZWxlY3Rpb25zfQogICAgICAgICAgICAgICAgICAgICAgICAtPnsgJEVudHJ5LT5bMF0gfSwKICAgICAgICAgICAgICAgICAgICBOYW1lICA9PiAkRW50cnktPlswXSwKICAgICAgICAgICAgICAgICAgICBDbGFzcyA9PiAiJE9wdGlvblJlcXVpcmVkIE1vZGVybml6ZSAiIC4KICAgICAgICAgICAgICAgICAgICAgICAgKCAkUGFyYW17RXJyb3JzfS0+eyAkRW50cnktPlswXSAuICdJbnZhbGlkJyB9IHx8ICcnICksCiAgICAgICAgICAgICAgICAgICAgVHJhbnNsYXRpb24gPT4gMCwKICAgICAgICAgICAgICAgICAgICBTZWxlY3RlZElEICA9PiAkUGFyYW17ICRFbnRyeS0+WzBdIH0sCiAgICAgICAgICAgICAgICAgICAgTWF4ICAgICAgICAgPT4gMzUsCiAgICAgICAgICAgICAgICApOwoKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNpZiAoICRFbnRyeS0+WzBdID1+IC9eQ3VzdG9tZXJDb21wYW55Q291bnRyeS9pICkgewogICAgICAgICAgICAgICAgbXkgJE9wdGlvblJlcXVpcmVkID0gJyc7CiAgICAgICAgICAgICAgICBpZiAoICRFbnRyeS0+WzRdICkgewogICAgICAgICAgICAgICAgICAgICRPcHRpb25SZXF1aXJlZCA9ICdWYWxpZGF0ZV9SZXF1aXJlZCc7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgIyBidWlsZCBDb3VudHJ5IHN0cmluZwogICAgICAgICAgICAgICAgbXkgJENvdW50cnlMaXN0ID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OlJlZmVyZW5jZURhdGEnKS0+Q291bnRyeUxpc3QoKTsKCiAgICAgICAgICAgICAgICAkQmxvY2sgPSAnT3B0aW9uJzsKICAgICAgICAgICAgICAgICRQYXJhbXtPcHRpb259ID0gJExheW91dE9iamVjdC0+QnVpbGRTZWxlY3Rpb24oCiAgICAgICAgICAgICAgICAgICAgRGF0YSAgICAgICAgID0+ICRDb3VudHJ5TGlzdCwKICAgICAgICAgICAgICAgICAgICBQb3NzaWJsZU5vbmUgPT4gMSwKICAgICAgICAgICAgICAgICAgICBTb3J0ICAgICAgICAgPT4gJ0FscGhhbnVtZXJpY1ZhbHVlJywKICAgICAgICAgICAgICAgICAgICBOYW1lICAgICAgICAgPT4gJEVudHJ5LT5bMF0sCiAgICAgICAgICAgICAgICAgICAgQ2xhc3MgICAgICAgID0+ICIkT3B0aW9uUmVxdWlyZWQgTW9kZXJuaXplICIgLgogICAgICAgICAgICAgICAgICAgICAgICAoICRQYXJhbXtFcnJvcnN9LT57ICRFbnRyeS0+WzBdIC4gJ0ludmFsaWQnIH0gfHwgJycgKSwKICAgICAgICAgICAgICAgICAgICBTZWxlY3RlZElEID0+IGRlZmluZWQoICRQYXJhbXsgJEVudHJ5LT5bMF0gfSApID8gJFBhcmFteyAkRW50cnktPlswXSB9IDogMSwKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzaWYgKCAkRW50cnktPlswXSA9fiAvXlZhbGlkSUQvaSApIHsKICAgICAgICAgICAgICAgIG15ICRPcHRpb25SZXF1aXJlZCA9ICcnOwogICAgICAgICAgICAgICAgaWYgKCAkRW50cnktPls0XSApIHsKICAgICAgICAgICAgICAgICAgICAkT3B0aW9uUmVxdWlyZWQgPSAnVmFsaWRhdGVfUmVxdWlyZWQnOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICMgYnVpbGQgVmFsaWRJRCBzdHJpbmcKICAgICAgICAgICAgICAgICRCbG9jayA9ICdPcHRpb24nOwogICAgICAgICAgICAgICAgJFBhcmFte09wdGlvbn0gPSAkTGF5b3V0T2JqZWN0LT5CdWlsZFNlbGVjdGlvbigKICAgICAgICAgICAgICAgICAgICBEYXRhICA9PiB7ICRWYWxpZE9iamVjdC0+VmFsaWRMaXN0KCksIH0sCiAgICAgICAgICAgICAgICAgICAgTmFtZSAgPT4gJEVudHJ5LT5bMF0sCiAgICAgICAgICAgICAgICAgICAgQ2xhc3MgPT4gIiRPcHRpb25SZXF1aXJlZCBNb2Rlcm5pemUgIiAuCiAgICAgICAgICAgICAgICAgICAgICAgICggJFBhcmFte0Vycm9yc30tPnsgJEVudHJ5LT5bMF0gLiAnSW52YWxpZCcgfSB8fCAnJyApLAogICAgICAgICAgICAgICAgICAgIFNlbGVjdGVkSUQgPT4gZGVmaW5lZCggJFBhcmFteyAkRW50cnktPlswXSB9ICkgPyAkUGFyYW17ICRFbnRyeS0+WzBdIH0gOiAxLAogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICRQYXJhbXtWYWx1ZX0gPSAkUGFyYW17ICRFbnRyeS0+WzBdIH0gfHwgJyc7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICMgc2hvdyByZXF1aXJlZCBmbGFnCiAgICAgICAgICAgIGlmICggJEVudHJ5LT5bNF0gKSB7CiAgICAgICAgICAgICAgICAkUGFyYW17TWFuZGF0b3J5Q2xhc3N9ID0gJ2NsYXNzPSJNYW5kYXRvcnkiJzsKICAgICAgICAgICAgICAgICRQYXJhbXtTdGFyTGFiZWx9ICAgICAgPSAnPHNwYW4gY2xhc3M9Ik1hcmtlciI+Kjwvc3Bhbj4nOwogICAgICAgICAgICAgICAgJFBhcmFte1JlcXVpcmVkQ2xhc3N9ICA9ICdWYWxpZGF0ZV9SZXF1aXJlZCc7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAkUGFyYW17TWFuZGF0b3J5Q2xhc3N9ID0gJyc7CiAgICAgICAgICAgICAgICAkUGFyYW17U3RhckxhYmVsfSAgICAgID0gJyc7CiAgICAgICAgICAgICAgICAkUGFyYW17UmVxdWlyZWRDbGFzc30gID0gJyc7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICMgc2hvdyByZXF1aXJlZCBmbGFnCiAgICAgICAgICAgIGlmICggJEVudHJ5LT5bN10gKSB7CiAgICAgICAgICAgICAgICAkUGFyYW17UmVhZE9ubHlUeXBlfSA9ICdyZWFkb25seT0icmVhZG9ubHkiJzsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICRQYXJhbXtSZWFkT25seVR5cGV9ID0gJyc7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICMgYWRkIGZvcm0gb3B0aW9uCiAgICAgICAgICAgIGlmICggJFBhcmFte1R5cGV9ICYmICRQYXJhbXtUeXBlfSBlcSAnaGlkZGVuJyApIHsKICAgICAgICAgICAgICAgICRQYXJhbXtQcmVmZXJlbmNlc30gLj0gJFBhcmFte1ZhbHVlfTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICRMYXlvdXRPYmplY3QtPkJsb2NrKAogICAgICAgICAgICAgICAgICAgIE5hbWUgPT4gJ1ByZWZlcmVuY2VzR2VuZXJpYycsCiAgICAgICAgICAgICAgICAgICAgRGF0YSA9PiB7CiAgICAgICAgICAgICAgICAgICAgICAgIEl0ZW0gPT4gJEVudHJ5LT5bMV0sCiAgICAgICAgICAgICAgICAgICAgICAgICVQYXJhbQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgJExheW91dE9iamVjdC0+QmxvY2soCiAgICAgICAgICAgICAgICAgICAgTmFtZSA9PiAiUHJlZmVyZW5jZXNHZW5lcmljJEJsb2NrIiwKICAgICAgICAgICAgICAgICAgICBEYXRhID0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgJVBhcmFtLAogICAgICAgICAgICAgICAgICAgICAgICBJdGVtICAgICAgICAgPT4gJEVudHJ5LT5bMV0sCiAgICAgICAgICAgICAgICAgICAgICAgIE5hbWUgICAgICAgICA9PiAkRW50cnktPlswXSwKICAgICAgICAgICAgICAgICAgICAgICAgVmFsdWUgICAgICAgID0+ICRQYXJhbXsgJEVudHJ5LT5bMF0gfSwKICAgICAgICAgICAgICAgICAgICAgICAgSW52YWxpZEZpZWxkID0+ICRQYXJhbXtFcnJvcnN9LT57ICRFbnRyeS0+WzBdIC4gJ0ludmFsaWQnIH0gfHwgJycsCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICBpZiAoICRFbnRyeS0+WzRdICkgewogICAgICAgICAgICAgICAgICAgICRMYXlvdXRPYmplY3QtPkJsb2NrKAogICAgICAgICAgICAgICAgICAgICAgICBOYW1lID0+ICJQcmVmZXJlbmNlc0dlbmVyaWMke0Jsb2NrfVJlcXVpcmVkIiwKICAgICAgICAgICAgICAgICAgICAgICAgRGF0YSA9PiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBOYW1lID0+ICRFbnRyeS0+WzBdLAogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gMTsKfQoKc3ViIF9PdmVydmlldyB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICRMYXlvdXRPYmplY3QgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6Ok91dHB1dDo6SFRNTDo6TGF5b3V0Jyk7CgogICAgJExheW91dE9iamVjdC0+QmxvY2soCiAgICAgICAgTmFtZSA9PiAnT3ZlcnZpZXcnLAogICAgICAgIERhdGEgPT4gXCVQYXJhbSwKICAgICk7CgogICAgJExheW91dE9iamVjdC0+QmxvY2soIE5hbWUgPT4gJ0FjdGlvbkxpc3QnICk7CiAgICAkTGF5b3V0T2JqZWN0LT5CbG9jaygKICAgICAgICBOYW1lID0+ICdBY3Rpb25TZWFyY2gnLAogICAgICAgIERhdGEgPT4gXCVQYXJhbSwKICAgICk7CgogICAgbXkgJEN1c3RvbWVyQ29tcGFueU9iamVjdCA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpDdXN0b21lckNvbXBhbnknKTsKCiAgICAjIGdldCB3cml0YWJsZSBkYXRhIHNvdXJjZXMKICAgIG15ICVDdXN0b21lckNvbXBhbnlTb3VyY2UgPSAkQ3VzdG9tZXJDb21wYW55T2JqZWN0LT5DdXN0b21lckNvbXBhbnlTb3VyY2VMaXN0KAogICAgICAgIFJlYWRPbmx5ID0+IDAsCiAgICApOwoKICAgICMgb25seSBzaG93IEFkZCBvcHRpb24gaWYgd2UgaGF2ZSBhdCBsZWFzdCBvbmUgd3JpdGFibGUgYmFja2VuZAogICAgaWYgKCBzY2FsYXIga2V5cyAlQ3VzdG9tZXJDb21wYW55U291cmNlICkgewogICAgICAgICRQYXJhbXtTb3VyY2VPcHRpb259ID0gJExheW91dE9iamVjdC0+QnVpbGRTZWxlY3Rpb24oCiAgICAgICAgICAgIERhdGEgICAgICAgPT4geyAlQ3VzdG9tZXJDb21wYW55U291cmNlLCB9LAogICAgICAgICAgICBOYW1lICAgICAgID0+ICdTb3VyY2UnLAogICAgICAgICAgICBTZWxlY3RlZElEID0+ICRQYXJhbXtTb3VyY2V9IHx8ICcnLAogICAgICAgICAgICBDbGFzcyAgICAgID0+ICdNb2Rlcm5pemUnLAogICAgICAgICk7CgogICAgICAgICRMYXlvdXRPYmplY3QtPkJsb2NrKAogICAgICAgICAgICBOYW1lID0+ICdBY3Rpb25BZGQnLAogICAgICAgICAgICBEYXRhID0+IFwlUGFyYW0sCiAgICAgICAgKTsKICAgIH0KCiAgICAjIGlmIHRoZXJlIGFyZSBhbnkgcmVnaXN0cmllcyB0byBzZWFyY2gsIHRoZSB0YWJsZSBpcyBmaWxsZWQgYW5kIHNob3duCiAgICBpZiAoICRQYXJhbXtTZWFyY2h9ICkgewoKICAgICAgICAjIGdldCBjb25maWcgb2JqZWN0CiAgICAgICAgbXkgJENvbmZpZ09iamVjdCA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6Q29uZmlnJyk7CgogICAgICAgICMgc2FtZSBMaW1pdCBhcyAkU2VsZi0+e0N1c3RvbWVyQ29tcGFueU1hcH0tPnsnQ3VzdG9tZXJDb21wYW55U2VhcmNoTGlzdExpbWl0J30KICAgICAgICAjIHNtYWxsZXN0IExpbWl0IGZyb20gYWxsIHNvdXJjZXMKICAgICAgICBteSAkTGltaXQgPSA0MDA7CiAgICAgICAgU09VUkNFOgogICAgICAgIGZvciBteSAkQ291bnQgKCAnJywgMSAuLiAxMCApIHsKICAgICAgICAgICAgbmV4dCBTT1VSQ0UgaWYgISRDb25maWdPYmplY3QtPkdldCgiQ3VzdG9tZXJDb21wYW55JENvdW50Iik7CiAgICAgICAgICAgIG15ICRDdXN0b21lclVzZXJNYXAgPSAkQ29uZmlnT2JqZWN0LT5HZXQoIkN1c3RvbWVyQ29tcGFueSRDb3VudCIpOwogICAgICAgICAgICBuZXh0IFNPVVJDRSBpZiAhJEN1c3RvbWVyVXNlck1hcC0+e0N1c3RvbWVyQ29tcGFueVNlYXJjaExpc3RMaW1pdH07CiAgICAgICAgICAgIGlmICggJEN1c3RvbWVyVXNlck1hcC0+e0N1c3RvbWVyQ29tcGFueVNlYXJjaExpc3RMaW1pdH0gPCAkTGltaXQgKSB7CiAgICAgICAgICAgICAgICAkTGltaXQgPSAkQ3VzdG9tZXJVc2VyTWFwLT57Q3VzdG9tZXJDb21wYW55U2VhcmNoTGlzdExpbWl0fTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgbXkgJUxpc3RBbGxJdGVtcyA9ICRDdXN0b21lckNvbXBhbnlPYmplY3QtPkN1c3RvbWVyQ29tcGFueUxpc3QoCiAgICAgICAgICAgIFNlYXJjaCA9PiAkUGFyYW17U2VhcmNofSwKICAgICAgICAgICAgTGltaXQgID0+ICRMaW1pdCArIDEsCiAgICAgICAgICAgIFZhbGlkICA9PiAwLAogICAgICAgICAgICBVc2VySUQgPT4gJFNlbGYtPntVc2VySUR9LAogICAgICAgICk7CgogICAgICAgIGlmICgga2V5cyAlTGlzdEFsbEl0ZW1zIDw9ICRMaW1pdCApIHsKICAgICAgICAgICAgbXkgJExpc3RBbGxJdGVtcyA9IGtleXMgJUxpc3RBbGxJdGVtczsKICAgICAgICAgICAgJExheW91dE9iamVjdC0+QmxvY2soCiAgICAgICAgICAgICAgICBOYW1lID0+ICdPdmVydmlld0hlYWRlcicsCiAgICAgICAgICAgICAgICBEYXRhID0+IHsKICAgICAgICAgICAgICAgICAgICBMaXN0QWxsID0+ICRMaXN0QWxsSXRlbXMsCiAgICAgICAgICAgICAgICAgICAgTGltaXQgICA9PiAkTGltaXQsCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICApOwogICAgICAgIH0KCiAgICAgICAgbXkgJUxpc3QgPSAkQ3VzdG9tZXJDb21wYW55T2JqZWN0LT5DdXN0b21lckNvbXBhbnlMaXN0KAogICAgICAgICAgICBTZWFyY2ggPT4gJFBhcmFte1NlYXJjaH0sCiAgICAgICAgICAgIFZhbGlkICA9PiAwLAogICAgICAgICAgICBVc2VySUQgPT4gJFNlbGYtPntVc2VySUR9LAogICAgICAgICk7CgogICAgICAgIGlmICgga2V5cyAlTGlzdEFsbEl0ZW1zID4gJExpbWl0ICkgewogICAgICAgICAgICBteSAkTGlzdEFsbEl0ZW1zICAgPSBrZXlzICVMaXN0QWxsSXRlbXM7CiAgICAgICAgICAgIG15ICRTZWFyY2hMaXN0U2l6ZSA9IGtleXMgJUxpc3Q7CgogICAgICAgICAgICAkTGF5b3V0T2JqZWN0LT5CbG9jaygKICAgICAgICAgICAgICAgIE5hbWUgPT4gJ092ZXJ2aWV3SGVhZGVyJywKICAgICAgICAgICAgICAgIERhdGEgPT4gewogICAgICAgICAgICAgICAgICAgIFNlYXJjaExpc3RTaXplID0+ICRTZWFyY2hMaXN0U2l6ZSwKICAgICAgICAgICAgICAgICAgICBMaXN0QWxsICAgICAgICA9PiAkTGlzdEFsbEl0ZW1zLAogICAgICAgICAgICAgICAgICAgIExpbWl0ICAgICAgICAgID0+ICRMaW1pdCwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICk7CiAgICAgICAgfQoKICAgICAgICAkTGF5b3V0T2JqZWN0LT5CbG9jaygKICAgICAgICAgICAgTmFtZSA9PiAnT3ZlcnZpZXdSZXN1bHQnLAogICAgICAgICAgICBEYXRhID0+IFwlUGFyYW0sCiAgICAgICAgKTsKCiAgICAgICAgIyBnZXQgdmFsaWQgbGlzdAogICAgICAgIG15ICVWYWxpZExpc3QgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6VmFsaWQnKS0+VmFsaWRMaXN0KCk7CgogICAgICAgIGlmICggISRDb25maWdPYmplY3QtPkdldCggJFBhcmFte1NvdXJjZX0gKS0+e1BhcmFtc30tPntGb3JlaWduREJ9ICkgewogICAgICAgICAgICAkTGF5b3V0T2JqZWN0LT5CbG9jayggTmFtZSA9PiAnTG9jYWxEQicgKTsKICAgICAgICB9CgogICAgICAgICMgaWYgdGhlcmUgYXJlIHJlc3VsdHMgdG8gc2hvdwogICAgICAgIGlmICglTGlzdCkgewogICAgICAgICAgICBmb3IgbXkgJExpc3RLZXkgKCBzb3J0IHsgJExpc3R7JGF9IGNtcCAkTGlzdHskYn0gfSBrZXlzICVMaXN0ICkgewoKICAgICAgICAgICAgICAgIG15ICVEYXRhID0gJEN1c3RvbWVyQ29tcGFueU9iamVjdC0+Q3VzdG9tZXJDb21wYW55R2V0KCBDdXN0b21lcklEID0+ICRMaXN0S2V5ICk7CiAgICAgICAgICAgICAgICAkTGF5b3V0T2JqZWN0LT5CbG9jaygKICAgICAgICAgICAgICAgICAgICBOYW1lID0+ICdPdmVydmlld1Jlc3VsdFJvdycsCiAgICAgICAgICAgICAgICAgICAgRGF0YSA9PiB7CiAgICAgICAgICAgICAgICAgICAgICAgICVEYXRhLAogICAgICAgICAgICAgICAgICAgICAgICBTZWFyY2ggPT4gJFBhcmFte1NlYXJjaH0sCiAgICAgICAgICAgICAgICAgICAgICAgIE5hdiAgICA9PiAkUGFyYW17TmF2fSwKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgKTsKCiAgICAgICAgICAgICAgICBpZiAoICEkQ29uZmlnT2JqZWN0LT5HZXQoICRQYXJhbXtTb3VyY2V9ICktPntQYXJhbXN9LT57Rm9yZWlnbkRCfSApIHsKICAgICAgICAgICAgICAgICAgICAkTGF5b3V0T2JqZWN0LT5CbG9jaygKICAgICAgICAgICAgICAgICAgICAgICAgTmFtZSA9PiAnTG9jYWxEQlJvdycsCiAgICAgICAgICAgICAgICAgICAgICAgIERhdGEgPT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgVmFsaWQgPT4gJFZhbGlkTGlzdHsgJERhdGF7VmFsaWRJRH0gfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICVEYXRhLAogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAjIG90aGVyd2lzZSBpdCBkaXNwbGF5cyBhIG5vIGRhdGEgZm91bmQgbWVzc2FnZQogICAgICAgIGVsc2UgewogICAgICAgICAgICAkTGF5b3V0T2JqZWN0LT5CbG9jaygKICAgICAgICAgICAgICAgIE5hbWUgPT4gJ05vRGF0YUZvdW5kTXNnJywKICAgICAgICAgICAgICAgIERhdGEgPT4ge30sCiAgICAgICAgICAgICk7CiAgICAgICAgfQogICAgfQoKICAgICMgaWYgdGhlcmUgaXMgbm90aGluZyB0byBzZWFyY2ggaXQgc2hvd3MgYSBtZXNzYWdlCiAgICBlbHNlCiAgICB7CiAgICAgICAgJExheW91dE9iamVjdC0+QmxvY2soCiAgICAgICAgICAgIE5hbWUgPT4gJ05vU2VhcmNoVGVybXMnLAogICAgICAgICAgICBEYXRhID0+IHt9LAogICAgICAgICk7CiAgICB9CiAgICByZXR1cm4gMTsKfQoKMTsK</File>
        <File Location="Custom/Kernel/Modules/AdminCustomerGroup.pm" Permission="660" Encode="Base64"></File>
        <File Location="Custom/Kernel/Modules/AdminCustomerUserCustomer.pm" Permission="660" Encode="Base64"></File>
        <File Location="Custom/Kernel/Modules/AdminCustomerUserGroup.pm" Permission="660" Encode="Base64"></File>
        <File Location="Custom/Kernel/Modules/AdminCustomerUser.pm" Permission="660" Encode="Base64"></File>
        <File Location="Custom/Kernel/Modules/AdminCustomerUserService.pm" Permission="660" Encode="Base64"></File>
        <File Location="Custom/Kernel/Modules/AgentCustomerInformationCenterSearch.pm" Permission="660" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDIxIE9UUlMgQUcsIGh0dHBzOi8vb3Rycy5jb20vCiMgQ29weXJpZ2h0IChDKSAyMDIxLTIwMjIgWm51bnkgR21iSCwgaHR0cHM6Ly96bnVueS5vcmcvCiMgLS0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQojIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwczovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2dwbC0zLjAudHh0LgojIC0tCgpwYWNrYWdlIEtlcm5lbDo6TW9kdWxlczo6QWdlbnRDdXN0b21lckluZm9ybWF0aW9uQ2VudGVyU2VhcmNoOwojIyBub2ZpbHRlcihUaWR5QWxsOjpQbHVnaW46Ok9UUlM6OlBlcmw6OkRCT2JqZWN0KQoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwoKdXNlIEtlcm5lbDo6U3lzdGVtOjpWYXJpYWJsZUNoZWNrIHF3KDphbGwpOwoKb3VyICRPYmplY3RNYW5hZ2VyRGlzYWJsZWQgPSAxOwoKc3ViIG5ldyB7CiAgICBteSAoICRUeXBlLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgYWxsb2NhdGUgbmV3IGhhc2ggZm9yIG9iamVjdAogICAgbXkgJFNlbGYgPSB7JVBhcmFtfTsKICAgIGJsZXNzKCAkU2VsZiwgJFR5cGUgKTsKCiAgICByZXR1cm4gJFNlbGY7Cn0KCnN1YiBSdW4gewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGdldCBuZWVkZWQgb2JqZWN0cwogICAgbXkgJFBhcmFtT2JqZWN0ICAgICAgICAgICA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpXZWI6OlJlcXVlc3QnKTsKICAgIG15ICRMYXlvdXRPYmplY3QgICAgICAgICAgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6Ok91dHB1dDo6SFRNTDo6TGF5b3V0Jyk7CiAgICBteSAkQ3VzdG9tZXJVc2VyT2JqZWN0ICAgID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkN1c3RvbWVyVXNlcicpOwogICAgbXkgJENvbmZpZ09iamVjdCAgICAgICAgICA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6Q29uZmlnJyk7CiAgICBteSAkVGlja2V0T2JqZWN0ICAgICAgICAgID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OlRpY2tldCcpOwogICAgbXkgJEN1c3RvbWVyQ29tcGFueU9iamVjdCA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpDdXN0b21lckNvbXBhbnknKTsKCiAgICBteSAkQXV0b0NvbXBsZXRlQ29uZmlnICAgICAgICAgICAgPSAkQ29uZmlnT2JqZWN0LT5HZXQoJ0F1dG9Db21wbGV0ZTo6QWdlbnQnKS0+e0N1c3RvbWVyU2VhcmNofTsKICAgIG15ICRNYXhSZXN1bHRzICAgICAgICAgICAgICAgICAgICA9ICRBdXRvQ29tcGxldGVDb25maWctPntNYXhSZXN1bHRzRGlzcGxheWVkfSB8fCAyMDsKICAgIG15ICRJbmNsdWRlVW5rbm93blRpY2tldEN1c3RvbWVycyA9IGludCggJFBhcmFtT2JqZWN0LT5HZXRQYXJhbSggUGFyYW0gPT4gJ0luY2x1ZGVVbmtub3duVGlja2V0Q3VzdG9tZXJzJyApIHx8IDAgKTsKICAgIG15ICRTZWFyY2hUZXJtICAgICAgICAgICAgICAgICAgICA9ICRQYXJhbU9iamVjdC0+R2V0UGFyYW0oIFBhcmFtID0+ICdUZXJtJyApIHx8ICcnOwoKICAgIGlmICggJFNlbGYtPntTdWJhY3Rpb259IGVxICdTZWFyY2hDdXN0b21lcklEJyApIHsKCiAgICAgICAgIyBidWlsZCByZXN1bHQgbGlzdAogICAgICAgIG15ICRVbmtub3duVGlja2V0Q3VzdG9tZXJMaXN0OwoKICAgICAgICBpZiAoJEluY2x1ZGVVbmtub3duVGlja2V0Q3VzdG9tZXJzKSB7CgogICAgICAgICAgICAjIGFkZCBjdXN0b21lcnMgdGhhdCBhcmUgbm90IHNhdmVkIGluIGFueSBiYWNrZW5kCiAgICAgICAgICAgICRVbmtub3duVGlja2V0Q3VzdG9tZXJMaXN0ID0gJFRpY2tldE9iamVjdC0+U2VhcmNoVW5rbm93blRpY2tldEN1c3RvbWVycygKICAgICAgICAgICAgICAgIFNlYXJjaFRlcm0gPT4gJFNlYXJjaFRlcm0sCiAgICAgICAgICAgICAgICBVc2VySUQgPT4gJFNlbGYtPntVc2VySUR9LAogICAgICAgICAgICApOwogICAgICAgIH0KCiAgICAgICAgIyBTZWFyY2ggZm9yIFZhbGlkIGN1c3RvbWVyIGNvbXBhbmllcy4KICAgICAgICBteSAlQ3VzdG9tZXJDb21wYW55TGlzdCA9ICRDdXN0b21lckNvbXBhbnlPYmplY3QtPkN1c3RvbWVyQ29tcGFueUxpc3QoCiAgICAgICAgICAgIFNlYXJjaCA9PiAkU2VhcmNoVGVybSwKICAgICAgICAgICAgVXNlcklEID0+ICRTZWxmLT57VXNlcklEfSwKICAgICAgICApOwogICAgICAgIG1hcCB7ICRDdXN0b21lckNvbXBhbnlMaXN0eyRffSA9ICRVbmtub3duVGlja2V0Q3VzdG9tZXJMaXN0LT57JF99IH0ga2V5cyAleyRVbmtub3duVGlja2V0Q3VzdG9tZXJMaXN0fTsKCiAgICAgICAgIyBTZWFyY2ggZm9yIGFsbCBjdXN0b21lciBjb21wYW5pZXMsIHZhbGlkIGFuZCBpbnZhbGlkLgogICAgICAgIG15ICVDdXN0b21lckNvbXBhbnlMaXN0QWxsID0gJEN1c3RvbWVyQ29tcGFueU9iamVjdC0+Q3VzdG9tZXJDb21wYW55TGlzdCgKICAgICAgICAgICAgU2VhcmNoID0+ICRTZWFyY2hUZXJtLAogICAgICAgICAgICBWYWxpZCAgPT4gMCwKICAgICAgICAgICAgVXNlcklEID0+ICRTZWxmLT57VXNlcklEfSwKICAgICAgICApOwoKICAgICAgICBteSBAQ3VzdG9tZXJJRHMgPSAkQ3VzdG9tZXJVc2VyT2JqZWN0LT5DdXN0b21lcklETGlzdCgKICAgICAgICAgICAgU2VhcmNoVGVybSA9PiAkU2VhcmNoVGVybSwKICAgICAgICAgICAgVXNlcklEID0+ICRTZWxmLT57VXNlcklEfSwKICAgICAgICApOwoKICAgICAgICAjIGFkZCBDdXN0b21lcklEcyBmb3Igd2hpY2ggbm8gQ3VzdG9tZXJDb21wYW55IGFyZSByZWdpc3RlcmVkCiAgICAgICAgbXkgJVNlZW47CiAgICAgICAgQ1VTVE9NRVJJRDoKICAgICAgICBmb3IgbXkgJEN1c3RvbWVySUQgKEBDdXN0b21lcklEcykgewoKICAgICAgICAgICAgIyBza2lwIGR1cGxpY2F0ZXMKICAgICAgICAgICAgbmV4dCBDVVNUT01FUklEIGlmICRTZWVueyRDdXN0b21lcklEfTsKICAgICAgICAgICAgJFNlZW57JEN1c3RvbWVySUR9ID0gMTsKCiAgICAgICAgICAgICMgaWRlbnRpZmllcyB1bmtub3duIGNvbXBhbmllcwogICAgICAgICAgICBpZiAoICFleGlzdHMgJEN1c3RvbWVyQ29tcGFueUxpc3RBbGx7JEN1c3RvbWVySUR9ICkgewogICAgICAgICAgICAgICAgJEN1c3RvbWVyQ29tcGFueUxpc3R7JEN1c3RvbWVySUR9ID0gJEN1c3RvbWVySUQ7CiAgICAgICAgICAgIH0KCiAgICAgICAgfQoKICAgICAgICBteSBAUmVzdWx0OwoKICAgICAgICBDVVNUT01FUklEOgogICAgICAgIGZvciBteSAkQ3VzdG9tZXJJRCAoIHNvcnQga2V5cyAlQ3VzdG9tZXJDb21wYW55TGlzdCApIHsKICAgICAgICAgICAgaWYgKCAhKCBncmVwIHsgJF8tPntWYWx1ZX0gZXEgJEN1c3RvbWVySUQgfSBAUmVzdWx0ICkgKSB7CiAgICAgICAgICAgICAgICBwdXNoIEBSZXN1bHQsCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIExhYmVsID0+ICRDdXN0b21lckNvbXBhbnlMaXN0eyRDdXN0b21lcklEfSwKICAgICAgICAgICAgICAgICAgICBWYWx1ZSA9PiAkQ3VzdG9tZXJJRAogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgbGFzdCBDVVNUT01FUklEIGlmIHNjYWxhciBAUmVzdWx0ID49ICRNYXhSZXN1bHRzOwoKICAgICAgICB9CgogICAgICAgIG15ICRKU09OID0gJExheW91dE9iamVjdC0+SlNPTkVuY29kZSgKICAgICAgICAgICAgRGF0YSA9PiBcQFJlc3VsdCwKICAgICAgICApOwoKICAgICAgICByZXR1cm4gJExheW91dE9iamVjdC0+QXR0YWNobWVudCgKICAgICAgICAgICAgQ29udGVudFR5cGUgPT4gJ2FwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9JyAuICRMYXlvdXRPYmplY3QtPntDaGFyc2V0fSwKICAgICAgICAgICAgQ29udGVudCAgICAgPT4gJEpTT04gfHwgJycsCiAgICAgICAgICAgIFR5cGUgICAgICAgID0+ICdpbmxpbmUnLAogICAgICAgICAgICBOb0NhY2hlICAgICA9PiAxLAogICAgICAgICk7CiAgICB9CiAgICBlbHNpZiAoICRTZWxmLT57U3ViYWN0aW9ufSBlcSAnU2VhcmNoQ3VzdG9tZXJVc2VyJyApIHsKCiAgICAgICAgbXkgJFVua25vd25UaWNrZXRDdXN0b21lckxpc3Q7CgogICAgICAgIGlmICgkSW5jbHVkZVVua25vd25UaWNrZXRDdXN0b21lcnMpIHsKCiAgICAgICAgICAgICMgYWRkIGN1c3RvbWVycyB0aGF0IGFyZSBub3Qgc2F2ZWQgaW4gYW55IGJhY2tlbmQKICAgICAgICAgICAgJFVua25vd25UaWNrZXRDdXN0b21lckxpc3QgPSAkVGlja2V0T2JqZWN0LT5TZWFyY2hVbmtub3duVGlja2V0Q3VzdG9tZXJzKAogICAgICAgICAgICAgICAgU2VhcmNoVGVybSA9PiAkU2VhcmNoVGVybSwKICAgICAgICAgICAgICAgIFVzZXJJRCA9PiAkU2VsZi0+e1VzZXJJRH0sCiAgICAgICAgICAgICk7CiAgICAgICAgfQoKICAgICAgICBteSAlQ3VzdG9tZXJMaXN0ID0gJEN1c3RvbWVyVXNlck9iamVjdC0+Q3VzdG9tZXJTZWFyY2goCiAgICAgICAgICAgIFNlYXJjaCA9PiAkU2VhcmNoVGVybSwKICAgICAgICAgICAgVXNlcklEID0+ICRTZWxmLT57VXNlcklEfSwKICAgICAgICApOwogICAgICAgIG1hcCB7ICRDdXN0b21lckxpc3R7JF99ID0gJFVua25vd25UaWNrZXRDdXN0b21lckxpc3QtPnskX30gfSBrZXlzICV7JFVua25vd25UaWNrZXRDdXN0b21lckxpc3R9OwoKICAgICAgICBteSBAUmVzdWx0OwoKICAgICAgICBDVVNUT01FUkxPR0lOOgogICAgICAgIGZvciBteSAkQ3VzdG9tZXJMb2dpbiAoIHNvcnQga2V5cyAlQ3VzdG9tZXJMaXN0ICkgewogICAgICAgICAgICBteSAlQ3VzdG9tZXJEYXRhID0gJEN1c3RvbWVyVXNlck9iamVjdC0+Q3VzdG9tZXJVc2VyRGF0YUdldCgKICAgICAgICAgICAgICAgIFVzZXIgPT4gJEN1c3RvbWVyTG9naW4sCiAgICAgICAgICAgICk7CgogICAgICAgICAgICBwdXNoIEBSZXN1bHQsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBMYWJlbCA9PiAkQ3VzdG9tZXJMaXN0eyRDdXN0b21lckxvZ2lufSwKICAgICAgICAgICAgICAgIFZhbHVlID0+ICRDdXN0b21lckRhdGF7VXNlckN1c3RvbWVySUR9CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICBsYXN0IENVU1RPTUVSTE9HSU4gaWYgc2NhbGFyIEBSZXN1bHQgPj0gJE1heFJlc3VsdHM7CgogICAgICAgIH0KCiAgICAgICAgbXkgJEpTT04gPSAkTGF5b3V0T2JqZWN0LT5KU09ORW5jb2RlKAogICAgICAgICAgICBEYXRhID0+IFxAUmVzdWx0LAogICAgICAgICk7CgogICAgICAgIHJldHVybiAkTGF5b3V0T2JqZWN0LT5BdHRhY2htZW50KAogICAgICAgICAgICBDb250ZW50VHlwZSA9PiAnYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD0nIC4gJExheW91dE9iamVjdC0+e0NoYXJzZXR9LAogICAgICAgICAgICBDb250ZW50ICAgICA9PiAkSlNPTiB8fCAnJywKICAgICAgICAgICAgVHlwZSAgICAgICAgPT4gJ2lubGluZScsCiAgICAgICAgICAgIE5vQ2FjaGUgICAgID0+IDEsCiAgICAgICAgKTsKICAgIH0KCiAgICBteSAkT3V0cHV0ID0gJExheW91dE9iamVjdC0+T3V0cHV0KAogICAgICAgIFRlbXBsYXRlRmlsZSA9PiAnQWdlbnRDdXN0b21lckluZm9ybWF0aW9uQ2VudGVyU2VhcmNoJywKICAgICAgICBEYXRhICAgICAgICAgPT4gXCVQYXJhbSwKICAgICk7CiAgICByZXR1cm4gJExheW91dE9iamVjdC0+QXR0YWNobWVudCgKICAgICAgICBOb0NhY2hlICAgICA9PiAxLAogICAgICAgIENvbnRlbnRUeXBlID0+ICd0ZXh0L2h0bWwnLAogICAgICAgIENoYXJzZXQgICAgID0+ICRMYXlvdXRPYmplY3QtPntVc2VyQ2hhcnNldH0sCiAgICAgICAgQ29udGVudCAgICAgPT4gJE91dHB1dCB8fCAnJywKICAgICAgICBUeXBlICAgICAgICA9PiAnaW5saW5lJywKICAgICk7Cn0KCjE7Cg==</File>
        <File Location="Custom/Kernel/Modules/AgentCustomerSearch.pm" Permission="660" Encode="Base64"></File>
        <File Location="Custom/Kernel/Modules/AgentCustomerUserInformationCenterSearch.pm" Permission="660" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDIxIE9UUlMgQUcsIGh0dHBzOi8vb3Rycy5jb20vCiMgQ29weXJpZ2h0IChDKSAyMDIxLTIwMjIgWm51bnkgR21iSCwgaHR0cHM6Ly96bnVueS5vcmcvCiMgLS0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQojIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwczovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2dwbC0zLjAudHh0LgojIC0tCgpwYWNrYWdlIEtlcm5lbDo6TW9kdWxlczo6QWdlbnRDdXN0b21lclVzZXJJbmZvcm1hdGlvbkNlbnRlclNlYXJjaDsKIyMgbm9maWx0ZXIoVGlkeUFsbDo6UGx1Z2luOjpPVFJTOjpQZXJsOjpEQk9iamVjdCkKCnVzZSBzdHJpY3Q7CnVzZSB3YXJuaW5nczsKCnVzZSBLZXJuZWw6OlN5c3RlbTo6VmFyaWFibGVDaGVjayBxdyg6YWxsKTsKCm91ciAkT2JqZWN0TWFuYWdlckRpc2FibGVkID0gMTsKCnN1YiBuZXcgewogICAgbXkgKCAkVHlwZSwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGFsbG9jYXRlIG5ldyBoYXNoIGZvciBvYmplY3QKICAgIG15ICRTZWxmID0geyVQYXJhbX07CiAgICBibGVzcyggJFNlbGYsICRUeXBlICk7CgogICAgcmV0dXJuICRTZWxmOwp9CgpzdWIgUnVuIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgIyBnZXQgbmVlZGVkIG9iamVjdHMKICAgIG15ICRQYXJhbU9iamVjdCAgICAgICAgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6V2ViOjpSZXF1ZXN0Jyk7CiAgICBteSAkTGF5b3V0T2JqZWN0ICAgICAgID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpPdXRwdXQ6OkhUTUw6OkxheW91dCcpOwogICAgbXkgJEN1c3RvbWVyVXNlck9iamVjdCA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpDdXN0b21lclVzZXInKTsKICAgIG15ICRDb25maWdPYmplY3QgICAgICAgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OkNvbmZpZycpOwogICAgbXkgJFRpY2tldE9iamVjdCAgICAgICA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpUaWNrZXQnKTsKCiAgICBteSAkQXV0b0NvbXBsZXRlQ29uZmlnICAgICAgICAgICAgPSAkQ29uZmlnT2JqZWN0LT5HZXQoJ0F1dG9Db21wbGV0ZTo6QWdlbnQnKS0+e0N1c3RvbWVyU2VhcmNofTsKICAgIG15ICRNYXhSZXN1bHRzICAgICAgICAgICAgICAgICAgICA9ICRBdXRvQ29tcGxldGVDb25maWctPntNYXhSZXN1bHRzRGlzcGxheWVkfSB8fCAyMDsKICAgIG15ICRJbmNsdWRlVW5rbm93blRpY2tldEN1c3RvbWVycyA9IGludCggJFBhcmFtT2JqZWN0LT5HZXRQYXJhbSggUGFyYW0gPT4gJ0luY2x1ZGVVbmtub3duVGlja2V0Q3VzdG9tZXJzJyApIHx8IDAgKTsKICAgIG15ICRTZWFyY2hUZXJtICAgICAgICAgICAgICAgICAgICA9ICRQYXJhbU9iamVjdC0+R2V0UGFyYW0oIFBhcmFtID0+ICdUZXJtJyApIHx8ICcnOwoKICAgIGlmICggJFNlbGYtPntTdWJhY3Rpb259IGVxICdTZWFyY2hDdXN0b21lclVzZXInICkgewoKICAgICAgICBteSAkVW5rbm93blRpY2tldEN1c3RvbWVyTGlzdDsKCiAgICAgICAgaWYgKCRJbmNsdWRlVW5rbm93blRpY2tldEN1c3RvbWVycykgewoKICAgICAgICAgICAgIyBhZGQgY3VzdG9tZXJzIHRoYXQgYXJlIG5vdCBzYXZlZCBpbiBhbnkgYmFja2VuZAogICAgICAgICAgICAkVW5rbm93blRpY2tldEN1c3RvbWVyTGlzdCA9ICRUaWNrZXRPYmplY3QtPlNlYXJjaFVua25vd25UaWNrZXRDdXN0b21lcnMoCiAgICAgICAgICAgICAgICBTZWFyY2hUZXJtID0+ICRTZWFyY2hUZXJtLAogICAgICAgICAgICApOwogICAgICAgIH0KCiAgICAgICAgbXkgJUN1c3RvbWVyTGlzdCA9ICRDdXN0b21lclVzZXJPYmplY3QtPkN1c3RvbWVyU2VhcmNoKAogICAgICAgICAgICBTZWFyY2ggPT4gJFNlYXJjaFRlcm0sCiAgICAgICAgICAgIFVzZXJJRCA9PiAkU2VsZi0+e1VzZXJJRH0sCiAgICAgICAgKTsKICAgICAgICBtYXAgeyAkQ3VzdG9tZXJMaXN0eyRffSA9ICRVbmtub3duVGlja2V0Q3VzdG9tZXJMaXN0LT57JF99IH0ga2V5cyAleyRVbmtub3duVGlja2V0Q3VzdG9tZXJMaXN0fTsKCiAgICAgICAgbXkgQFJlc3VsdDsKCiAgICAgICAgQ1VTVE9NRVJMT0dJTjoKICAgICAgICBmb3IgbXkgJEN1c3RvbWVyTG9naW4gKCBzb3J0IGtleXMgJUN1c3RvbWVyTGlzdCApIHsKCiAgICAgICAgICAgIG15ICVDdXN0b21lckRhdGEgPSAkQ3VzdG9tZXJVc2VyT2JqZWN0LT5DdXN0b21lclVzZXJEYXRhR2V0KAogICAgICAgICAgICAgICAgVXNlciA9PiAkQ3VzdG9tZXJMb2dpbiwKICAgICAgICAgICAgKTsKCiAgICAgICAgICAgIGlmICggISggZ3JlcCB7ICRfLT57VmFsdWV9IGVxICRDdXN0b21lckRhdGF7VXNlckN1c3RvbWVySUR9IH0gQFJlc3VsdCApICkgewogICAgICAgICAgICAgICAgcHVzaCBAUmVzdWx0LCB7CiAgICAgICAgICAgICAgICAgICAgTGFiZWwgPT4gJEN1c3RvbWVyTGlzdHskQ3VzdG9tZXJMb2dpbn0sCiAgICAgICAgICAgICAgICAgICAgVmFsdWUgPT4gJEN1c3RvbWVyTG9naW4sCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9CgogICAgICAgICAgICBsYXN0IENVU1RPTUVSTE9HSU4gaWYgc2NhbGFyIEBSZXN1bHQgPj0gJE1heFJlc3VsdHM7CiAgICAgICAgfQoKICAgICAgICBteSAkSlNPTiA9ICRMYXlvdXRPYmplY3QtPkpTT05FbmNvZGUoCiAgICAgICAgICAgIERhdGEgPT4gXEBSZXN1bHQsCiAgICAgICAgKTsKCiAgICAgICAgcmV0dXJuICRMYXlvdXRPYmplY3QtPkF0dGFjaG1lbnQoCiAgICAgICAgICAgIENvbnRlbnRUeXBlID0+ICdhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PScgLiAkTGF5b3V0T2JqZWN0LT57Q2hhcnNldH0sCiAgICAgICAgICAgIENvbnRlbnQgICAgID0+ICRKU09OIHx8ICcnLAogICAgICAgICAgICBUeXBlICAgICAgICA9PiAnaW5saW5lJywKICAgICAgICAgICAgTm9DYWNoZSAgICAgPT4gMSwKICAgICAgICApOwogICAgfQoKICAgIG15ICRPdXRwdXQgPSAkTGF5b3V0T2JqZWN0LT5PdXRwdXQoCiAgICAgICAgVGVtcGxhdGVGaWxlID0+ICdBZ2VudEN1c3RvbWVyVXNlckluZm9ybWF0aW9uQ2VudGVyU2VhcmNoJywKICAgICAgICBEYXRhICAgICAgICAgPT4gXCVQYXJhbSwKICAgICk7CiAgICByZXR1cm4gJExheW91dE9iamVjdC0+QXR0YWNobWVudCgKICAgICAgICBOb0NhY2hlICAgICA9PiAxLAogICAgICAgIENvbnRlbnRUeXBlID0+ICd0ZXh0L2h0bWwnLAogICAgICAgIENoYXJzZXQgICAgID0+ICRMYXlvdXRPYmplY3QtPntVc2VyQ2hhcnNldH0sCiAgICAgICAgQ29udGVudCAgICAgPT4gJE91dHB1dCB8fCAnJywKICAgICAgICBUeXBlICAgICAgICA9PiAnaW5saW5lJywKICAgICk7Cn0KCjE7Cg==</File>
        <File Location="Custom/Kernel/Modules/AgentTicketCompose.pm" Permission="660" Encode="Base64"></File>
        <File Location="Custom/Kernel/Modules/AgentTicketCustomer.pm" Permission="660" Encode="Base64"></File>
        <File Location="Custom/Kernel/Modules/AgentTicketEmail.pm" Permission="660" Encode="Base64"></File>
        <File Location="Custom/Kernel/Modules/AgentTicketEmailResend.pm" Permission="660" Encode="Base64"></File>
        <File Location="Custom/Kernel/Modules/AgentTicketPhone.pm" Permission="660" Encode="Base64"></File>
        <File Location="Custom/Kernel/Modules/AgentTicketProcess.pm" Permission="660" Encode="Base64"></File>
        <File Location="Custom/Kernel/Output/HTML/Article/Chat.pm" Permission="660" Encode="Base64"></File>
        <File Location="Custom/Kernel/Output/HTML/Article/MIMEBase.pm" Permission="660" Encode="Base64"></File>
        <File Location="Custom/Kernel/Output/HTML/Dashboard/CustomerUserList.pm" Permission="660" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDIxIE9UUlMgQUcsIGh0dHBzOi8vb3Rycy5jb20vCiMgQ29weXJpZ2h0IChDKSAyMDIxLTIwMjIgWm51bnkgR21iSCwgaHR0cHM6Ly96bnVueS5vcmcvCiMgLS0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQojIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwczovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2dwbC0zLjAudHh0LgojIC0tCgpwYWNrYWdlIEtlcm5lbDo6T3V0cHV0OjpIVE1MOjpEYXNoYm9hcmQ6OkN1c3RvbWVyVXNlckxpc3Q7Cgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7Cgp1c2UgS2VybmVsOjpMYW5ndWFnZSBxdyhUcmFuc2xhdGFibGUpOwoKb3VyICRPYmplY3RNYW5hZ2VyRGlzYWJsZWQgPSAxOwoKc3ViIG5ldyB7CiAgICBteSAoICRUeXBlLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgYWxsb2NhdGUgbmV3IGhhc2ggZm9yIG9iamVjdAogICAgbXkgJFNlbGYgPSB7JVBhcmFtfTsKICAgIGJsZXNzKCAkU2VsZiwgJFR5cGUgKTsKCiAgICAjIGdldCBuZWVkZWQgcGFyYW1ldGVycwogICAgZm9yIG15ICROZWVkZWQgKHF3KENvbmZpZyBOYW1lIFVzZXJJRCkpIHsKICAgICAgICBkaWUgIkdvdCBubyAkTmVlZGVkISIgaWYgKCAhJFNlbGYtPnskTmVlZGVkfSApOwogICAgfQoKICAgICMgZ2V0IHBhcmFtIG9iamVjdAogICAgbXkgJFBhcmFtT2JqZWN0ID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OldlYjo6UmVxdWVzdCcpOwoKICAgICMgZ2V0IGN1cnJlbnQgZmlsdGVyCiAgICBteSAkTmFtZSAgICAgICAgICAgPSAkUGFyYW1PYmplY3QtPkdldFBhcmFtKCBQYXJhbSA9PiAnTmFtZScgKSB8fCAnJzsKICAgIG15ICRQcmVmZXJlbmNlc0tleSA9ICdVc2VyRGFzaGJvYXJkQ3VzdG9tZXJVc2VyTGlzdEZpbHRlcicgLiAkU2VsZi0+e05hbWV9OwoKICAgICRTZWxmLT57UHJlZktleX0gPSAnVXNlckRhc2hib2FyZFByZWYnIC4gJFNlbGYtPntOYW1lfSAuICctU2hvd24nOwoKICAgICRTZWxmLT57UGFnZVNob3dufSA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6T3V0cHV0OjpIVE1MOjpMYXlvdXQnKS0+eyAkU2VsZi0+e1ByZWZLZXl9IH0KICAgICAgICB8fCAkU2VsZi0+e0NvbmZpZ30tPntMaW1pdH07CgogICAgJFNlbGYtPntTdGFydEhpdH0gPSBpbnQoICRQYXJhbU9iamVjdC0+R2V0UGFyYW0oIFBhcmFtID0+ICdTdGFydEhpdCcgKSB8fCAxICk7CgogICAgcmV0dXJuICRTZWxmOwp9CgpzdWIgUHJlZmVyZW5jZXMgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICBteSBAUGFyYW1zID0gKAogICAgICAgIHsKICAgICAgICAgICAgRGVzYyAgPT4gVHJhbnNsYXRhYmxlKCdTaG93biBjdXN0b21lciB1c2VycycpLAogICAgICAgICAgICBOYW1lICA9PiAkU2VsZi0+e1ByZWZLZXl9LAogICAgICAgICAgICBCbG9jayA9PiAnT3B0aW9uJywKCiAgICAgICAgICAgICMgICAgICAgICAgICBCbG9jayA9PiAnSW5wdXQnLAogICAgICAgICAgICBEYXRhID0+IHsKICAgICAgICAgICAgICAgIDUgID0+ICcgNScsCiAgICAgICAgICAgICAgICAxMCA9PiAnMTAnLAogICAgICAgICAgICAgICAgMTUgPT4gJzE1JywKICAgICAgICAgICAgICAgIDIwID0+ICcyMCcsCiAgICAgICAgICAgICAgICAyNSA9PiAnMjUnLAogICAgICAgICAgICB9LAogICAgICAgICAgICBTZWxlY3RlZElEICA9PiAkU2VsZi0+e1BhZ2VTaG93bn0sCiAgICAgICAgICAgIFRyYW5zbGF0aW9uID0+IDAsCiAgICAgICAgfSwKICAgICk7CgogICAgcmV0dXJuIEBQYXJhbXM7Cn0KCnN1YiBDb25maWcgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICByZXR1cm4gKAogICAgICAgICV7ICRTZWxmLT57Q29uZmlnfSB9LAoKICAgICAgICAjIHJlbWVtYmVyLCBkbyBub3QgYWxsb3cgdG8gdXNlIHBhZ2UgY2FjaGUKICAgICAgICAjIChpdCdzIG5vdCB3b3JraW5nIGJlY2F1c2Ugb2YgaW50ZXJuYWwgZmlsdGVyKQogICAgICAgIENhY2hlVFRMID0+IHVuZGVmLAogICAgICAgIENhY2hlS2V5ID0+IHVuZGVmLAogICAgKTsKfQoKc3ViIFJ1biB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIHJldHVybiBpZiAhJFBhcmFte0N1c3RvbWVySUR9OwoKICAgICMgZ2V0IGN1c3RvbWVyIHVzZXIgb2JqZWN0CiAgICBteSAkQ3VzdG9tZXJVc2VyT2JqZWN0ID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkN1c3RvbWVyVXNlcicpOwoKICAgIG15ICRDdXN0b21lcklEcyA9IHsKICAgICAgICAkQ3VzdG9tZXJVc2VyT2JqZWN0LT5DdXN0b21lclNlYXJjaCgKICAgICAgICAgICAgQ3VzdG9tZXJJRFJhdyA9PiAkUGFyYW17Q3VzdG9tZXJJRH0sCiAgICAgICAgICAgIFVzZXJJRCA9PiAkU2VsZi0+e1VzZXJJRH0sCiAgICAgICAgKQogICAgfTsKCiAgICAjIGlmIHdlIGFyZSB1c2luZyBtdWx0aXBsZSBDdXN0b21lcklEcyBmb3IgYSBDdXN0b21lclVzZXIsIHdlIGhhdmUgdG8gZXhwYW5kIG91ciBDdXN0b21lcklEcyB2YXJpYWJsZQogICAgbXkgQEN1c3RvbWVyVXNlcklEcyA9ICRDdXN0b21lclVzZXJPYmplY3QtPkN1c3RvbWVyVXNlckN1c3RvbWVyTWVtYmVyTGlzdCgKICAgICAgICBDdXN0b21lcklEID0+ICRQYXJhbXtDdXN0b21lcklEfSwKICAgICk7CgogICAgQ1VTVE9NRVJVU0VSSUQ6CiAgICBmb3IgbXkgJEN1c3RvbWVyVXNlcklEIChAQ3VzdG9tZXJVc2VySURzKSB7CiAgICAgICAgbXkgJUN1c3RvbWVyVXNlckxpc3QgPSAkQ3VzdG9tZXJVc2VyT2JqZWN0LT5DdXN0b21lclNlYXJjaCggVXNlckxvZ2luID0+ICRDdXN0b21lclVzZXJJRCApOwogICAgICAgIG5leHQgQ1VTVE9NRVJVU0VSSUQgaWYgISVDdXN0b21lclVzZXJMaXN0OwogICAgICAgICRDdXN0b21lcklEcyA9IHsgJSRDdXN0b21lcklEcywgJUN1c3RvbWVyVXNlckxpc3QgfTsKICAgIH0KCiAgICAjIGFkZCBwYWdlIG5hdiBiYXIKICAgIG15ICRUb3RhbCA9IHNjYWxhciBrZXlzICV7JEN1c3RvbWVySURzfTsKCiAgICAjIGdldCBsYXlvdXQgb2JqZWN0CiAgICBteSAkTGF5b3V0T2JqZWN0ID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpPdXRwdXQ6OkhUTUw6OkxheW91dCcpOwoKICAgIG15ICRMaW5rUGFnZSA9ICdTdWJhY3Rpb249RWxlbWVudDtOYW1lPScKICAgICAgICAuICRTZWxmLT57TmFtZX0gLiAnOycKICAgICAgICAuICdDdXN0b21lcklEPScKICAgICAgICAuICRMYXlvdXRPYmplY3QtPkxpbmtFbmNvZGUoICRQYXJhbXtDdXN0b21lcklEfSApIC4gJzsnOwoKICAgIG15ICVQYWdlTmF2ID0gJExheW91dE9iamVjdC0+UGFnZU5hdkJhcigKICAgICAgICBTdGFydEhpdCAgICA9PiAkU2VsZi0+e1N0YXJ0SGl0fSwKICAgICAgICBQYWdlU2hvd24gICA9PiAkU2VsZi0+e1BhZ2VTaG93bn0sCiAgICAgICAgQWxsSGl0cyAgICAgPT4gJFRvdGFsIHx8IDEsCiAgICAgICAgQWN0aW9uICAgICAgPT4gJ0FjdGlvbj0nIC4gJExheW91dE9iamVjdC0+e0FjdGlvbn0sCiAgICAgICAgTGluayAgICAgICAgPT4gJExpbmtQYWdlLAogICAgICAgIEFKQVhSZXBsYWNlID0+ICdEYXNoYm9hcmQnIC4gJFNlbGYtPntOYW1lfSwKICAgICAgICBJRFByZWZpeCAgICA9PiAnRGFzaGJvYXJkJyAuICRTZWxmLT57TmFtZX0sCiAgICAgICAgQUpBWCAgICAgICAgPT4gJFBhcmFte0FKQVh9LAogICAgKTsKCiAgICAkTGF5b3V0T2JqZWN0LT5CbG9jaygKICAgICAgICBOYW1lID0+ICdDb250ZW50TGFyZ2VDdXN0b21lclVzZXJMaXN0TmF2QmFyJywKICAgICAgICBEYXRhID0+IHsKICAgICAgICAgICAgJXsgJFNlbGYtPntDb25maWd9IH0sCiAgICAgICAgICAgIE5hbWUgPT4gJFNlbGYtPntOYW1lfSwKICAgICAgICAgICAgJVBhZ2VOYXYsCiAgICAgICAgfSwKICAgICk7CgogICAgIyBnZXQgY29uZmlnIG9iamVjdAogICAgbXkgJENvbmZpZ09iamVjdCA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6Q29uZmlnJyk7CgogICAgIyBjaGVjayB0aGUgcGVybWlzc2lvbiBmb3IgdGhlIFN3aXRjaFRvQ3VzdG9tZXIgZmVhdHVyZQogICAgaWYgKCAkQ29uZmlnT2JqZWN0LT5HZXQoJ1N3aXRjaFRvQ3VzdG9tZXInKSApIHsKCiAgICAgICAgIyBnZXQgZ3JvdXAgb2JqZWN0CiAgICAgICAgbXkgJEdyb3VwT2JqZWN0ID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06Okdyb3VwJyk7CgogICAgICAgICMgZ2V0IHRoZSBncm91cCBpZCB3aGljaCBpcyBhbGxvd2VkIHRvIHVzZSB0aGUgc3dpdGNoIHRvIGN1c3RvbWVyIGZlYXR1cmUKICAgICAgICBteSAkU3dpdGNoVG9DdXN0b21lckdyb3VwSUQgPSAkR3JvdXBPYmplY3QtPkdyb3VwTG9va3VwKAogICAgICAgICAgICBHcm91cCA9PiAkQ29uZmlnT2JqZWN0LT5HZXQoJ1N3aXRjaFRvQ3VzdG9tZXI6OlBlcm1pc3Npb25Hcm91cCcpLAogICAgICAgICk7CgogICAgICAgICMgZ2V0IHVzZXIgZ3JvdXBzLCB3aGVyZSB0aGUgdXNlciBoYXMgdGhlIHJ3IHByaXZpbGVnZQogICAgICAgIG15ICVHcm91cHMgPSAkR3JvdXBPYmplY3QtPlBlcm1pc3Npb25Vc2VyR2V0KAogICAgICAgICAgICBVc2VySUQgPT4gJFNlbGYtPntVc2VySUR9LAogICAgICAgICAgICBUeXBlICAgPT4gJ3J3JywKICAgICAgICApOwoKICAgICAgICAjIGlmIHRoZSB1c2VyIGlzIGEgbWVtYmVyIGluIHRoaXMgZ3JvdXAgaGUgY2FuIGFjY2VzcyB0aGUgZmVhdHVyZQogICAgICAgIGlmICggJEdyb3Vwc3skU3dpdGNoVG9DdXN0b21lckdyb3VwSUR9ICkgewoKICAgICAgICAgICAgJFNlbGYtPntTd2l0Y2hUb0N1c3RvbWVyUGVybWlzc2lvbn0gPSAxOwoKICAgICAgICAgICAgJExheW91dE9iamVjdC0+QmxvY2soCiAgICAgICAgICAgICAgICBOYW1lID0+ICdPdmVydmlld1Jlc3VsdFN3aXRjaFRvQ3VzdG9tZXInLAogICAgICAgICAgICApOwogICAgICAgIH0KICAgIH0KCiAgICAjIHNob3cgY2hhbmdlIGN1c3RvbWVyIHJlbGF0aW9ucyBidXR0b24gaWYgdGhlIGFnZW50IGhhcyBwZXJtaXNzaW9uCiAgICBteSAkQ2hhbmdlQ3VzdG9tZXJSZWxlYXRpb25zQWNjZXNzID0gJExheW91dE9iamVjdC0+UGVybWlzc2lvbigKICAgICAgICBBY3Rpb24gPT4gJ0FkbWluQ3VzdG9tZXJVc2VyQ3VzdG9tZXInLAogICAgICAgIFR5cGUgICA9PiAncncnLAogICAgKTsKCiAgICBpZiAoJENoYW5nZUN1c3RvbWVyUmVsZWF0aW9uc0FjY2VzcykgewogICAgICAgICRMYXlvdXRPYmplY3QtPkJsb2NrKAogICAgICAgICAgICBOYW1lID0+ICdDb250ZW50TGFyZ2VDdXN0b21lcklEQWRkJywKICAgICAgICAgICAgRGF0YSA9PiB7CiAgICAgICAgICAgICAgICBDdXN0b21lcklEID0+ICRQYXJhbXtDdXN0b21lcklEfSwKICAgICAgICAgICAgfSwKICAgICAgICApOwogICAgfQoKICAgICMgU2hvdyBhZGQgbmV3IGN1c3RvbWVyIGJ1dHRvbiBpZjoKICAgICMgICAtIFRoZSBhZ2VudCBoYXMgcGVybWlzc2lvbiB0byB1c2UgdGhlIG1vZHVsZQogICAgIyAgIC0gVGhlcmUgYXJlIHdyaXRhYmxlIGN1c3RvbWVyIGJhY2tlbmRzCiAgICBteSAkQWRkQWNjZXNzOwoKICAgIFRZUEU6CiAgICBmb3IgbXkgJFBlcm1pc3Npb24gKHF3KHJvIHJ3KSkgewogICAgICAgICRBZGRBY2Nlc3MgPSAkTGF5b3V0T2JqZWN0LT5QZXJtaXNzaW9uKAogICAgICAgICAgICBBY3Rpb24gPT4gJ0FkbWluQ3VzdG9tZXJVc2VyJywKICAgICAgICAgICAgVHlwZSAgID0+ICRQZXJtaXNzaW9uLAogICAgICAgICk7CiAgICAgICAgbGFzdCBUWVBFIGlmICRBZGRBY2Nlc3M7CiAgICB9CgogICAgIyBHZXQgd3JpdGFibGUgZGF0YSBzb3VyY2VzLgogICAgbXkgJUN1c3RvbWVyU291cmNlID0gJEN1c3RvbWVyVXNlck9iamVjdC0+Q3VzdG9tZXJTb3VyY2VMaXN0KAogICAgICAgIFJlYWRPbmx5ID0+IDAsCiAgICApOwoKICAgIGlmICggJEFkZEFjY2VzcyAmJiBzY2FsYXIga2V5cyAlQ3VzdG9tZXJTb3VyY2UgKSB7CiAgICAgICAgJExheW91dE9iamVjdC0+QmxvY2soCiAgICAgICAgICAgIE5hbWUgPT4gJ0NvbnRlbnRMYXJnZUN1c3RvbWVyVXNlckFkZCcsCiAgICAgICAgICAgIERhdGEgPT4gewogICAgICAgICAgICAgICAgQ3VzdG9tZXJJRCA9PiAkU2VsZi0+e0N1c3RvbWVySUR9LAogICAgICAgICAgICB9LAogICAgICAgICk7CgogICAgICAgICRTZWxmLT57RWRpdEN1c3RvbWVyUGVybWlzc2lvbn0gPSAxOwogICAgfQoKICAgICMgZ2V0IHRoZSBwZXJtaXNzaW9uIGZvciB0aGUgcGhvbmUgdGlja2V0IGNyZWF0aW9uCiAgICBteSAkTmV3QWdlbnRUaWNrZXRQaG9uZVBlcm1pc3Npb24gPSAkTGF5b3V0T2JqZWN0LT5QZXJtaXNzaW9uKAogICAgICAgIEFjdGlvbiA9PiAnQWdlbnRUaWNrZXRQaG9uZScsCiAgICAgICAgVHlwZSAgID0+ICdydycsCiAgICApOwoKICAgICMgY2hlY2sgdGhlIHBlcm1pc3Npb24gZm9yIHRoZSBwaG9uZSB0aWNrZXQgY3JlYXRpb24KICAgIGlmICgkTmV3QWdlbnRUaWNrZXRQaG9uZVBlcm1pc3Npb24pIHsKICAgICAgICAkTGF5b3V0T2JqZWN0LT5CbG9jaygKICAgICAgICAgICAgTmFtZSA9PiAnT3ZlcnZpZXdSZXN1bHROZXdBZ2VudFRpY2tldFBob25lJywKICAgICAgICApOwogICAgfQoKICAgICMgZ2V0IHRoZSBwZXJtaXNzaW9uIGZvciB0aGUgZW1haWwgdGlja2V0IGNyZWF0aW9uCiAgICBteSAkTmV3QWdlbnRUaWNrZXRFbWFpbFBlcm1pc3Npb24gPSAkTGF5b3V0T2JqZWN0LT5QZXJtaXNzaW9uKAogICAgICAgIEFjdGlvbiA9PiAnQWdlbnRUaWNrZXRFbWFpbCcsCiAgICAgICAgVHlwZSAgID0+ICdydycsCiAgICApOwoKICAgICMgY2hlY2sgdGhlIHBlcm1pc3Npb24gZm9yIHRoZSBlbWFpbCB0aWNrZXQgY3JlYXRpb24KICAgIGlmICgkTmV3QWdlbnRUaWNrZXRFbWFpbFBlcm1pc3Npb24pIHsKICAgICAgICAkTGF5b3V0T2JqZWN0LT5CbG9jaygKICAgICAgICAgICAgTmFtZSA9PiAnT3ZlcnZpZXdSZXN1bHROZXdBZ2VudFRpY2tldEVtYWlsJywKICAgICAgICApOwogICAgfQoKICAgIG15IEBDdXN0b21lcktleXMgPSBzb3J0IHsgbGMoICRDdXN0b21lcklEcy0+eyRhfSApIGNtcCBsYyggJEN1c3RvbWVySURzLT57JGJ9ICkgfSBrZXlzICV7JEN1c3RvbWVySURzfTsKICAgIEBDdXN0b21lcktleXMgPSBzcGxpY2UgQEN1c3RvbWVyS2V5cywgJFNlbGYtPntTdGFydEhpdH0gLSAxLCAkU2VsZi0+e1BhZ2VTaG93bn07CgogICAgZm9yIG15ICRDdXN0b21lcktleSAoQEN1c3RvbWVyS2V5cykgewogICAgICAgICRMYXlvdXRPYmplY3QtPkJsb2NrKAogICAgICAgICAgICBOYW1lID0+ICdDb250ZW50TGFyZ2VDdXN0b21lclVzZXJMaXN0Um93JywKICAgICAgICAgICAgRGF0YSA9PiB7CiAgICAgICAgICAgICAgICAlUGFyYW0sCiAgICAgICAgICAgICAgICBFZGl0Q3VzdG9tZXJQZXJtaXNzaW9uID0+ICRTZWxmLT57RWRpdEN1c3RvbWVyUGVybWlzc2lvbn0sCiAgICAgICAgICAgICAgICBDdXN0b21lcktleSAgICAgICAgICAgID0+ICRDdXN0b21lcktleSwKICAgICAgICAgICAgICAgIEN1c3RvbWVyTGlzdEVudHJ5ICAgICAgPT4gJEN1c3RvbWVySURzLT57JEN1c3RvbWVyS2V5fSwKICAgICAgICAgICAgfSwKICAgICAgICApOwoKICAgICAgICBpZiAoICRDb25maWdPYmplY3QtPkdldCgnQ2hhdEVuZ2luZTo6QWN0aXZlJykgKSB7CgogICAgICAgICAgICAjIENoZWNrIGlmIGFnZW50IGhhcyBwZXJtaXNzaW9uIHRvIHN0YXJ0IGNoYXRzIHdpdGggdGhlIGN1c3RvbWVyIHVzZXJzLgogICAgICAgICAgICBteSAkRW5hYmxlQ2hhdCA9IDE7CiAgICAgICAgICAgIG15ICRDaGF0U3RhcnRpbmdBZ2VudHNHcm91cAogICAgICAgICAgICAgICAgPSAkQ29uZmlnT2JqZWN0LT5HZXQoJ0NoYXRFbmdpbmU6OlBlcm1pc3Npb25Hcm91cDo6Q2hhdFN0YXJ0aW5nQWdlbnRzJykgfHwgJ3VzZXJzJzsKICAgICAgICAgICAgbXkgJENoYXRTdGFydGluZ0FnZW50c0dyb3VwUGVybWlzc2lvbiA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpHcm91cCcpLT5QZXJtaXNzaW9uQ2hlY2soCiAgICAgICAgICAgICAgICBVc2VySUQgICAgPT4gJFNlbGYtPntVc2VySUR9LAogICAgICAgICAgICAgICAgR3JvdXBOYW1lID0+ICRDaGF0U3RhcnRpbmdBZ2VudHNHcm91cCwKICAgICAgICAgICAgICAgIFR5cGUgICAgICA9PiAncncnLAogICAgICAgICAgICApOwoKICAgICAgICAgICAgaWYgKCAhJENoYXRTdGFydGluZ0FnZW50c0dyb3VwUGVybWlzc2lvbiApIHsKICAgICAgICAgICAgICAgICRFbmFibGVDaGF0ID0gMDsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoCiAgICAgICAgICAgICAgICAkRW5hYmxlQ2hhdAogICAgICAgICAgICAgICAgJiYgISRDb25maWdPYmplY3QtPkdldCgnQ2hhdEVuZ2luZTo6Q2hhdERpcmVjdGlvbjo6QWdlbnRUb0N1c3RvbWVyJykKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgJEVuYWJsZUNoYXQgPSAwOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoJEVuYWJsZUNoYXQpIHsKICAgICAgICAgICAgICAgIG15ICRWaWRlb0NoYXRFbmFibGVkID0gMDsKICAgICAgICAgICAgICAgIG15ICRWaWRlb0NoYXRBZ2VudHNHcm91cAogICAgICAgICAgICAgICAgICAgID0gJENvbmZpZ09iamVjdC0+R2V0KCdDaGF0RW5naW5lOjpQZXJtaXNzaW9uR3JvdXA6OlZpZGVvQ2hhdEFnZW50cycpIHx8ICd1c2Vycyc7CiAgICAgICAgICAgICAgICBteSAkVmlkZW9DaGF0QWdlbnRzR3JvdXBQZXJtaXNzaW9uID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06Okdyb3VwJyktPlBlcm1pc3Npb25DaGVjaygKICAgICAgICAgICAgICAgICAgICBVc2VySUQgICAgPT4gJFNlbGYtPntVc2VySUR9LAogICAgICAgICAgICAgICAgICAgIEdyb3VwTmFtZSA9PiAkVmlkZW9DaGF0QWdlbnRzR3JvdXAsCiAgICAgICAgICAgICAgICAgICAgVHlwZSAgICAgID0+ICdydycsCiAgICAgICAgICAgICAgICApOwoKICAgICAgICAgICAgICAgICMgRW5hYmxlIHRoZSB2aWRlbyBjaGF0IGZlYXR1cmUgaWYgc3lzdGVtIGlzIGVudGl0bGVkIGFuZCBhZ2VudCBpcyBhIG1lbWJlciBvZiBjb25maWd1cmVkIGdyb3VwLgogICAgICAgICAgICAgICAgaWYgKCRWaWRlb0NoYXRBZ2VudHNHcm91cFBlcm1pc3Npb24pIHsKICAgICAgICAgICAgICAgICAgICBpZiAoICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpNYWluJyktPlJlcXVpcmUoICdLZXJuZWw6OlN5c3RlbTo6VmlkZW9DaGF0JywgU2lsZW50ID0+IDEgKSApCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAkVmlkZW9DaGF0RW5hYmxlZCA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpWaWRlb0NoYXQnKS0+SXNFbmFibGVkKCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIG15ICRDdXN0b21lckVuYWJsZUNoYXQgPSAwOwogICAgICAgICAgICAgICAgbXkgJENoYXRBY2Nlc3MgICAgICAgICA9IDA7CiAgICAgICAgICAgICAgICBteSAkVmlkZW9DaGF0QXZhaWxhYmxlID0gMDsKICAgICAgICAgICAgICAgIG15ICRWaWRlb0NoYXRTdXBwb3J0ICAgPSAwOwoKICAgICAgICAgICAgICAgICMgRGVmYXVsdCBzdGF0dXMgaXMgb2ZmbGluZS4KICAgICAgICAgICAgICAgIG15ICRVc2VyU3RhdGUgICAgICAgICAgICA9IFRyYW5zbGF0YWJsZSgnT2ZmbGluZScpOwogICAgICAgICAgICAgICAgbXkgJFVzZXJTdGF0ZURlc2NyaXB0aW9uID0gJExheW91dE9iamVjdC0+e0xhbmd1YWdlT2JqZWN0fS0+VHJhbnNsYXRlKCdVc2VyIGlzIGN1cnJlbnRseSBvZmZsaW5lLicpOwoKICAgICAgICAgICAgICAgIG15ICRDdXN0b21lckNoYXRBdmFpbGFiaWxpdHkgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6Q2hhdCcpLT5DdXN0b21lckF2YWlsYWJpbGl0eUdldCgKICAgICAgICAgICAgICAgICAgICBVc2VySUQgPT4gJEN1c3RvbWVyS2V5LAogICAgICAgICAgICAgICAgKTsKCiAgICAgICAgICAgICAgICBteSAkQ3VzdG9tZXJVc2VyT2JqZWN0ID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkN1c3RvbWVyVXNlcicpOwoKICAgICAgICAgICAgICAgIG15ICVDdXN0b21lclVzZXIgPSAkQ3VzdG9tZXJVc2VyT2JqZWN0LT5DdXN0b21lclVzZXJEYXRhR2V0KAogICAgICAgICAgICAgICAgICAgIFVzZXIgPT4gJEN1c3RvbWVyS2V5LAogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgICRDdXN0b21lclVzZXJ7VXNlckZ1bGxuYW1lfSA9ICRDdXN0b21lclVzZXJPYmplY3QtPkN1c3RvbWVyTmFtZSgKICAgICAgICAgICAgICAgICAgICBVc2VyTG9naW4gPT4gJEN1c3RvbWVyS2V5LAogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgICRWaWRlb0NoYXRTdXBwb3J0ID0gMSBpZiAkQ3VzdG9tZXJVc2Vye1ZpZGVvQ2hhdEhhc1dlYlJUQ307CgogICAgICAgICAgICAgICAgaWYgKCAkQ3VzdG9tZXJDaGF0QXZhaWxhYmlsaXR5ID09IDMgKSB7CiAgICAgICAgICAgICAgICAgICAgJFVzZXJTdGF0ZSAgICAgICAgICAgID0gVHJhbnNsYXRhYmxlKCdBY3RpdmUnKTsKICAgICAgICAgICAgICAgICAgICAkQ3VzdG9tZXJFbmFibGVDaGF0ICAgPSAxOwogICAgICAgICAgICAgICAgICAgICRVc2VyU3RhdGVEZXNjcmlwdGlvbiA9ICRMYXlvdXRPYmplY3QtPntMYW5ndWFnZU9iamVjdH0tPlRyYW5zbGF0ZSgnVXNlciBpcyBjdXJyZW50bHkgYWN0aXZlLicpOwogICAgICAgICAgICAgICAgICAgICRWaWRlb0NoYXRBdmFpbGFibGUgICA9IDE7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNpZiAoICRDdXN0b21lckNoYXRBdmFpbGFiaWxpdHkgPT0gMiApIHsKICAgICAgICAgICAgICAgICAgICAkVXNlclN0YXRlICAgICAgICAgID0gVHJhbnNsYXRhYmxlKCdBd2F5Jyk7CiAgICAgICAgICAgICAgICAgICAgJEN1c3RvbWVyRW5hYmxlQ2hhdCA9IDE7CiAgICAgICAgICAgICAgICAgICAgJFVzZXJTdGF0ZURlc2NyaXB0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgID0gJExheW91dE9iamVjdC0+e0xhbmd1YWdlT2JqZWN0fS0+VHJhbnNsYXRlKCdVc2VyIHdhcyBpbmFjdGl2ZSBmb3IgYSB3aGlsZS4nKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAkTGF5b3V0T2JqZWN0LT5CbG9jaygKICAgICAgICAgICAgICAgICAgICBOYW1lID0+ICdDb250ZW50TGFyZ2VDdXN0b21lclVzZXJMaXN0Um93VXNlclN0YXR1cycsCiAgICAgICAgICAgICAgICAgICAgRGF0YSA9PiB7CiAgICAgICAgICAgICAgICAgICAgICAgICVDdXN0b21lclVzZXIsCiAgICAgICAgICAgICAgICAgICAgICAgIFVzZXJTdGF0ZSAgICAgICAgICAgID0+ICRVc2VyU3RhdGUsCiAgICAgICAgICAgICAgICAgICAgICAgIFVzZXJTdGF0ZURlc2NyaXB0aW9uID0+ICRVc2VyU3RhdGVEZXNjcmlwdGlvbiwKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgKTsKCiAgICAgICAgICAgICAgICBpZiAoCiAgICAgICAgICAgICAgICAgICAgJEN1c3RvbWVyRW5hYmxlQ2hhdAogICAgICAgICAgICAgICAgICAgICYmICRDb25maWdPYmplY3QtPkdldCgnVGlja2V0OjpBZ2VudDo6U3RhcnRDaGF0V09UaWNrZXQnKQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAkTGF5b3V0T2JqZWN0LT5CbG9jaygKICAgICAgICAgICAgICAgICAgICAgICAgTmFtZSA9PiAnQ29udGVudExhcmdlQ3VzdG9tZXJVc2VyTGlzdFJvd0NoYXRJY29ucycsCiAgICAgICAgICAgICAgICAgICAgICAgIERhdGEgPT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJUN1c3RvbWVyVXNlciwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZGVvQ2hhdEVuYWJsZWQgICA9PiAkVmlkZW9DaGF0RW5hYmxlZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZGVvQ2hhdEF2YWlsYWJsZSA9PiAkVmlkZW9DaGF0QXZhaWxhYmxlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlkZW9DaGF0U3VwcG9ydCAgID0+ICRWaWRlb0NoYXRTdXBwb3J0LAogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgICMgZ2V0IHRpY2tldCBvYmplY3QKICAgICAgICBteSAkVGlja2V0T2JqZWN0ID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OlRpY2tldCcpOwoKICAgICAgICBteSAkVGlja2V0Q291bnRPcGVuID0gJFRpY2tldE9iamVjdC0+VGlja2V0U2VhcmNoKAogICAgICAgICAgICBTdGF0ZVR5cGUgICAgICAgICAgICA9PiAnT3BlbicsCiAgICAgICAgICAgIEN1c3RvbWVyVXNlckxvZ2luUmF3ID0+ICRDdXN0b21lcktleSwKICAgICAgICAgICAgUmVzdWx0ICAgICAgICAgICAgICAgPT4gJ0NPVU5UJywKICAgICAgICAgICAgUGVybWlzc2lvbiAgICAgICAgICAgPT4gJFNlbGYtPntDb25maWd9LT57UGVybWlzc2lvbn0sCiAgICAgICAgICAgIFVzZXJJRCAgICAgICAgICAgICAgID0+ICRTZWxmLT57VXNlcklEfSwKICAgICAgICAgICAgQ2FjaGVUVEwgICAgICAgICAgICAgPT4gJFNlbGYtPntDb25maWd9LT57Q2FjaGVUVExMb2NhbH0gKiA2MCwKICAgICAgICApIHx8IDA7CgogICAgICAgIG15ICRDdXN0b21lcktleVNRTCA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpEQicpLT5RdWVyeVN0cmluZ0VzY2FwZSggUXVlcnlTdHJpbmcgPT4gJEN1c3RvbWVyS2V5ICk7CgogICAgICAgICRMYXlvdXRPYmplY3QtPkJsb2NrKAogICAgICAgICAgICBOYW1lID0+ICdDb250ZW50TGFyZ2VDdXN0b21lclVzZXJMaXN0Um93Q3VzdG9tZXJVc2VyVGlja2V0c09wZW4nLAogICAgICAgICAgICBEYXRhID0+IHsKICAgICAgICAgICAgICAgICVQYXJhbSwKICAgICAgICAgICAgICAgIENvdW50ICAgICAgICAgID0+ICRUaWNrZXRDb3VudE9wZW4sCiAgICAgICAgICAgICAgICBDdXN0b21lcktleSAgICA9PiAkQ3VzdG9tZXJLZXksCiAgICAgICAgICAgICAgICBDdXN0b21lcktleVNRTCA9PiAkQ3VzdG9tZXJLZXlTUUwsCiAgICAgICAgICAgIH0sCiAgICAgICAgKTsKCiAgICAgICAgbXkgJFRpY2tldENvdW50Q2xvc2VkID0gJFRpY2tldE9iamVjdC0+VGlja2V0U2VhcmNoKAogICAgICAgICAgICBTdGF0ZVR5cGUgICAgICAgICAgICA9PiAnQ2xvc2VkJywKICAgICAgICAgICAgQ3VzdG9tZXJVc2VyTG9naW5SYXcgPT4gJEN1c3RvbWVyS2V5LAogICAgICAgICAgICBSZXN1bHQgICAgICAgICAgICAgICA9PiAnQ09VTlQnLAogICAgICAgICAgICBQZXJtaXNzaW9uICAgICAgICAgICA9PiAkU2VsZi0+e0NvbmZpZ30tPntQZXJtaXNzaW9ufSwKICAgICAgICAgICAgVXNlcklEICAgICAgICAgICAgICAgPT4gJFNlbGYtPntVc2VySUR9LAogICAgICAgICAgICBDYWNoZVRUTCAgICAgICAgICAgICA9PiAkU2VsZi0+e0NvbmZpZ30tPntDYWNoZVRUTExvY2FsfSAqIDYwLAogICAgICAgICkgfHwgMDsKCiAgICAgICAgJExheW91dE9iamVjdC0+QmxvY2soCiAgICAgICAgICAgIE5hbWUgPT4gJ0NvbnRlbnRMYXJnZUN1c3RvbWVyVXNlckxpc3RSb3dDdXN0b21lclVzZXJUaWNrZXRzQ2xvc2VkJywKICAgICAgICAgICAgRGF0YSA9PiB7CiAgICAgICAgICAgICAgICAlUGFyYW0sCiAgICAgICAgICAgICAgICBDb3VudCAgICAgICAgICA9PiAkVGlja2V0Q291bnRDbG9zZWQsCiAgICAgICAgICAgICAgICBDdXN0b21lcktleSAgICA9PiAkQ3VzdG9tZXJLZXksCiAgICAgICAgICAgICAgICBDdXN0b21lcktleVNRTCA9PiAkQ3VzdG9tZXJLZXlTUUwsCiAgICAgICAgICAgIH0sCiAgICAgICAgKTsKCiAgICAgICAgIyBjaGVjayB0aGUgcGVybWlzc2lvbiBmb3IgdGhlIHBob25lIHRpY2tldCBjcmVhdGlvbgogICAgICAgIGlmICgkTmV3QWdlbnRUaWNrZXRQaG9uZVBlcm1pc3Npb24pIHsKICAgICAgICAgICAgJExheW91dE9iamVjdC0+QmxvY2soCiAgICAgICAgICAgICAgICBOYW1lID0+ICdDb250ZW50TGFyZ2VDdXN0b21lclVzZXJMaXN0TmV3QWdlbnRUaWNrZXRQaG9uZScsCiAgICAgICAgICAgICAgICBEYXRhID0+IHsKICAgICAgICAgICAgICAgICAgICAlUGFyYW0sCiAgICAgICAgICAgICAgICAgICAgQ3VzdG9tZXJLZXkgICAgICAgPT4gJEN1c3RvbWVyS2V5LAogICAgICAgICAgICAgICAgICAgIEN1c3RvbWVyTGlzdEVudHJ5ID0+ICRDdXN0b21lcklEcy0+eyRDdXN0b21lcktleX0sCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICApOwogICAgICAgIH0KCiAgICAgICAgIyBjaGVjayB0aGUgcGVybWlzc2lvbiBmb3IgdGhlIGVtYWlsIHRpY2tldCBjcmVhdGlvbgogICAgICAgIGlmICgkTmV3QWdlbnRUaWNrZXRFbWFpbFBlcm1pc3Npb24pIHsKICAgICAgICAgICAgJExheW91dE9iamVjdC0+QmxvY2soCiAgICAgICAgICAgICAgICBOYW1lID0+ICdDb250ZW50TGFyZ2VDdXN0b21lclVzZXJMaXN0TmV3QWdlbnRUaWNrZXRFbWFpbCcsCiAgICAgICAgICAgICAgICBEYXRhID0+IHsKICAgICAgICAgICAgICAgICAgICAlUGFyYW0sCiAgICAgICAgICAgICAgICAgICAgQ3VzdG9tZXJLZXkgICAgICAgPT4gJEN1c3RvbWVyS2V5LAogICAgICAgICAgICAgICAgICAgIEN1c3RvbWVyTGlzdEVudHJ5ID0+ICRDdXN0b21lcklEcy0+eyRDdXN0b21lcktleX0sCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICApOwogICAgICAgIH0KCiAgICAgICAgaWYgKCAkQ29uZmlnT2JqZWN0LT5HZXQoJ1N3aXRjaFRvQ3VzdG9tZXInKSAmJiAkU2VsZi0+e1N3aXRjaFRvQ3VzdG9tZXJQZXJtaXNzaW9ufSApCiAgICAgICAgewogICAgICAgICAgICAkTGF5b3V0T2JqZWN0LT5CbG9jaygKICAgICAgICAgICAgICAgIE5hbWUgPT4gJ092ZXJ2aWV3UmVzdWx0Um93U3dpdGNoVG9DdXN0b21lcicsCiAgICAgICAgICAgICAgICBEYXRhID0+IHsKICAgICAgICAgICAgICAgICAgICAlUGFyYW0sCiAgICAgICAgICAgICAgICAgICAgQ291bnQgICAgICAgPT4gJFRpY2tldENvdW50Q2xvc2VkLAogICAgICAgICAgICAgICAgICAgIEN1c3RvbWVyS2V5ID0+ICRDdXN0b21lcktleSwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICk7CiAgICAgICAgfQogICAgfQoKICAgICMgc2hvdyAibm9uZSIgaWYgdGhlcmUgYXJlIG5vIGN1c3RvbWVycwogICAgaWYgKCAhJXskQ3VzdG9tZXJJRHN9ICkgewogICAgICAgICRMYXlvdXRPYmplY3QtPkJsb2NrKAogICAgICAgICAgICBOYW1lID0+ICdDb250ZW50TGFyZ2VDdXN0b21lclVzZXJMaXN0Tm9uZScsCiAgICAgICAgICAgIERhdGEgPT4ge30sCiAgICAgICAgKTsKICAgIH0KCiAgICAjIGNoZWNrIGZvciByZWZyZXNoIHRpbWUKICAgIG15ICRSZWZyZXNoID0gJyc7CiAgICBpZiAoICRTZWxmLT57VXNlclJlZnJlc2hUaW1lfSApIHsKICAgICAgICAkUmVmcmVzaCA9IDYwICogJFNlbGYtPntVc2VyUmVmcmVzaFRpbWV9OwogICAgICAgIG15ICROYW1lSFRNTCA9ICRTZWxmLT57TmFtZX07CiAgICAgICAgJE5hbWVIVE1MID1+IHN7LX17X314bXNnOwoKICAgICAgICAjIHNlbmQgZGF0YSB0byBKUwogICAgICAgICRMYXlvdXRPYmplY3QtPkFkZEpTRGF0YSgKICAgICAgICAgICAgS2V5ICAgPT4gJ0N1c3RvbWVyVXNlckxpc3RSZWZyZXNoJywKICAgICAgICAgICAgVmFsdWUgPT4gewogICAgICAgICAgICAgICAgJXsgJFNlbGYtPntDb25maWd9IH0sCiAgICAgICAgICAgICAgICBOYW1lICAgICAgICA9PiAkU2VsZi0+e05hbWV9LAogICAgICAgICAgICAgICAgTmFtZUhUTUwgICAgPT4gJE5hbWVIVE1MLAogICAgICAgICAgICAgICAgUmVmcmVzaFRpbWUgPT4gJFJlZnJlc2gsCiAgICAgICAgICAgICAgICBDdXN0b21lcklEICA9PiAkUGFyYW17Q3VzdG9tZXJJRH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgKTsKICAgIH0KCiAgICBteSAkQ29udGVudCA9ICRMYXlvdXRPYmplY3QtPk91dHB1dCgKICAgICAgICBUZW1wbGF0ZUZpbGUgPT4gJ0FnZW50RGFzaGJvYXJkQ3VzdG9tZXJVc2VyTGlzdCcsCiAgICAgICAgRGF0YSAgICAgICAgID0+IHsKICAgICAgICAgICAgJXsgJFNlbGYtPntDb25maWd9IH0sCiAgICAgICAgICAgIEVkaXRDdXN0b21lclBlcm1pc3Npb24gPT4gJFNlbGYtPntFZGl0Q3VzdG9tZXJQZXJtaXNzaW9ufSwKICAgICAgICAgICAgTmFtZSAgICAgICAgICAgICAgICAgICA9PiAkU2VsZi0+e05hbWV9LAogICAgICAgIH0sCiAgICAgICAgQUpBWCA9PiAkUGFyYW17QUpBWH0sCiAgICApOwoKICAgIHJldHVybiAkQ29udGVudDsKfQoKMTsK</File>
        <File Location="Custom/Kernel/Output/HTML/Statistics/View.pm" Permission="660" Encode="Base64"></File>
        <File Location="Custom/Kernel/System/Console/Command/Admin/CustomerUser/SetPassword.pm" Permission="660" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDIxIE9UUlMgQUcsIGh0dHBzOi8vb3Rycy5jb20vCiMgQ29weXJpZ2h0IChDKSAyMDIxLTIwMjIgWm51bnkgR21iSCwgaHR0cHM6Ly96bnVueS5vcmcvCiMgLS0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQojIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwczovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2dwbC0zLjAudHh0LgojIC0tCgpwYWNrYWdlIEtlcm5lbDo6U3lzdGVtOjpDb25zb2xlOjpDb21tYW5kOjpBZG1pbjo6Q3VzdG9tZXJVc2VyOjpTZXRQYXNzd29yZDsKCnVzZSBzdHJpY3Q7CnVzZSB3YXJuaW5nczsKCnVzZSBwYXJlbnQgcXcoS2VybmVsOjpTeXN0ZW06OkNvbnNvbGU6OkJhc2VDb21tYW5kKTsKCm91ciBAT2JqZWN0RGVwZW5kZW5jaWVzID0gKAogICAgJ0tlcm5lbDo6U3lzdGVtOjpDdXN0b21lclVzZXInLAopOwoKc3ViIENvbmZpZ3VyZSB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICRTZWxmLT5EZXNjcmlwdGlvbignVXBkYXRlIHRoZSBwYXNzd29yZCBmb3IgYSBjdXN0b21lciB1c2VyLicpOwogICAgJFNlbGYtPkFkZEFyZ3VtZW50KAogICAgICAgIE5hbWUgICAgICAgID0+ICd1c2VyJywKICAgICAgICBEZXNjcmlwdGlvbiA9PiAiU3BlY2lmeSB0aGUgdXNlciBsb2dpbiBvZiB0aGUgYWdlbnQvY3VzdG9tZXIgdG8gYmUgdXBkYXRlZC4iLAogICAgICAgIFJlcXVpcmVkICAgID0+IDEsCiAgICAgICAgVmFsdWVSZWdleCAgPT4gcXIvLiovc214LAogICAgKTsKICAgICRTZWxmLT5BZGRBcmd1bWVudCgKICAgICAgICBOYW1lICAgICAgICA9PiAncGFzc3dvcmQnLAogICAgICAgIERlc2NyaXB0aW9uID0+ICJTZXQgYSBuZXcgcGFzc3dvcmQgZm9yIHRoZSB1c2VyIChhIHBhc3N3b3JkIHdpbGwgYmUgZ2VuZXJhdGVkIG90aGVyd2lzZSkuIiwKICAgICAgICBSZXF1aXJlZCAgICA9PiAwLAogICAgICAgIFZhbHVlUmVnZXggID0+IHFyLy4qL3NteCwKICAgICk7CgogICAgcmV0dXJuOwp9CgpzdWIgUnVuIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgbXkgJExvZ2luID0gJFNlbGYtPkdldEFyZ3VtZW50KCd1c2VyJyk7CgogICAgJFNlbGYtPlByaW50KCI8eWVsbG93PlNldHRpbmcgcGFzc3dvcmQgZm9yIHVzZXIgJExvZ2luLi4uPC95ZWxsb3c+XG4iKTsKCiAgICBteSAkQ3VzdG9tZXJVc2VyT2JqZWN0ID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkN1c3RvbWVyVXNlcicpOwogICAgbXkgJUN1c3RvbWVyVXNlckxpc3QgICA9ICRDdXN0b21lclVzZXJPYmplY3QtPkN1c3RvbWVyU2VhcmNoKAogICAgICAgIFVzZXJMb2dpbiA9PiAkTG9naW4sCiAgICAgICAgVXNlcklEID0+IDEsCiAgICApOwoKICAgIGlmICggIXNjYWxhciAlQ3VzdG9tZXJVc2VyTGlzdCApIHsKICAgICAgICAkU2VsZi0+UHJpbnRFcnJvcigiTm8gY3VzdG9tZXIgdXNlciBmb3VuZCB3aXRoIGxvZ2luICckTG9naW4nIVxuIik7CiAgICAgICAgcmV0dXJuICRTZWxmLT5FeGl0Q29kZUVycm9yKCk7CiAgICB9CgogICAgIyBpZiBubyBwYXNzd29yZCBoYXMgYmVlbiBwcm92aWRlZCwgZ2VuZXJhdGUgb25lCiAgICBteSAkUGFzc3dvcmQgPSAkU2VsZi0+R2V0QXJndW1lbnQoJ3Bhc3N3b3JkJyk7CiAgICBpZiAoICEkUGFzc3dvcmQgKSB7CiAgICAgICAgJFBhc3N3b3JkID0gJEN1c3RvbWVyVXNlck9iamVjdC0+R2VuZXJhdGVSYW5kb21QYXNzd29yZCggU2l6ZSA9PiAxMiApOwogICAgICAgICRTZWxmLT5QcmludCgiPHllbGxvdz5HZW5lcmF0ZWQgcGFzc3dvcmQgJyRQYXNzd29yZCcuPC95ZWxsb3c+XG4iKTsKICAgIH0KCiAgICBteSAkUmVzdWx0ID0gJEN1c3RvbWVyVXNlck9iamVjdC0+U2V0UGFzc3dvcmQoCiAgICAgICAgVXNlckxvZ2luID0+ICRMb2dpbiwKICAgICAgICBQVyAgICAgICAgPT4gJFBhc3N3b3JkLAogICAgKTsKCiAgICBpZiAoICEkUmVzdWx0ICkgewogICAgICAgICRTZWxmLT5QcmludEVycm9yKCJGYWlsZWQgdG8gc2V0IHBhc3N3b3JkIVxuIik7CiAgICAgICAgcmV0dXJuICRTZWxmLT5FeGl0Q29kZUVycm9yKCk7CiAgICB9CgogICAgJFNlbGYtPlByaW50KCI8Z3JlZW4+U3VjY2Vzc2Z1bGx5IHNldCBwYXNzd29yZCBmb3IgY3VzdG9tZXIgdXNlciAnJExvZ2luJy48L2dyZWVuPlxuIik7CiAgICByZXR1cm4gJFNlbGYtPkV4aXRDb2RlT2soKTsKfQoKMTsK</File>
        <File Location="Custom/Kernel/System/Console/Command/Maint/SMIME/CustomerCertificate/Fetch.pm" Permission="660" Encode="Base64"></File>
        <File Location="Custom/Kernel/System/Console/Command/Maint/SMIME/CustomerCertificate/Renew.pm" Permission="660" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDIxIE9UUlMgQUcsIGh0dHBzOi8vb3Rycy5jb20vCiMgQ29weXJpZ2h0IChDKSAyMDIxLTIwMjIgWm51bnkgR21iSCwgaHR0cHM6Ly96bnVueS5vcmcvCiMgLS0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQojIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwczovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2dwbC0zLjAudHh0LgojIC0tCgpwYWNrYWdlIEtlcm5lbDo6U3lzdGVtOjpDb25zb2xlOjpDb21tYW5kOjpNYWludDo6U01JTUU6OkN1c3RvbWVyQ2VydGlmaWNhdGU6OlJlbmV3OwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwoKdXNlIHBhcmVudCBxdyhLZXJuZWw6OlN5c3RlbTo6Q29uc29sZTo6QmFzZUNvbW1hbmQpOwoKb3VyIEBPYmplY3REZXBlbmRlbmNpZXMgPSAoCiAgICAnS2VybmVsOjpDb25maWcnLAogICAgJ0tlcm5lbDo6U3lzdGVtOjpDaGVja0l0ZW0nLAogICAgJ0tlcm5lbDo6U3lzdGVtOjpDcnlwdDo6U01JTUUnLAogICAgJ0tlcm5lbDo6U3lzdGVtOjpDdXN0b21lclVzZXInLAopOwoKc3ViIENvbmZpZ3VyZSB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICRTZWxmLT5EZXNjcmlwdGlvbignUmVuZXcgZXhpc3RpbmcgUy9NSU1FIGNlcnRpZmljYXRlcyBmcm9tIGN1c3RvbWVyIGJhY2tlbmRzLicpOwoKICAgIHJldHVybjsKfQoKc3ViIFJ1biB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICRTZWxmLT5QcmludCgiPHllbGxvdz5SZW5ld2luZyBleGlzdGluZyBjdXN0b21lciBTL01JTUUgY2VydGlmaWNhdGVzLi4uPC95ZWxsb3c+XG4iKTsKCiAgICBteSAkQ29uZmlnT2JqZWN0ID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpDb25maWcnKTsKCiAgICBteSAkU3RvcEV4ZWN1dGlvbjsKICAgIGlmICggISRDb25maWdPYmplY3QtPkdldCgnU01JTUUnKSApIHsKICAgICAgICAkU2VsZi0+UHJpbnQoIidTL01JTUUnIGlzIG5vdCBhY3RpdmF0ZWQgaW4gU3lzQ29uZmlnLCBjYW4ndCBjb250aW51ZSFcbiIpOwogICAgICAgICRTdG9wRXhlY3V0aW9uID0gMTsKICAgIH0KICAgIGVsc2lmICggISRDb25maWdPYmplY3QtPkdldCgnU01JTUU6OkZldGNoRnJvbUN1c3RvbWVyJykgKSB7CiAgICAgICAgJFNlbGYtPlByaW50KCInU01JTUU6OkZldGNoRnJvbUN1c3RvbWVyJyBpcyBub3QgYWN0aXZhdGVkIGluIFN5c0NvbmZpZywgY2FuJ3QgY29udGludWUhXG4iKTsKICAgICAgICAkU3RvcEV4ZWN1dGlvbiA9IDE7CiAgICB9CgogICAgaWYgKCRTdG9wRXhlY3V0aW9uKSB7CiAgICAgICAgJFNlbGYtPlByaW50KCJcbjxncmVlbj5Eb25lLjwvZ3JlZW4+XG4iKTsKICAgICAgICByZXR1cm4gJFNlbGYtPkV4aXRDb2RlT2soKTsKICAgIH0KCiAgICBteSAkQ3J5cHRPYmplY3QgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6Q3J5cHQ6OlNNSU1FJyk7CiAgICBpZiAoICEkQ3J5cHRPYmplY3QgKSB7CiAgICAgICAgJFNlbGYtPlByaW50RXJyb3IoIlMvTUlNRSBlbnZpcm9ubWVudCBpcyBub3Qgd29ya2luZyFcbiIpOwogICAgICAgICRTZWxmLT5QcmludCgiPHJlZD5GYWlsLjwvcmVkPlxuIik7CiAgICAgICAgcmV0dXJuICRTZWxmLT5FeGl0Q29kZUVycm9yKCk7CiAgICB9CgogICAgbXkgKCAkTGlzdE9mQ2VydGlmaWNhdGVzLCAkRW1haWxzRnJvbUNlcnRpZmljYXRlcyApID0gJFNlbGYtPl9HZXRDdXJyZW50RGF0YSgpOwoKICAgIG15ICRDdXN0b21lclVzZXJPYmplY3QgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6Q3VzdG9tZXJVc2VyJyk7CgogICAgRU1BSUw6CiAgICBmb3IgbXkgJEVtYWlsICggc29ydCBrZXlzICV7JEVtYWlsc0Zyb21DZXJ0aWZpY2F0ZXN9ICkgewoKICAgICAgICBteSAlVXNlckxpc3QgPSAkQ3VzdG9tZXJVc2VyT2JqZWN0LT5DdXN0b21lclNlYXJjaCgKICAgICAgICAgICAgUG9zdE1hc3RlclNlYXJjaCA9PiAkRW1haWwsCiAgICAgICAgICAgIFVzZXJJRCAgICAgICAgICAgPT4gJFNlbGYtPntVc2VySUR9LAogICAgICAgICAgICBMaW1pdCAgICAgICAgICAgID0+IDEsCiAgICAgICAgKTsKCiAgICAgICAgbmV4dCBFTUFJTCBpZiAhJVVzZXJMaXN0OwoKICAgICAgICBteSBAVXNlckxvZ2lucyA9IHNvcnQga2V5cyAlVXNlckxpc3Q7CgogICAgICAgIG15ICVDdXN0b21lclVzZXIgPSAkQ3VzdG9tZXJVc2VyT2JqZWN0LT5DdXN0b21lclVzZXJEYXRhR2V0KAogICAgICAgICAgICBVc2VyID0+ICRVc2VyTG9naW5zWzBdLAogICAgICAgICk7CgogICAgICAgIG5leHQgRU1BSUwgaWYgISVDdXN0b21lclVzZXI7CiAgICAgICAgbmV4dCBFTUFJTCBpZiAhJEN1c3RvbWVyVXNlcntVc2VyU01JTUVDZXJ0aWZpY2F0ZX07CiAgICAgICAgbmV4dCBFTUFJTCBpZiAkTGlzdE9mQ2VydGlmaWNhdGVzLT57ICRDdXN0b21lclVzZXJ7VXNlclNNSU1FQ2VydGlmaWNhdGV9IH07CgogICAgICAgIG15IEBGaWxlcyA9ICRDcnlwdE9iamVjdC0+RmV0Y2hGcm9tQ3VzdG9tZXIoCiAgICAgICAgICAgIFNlYXJjaCA9PiAkRW1haWwsCiAgICAgICAgKTsKCiAgICAgICAgZm9yIG15ICRGaWxlbmFtZSAoQEZpbGVzKSB7CiAgICAgICAgICAgIG15ICRDZXJ0aWZpY2F0ZSA9ICRDcnlwdE9iamVjdC0+Q2VydGlmaWNhdGVHZXQoCiAgICAgICAgICAgICAgICBGaWxlbmFtZSA9PiAkRmlsZW5hbWUsCiAgICAgICAgICAgICk7CgogICAgICAgICAgICBteSAlQ2VydGlmaWNhdGVBdHRyaWJ1dGVzID0gJENyeXB0T2JqZWN0LT5DZXJ0aWZpY2F0ZUF0dHJpYnV0ZXMoCiAgICAgICAgICAgICAgICBDZXJ0aWZpY2F0ZSA9PiAkQ2VydGlmaWNhdGUsCiAgICAgICAgICAgICAgICBGaWxlbmFtZSAgICA9PiAkRmlsZW5hbWUsCiAgICAgICAgICAgICk7CgogICAgICAgICAgICAkU2VsZi0+UHJpbnQoIiAgRm91bmQgbmV3IFMvTUlNRSBjZXJ0aWZpY2F0ZXMgZm9yIDx5ZWxsb3c+JFVzZXJMb2dpbnNbMF08L3llbGxvdz4gLi4uXG4iKTsKICAgICAgICAgICAgJFNlbGYtPlByaW50KCIgICAgQWRkZWQgY2VydGlmaWNhdGUgJENlcnRpZmljYXRlQXR0cmlidXRlc3tGaW5nZXJwcmludH0gKDx5ZWxsb3c+JEZpbGVuYW1lPC95ZWxsb3c+KVxuIik7CiAgICAgICAgfQogICAgfQoKICAgICRTZWxmLT5QcmludCgiXG48Z3JlZW4+RG9uZS48L2dyZWVuPlxuIik7CiAgICByZXR1cm4gJFNlbGYtPkV4aXRDb2RlT2soKTsKfQoKc3ViIF9HZXRDdXJyZW50RGF0YSB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICRDcnlwdE9iamVjdCA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpDcnlwdDo6U01JTUUnKTsKCiAgICAjIEdldCBhbGwgZXhpc3RpbmcgY2VydGlmaWNhdGVzLgogICAgbXkgQENlcnRMaXN0ID0gJENyeXB0T2JqZWN0LT5DZXJ0aWZpY2F0ZUxpc3QoKTsKCiAgICBteSAlTGlzdE9mQ2VydGlmaWNhdGVzOwogICAgbXkgJUVtYWlsc0Zyb21DZXJ0aWZpY2F0ZXM7CgogICAgIyBDaGVjayBhbGwgZXhpc3RpbmcgY2VydGlmaWNhdGVzIGZvciBlbWFpbHMuCiAgICBDRVJUSUZJQ0FURToKICAgIGZvciBteSAkQ2VydG5hbWUgKEBDZXJ0TGlzdCkgewoKICAgICAgICBteSAkQ2VydGlmaWNhdGVTdHJpbmcgPSAkQ3J5cHRPYmplY3QtPkNlcnRpZmljYXRlR2V0KAogICAgICAgICAgICBGaWxlbmFtZSA9PiAkQ2VydG5hbWUsCiAgICAgICAgKTsKCiAgICAgICAgbXkgJUNlcnRpZmljYXRlQXR0cmlidXRlcyA9ICRDcnlwdE9iamVjdC0+Q2VydGlmaWNhdGVBdHRyaWJ1dGVzKAogICAgICAgICAgICBDZXJ0aWZpY2F0ZSA9PiAkQ2VydGlmaWNhdGVTdHJpbmcsCiAgICAgICAgICAgIEZpbGVuYW1lICAgID0+ICRDZXJ0bmFtZSwKICAgICAgICApOwoKICAgICAgICAjIGFsbCBTTUlNRSBjZXJ0aWZpY2F0ZXMgbXVzdCBoYXZlIGFuIEVtYWlsIEF0dHJpYnV0ZQogICAgICAgIG5leHQgQ0VSVElGSUNBVEUgaWYgISRDZXJ0aWZpY2F0ZUF0dHJpYnV0ZXN7RW1haWx9OwoKICAgICAgICBteSAkVmFsaWRFbWFpbCA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpDaGVja0l0ZW0nKS0+Q2hlY2tFbWFpbCgKICAgICAgICAgICAgQWRkcmVzcyA9PiAkQ2VydGlmaWNhdGVBdHRyaWJ1dGVze0VtYWlsfSwKICAgICAgICApOwoKICAgICAgICBuZXh0IENFUlRJRklDQVRFIGlmICEkVmFsaWRFbWFpbDsKCiAgICAgICAgIyBSZW1lbWJlciBjZXJ0aWZpY2F0ZSAoZG9uJ3QgbmVlZCB0byBiZSBhZGRlZCBhZ2FpbikuCiAgICAgICAgJExpc3RPZkNlcnRpZmljYXRlc3skQ2VydGlmaWNhdGVTdHJpbmd9ID0gJENlcnRpZmljYXRlU3RyaW5nOwoKICAgICAgICAjIFNhdmUgZW1haWwgZm9yIGNoZWNraW5nIGZvciBuZXcgY2VydGlmaWNhdGUuCiAgICAgICAgJEVtYWlsc0Zyb21DZXJ0aWZpY2F0ZXN7ICRDZXJ0aWZpY2F0ZUF0dHJpYnV0ZXN7RW1haWx9IH0gPSAxOwogICAgfQoKICAgIHJldHVybiAoIFwlTGlzdE9mQ2VydGlmaWNhdGVzLCBcJUVtYWlsc0Zyb21DZXJ0aWZpY2F0ZXMgKTsKfQoKMTsK</File>
        <File Location="Custom/Kernel/System/Console/Command/Maint/SMIME/FetchFromCustomer.pm" Permission="660" Encode="Base64"></File>
        <File Location="Custom/Kernel/System/Crypt/SMIME.pm" Permission="660" Encode="Base64"></File>
        <File Location="Custom/Kernel/System/CustomerCompany/DB.pm" Permission="660" Encode="Base64"></File>
        <File Location="Custom/Kernel/System/CustomerCompany/Event/CustomerUserUpdate.pm" Permission="660" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDIxIE9UUlMgQUcsIGh0dHBzOi8vb3Rycy5jb20vCiMgQ29weXJpZ2h0IChDKSAyMDIxLTIwMjIgWm51bnkgR21iSCwgaHR0cHM6Ly96bnVueS5vcmcvCiMgLS0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQojIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwczovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2dwbC0zLjAudHh0LgojIC0tCgpwYWNrYWdlIEtlcm5lbDo6U3lzdGVtOjpDdXN0b21lckNvbXBhbnk6OkV2ZW50OjpDdXN0b21lclVzZXJVcGRhdGU7Cgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7CgpvdXIgQE9iamVjdERlcGVuZGVuY2llcyA9ICgKICAgICdLZXJuZWw6OlN5c3RlbTo6Q3VzdG9tZXJVc2VyJywKICAgICdLZXJuZWw6OlN5c3RlbTo6TG9nJywKKTsKCnN1YiBuZXcgewogICAgbXkgKCAkVHlwZSwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGFsbG9jYXRlIG5ldyBoYXNoIGZvciBvYmplY3QKICAgIG15ICRTZWxmID0ge307CiAgICBibGVzcyggJFNlbGYsICRUeXBlICk7CgogICAgcmV0dXJuICRTZWxmOwp9CgpzdWIgUnVuIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgIyBjaGVjayBuZWVkZWQgc3R1ZmYKICAgIGZvciBteSAkTmVlZGVkIChxdyggRGF0YSBFdmVudCBDb25maWcgVXNlcklEICkpIHsKICAgICAgICBpZiAoICEkUGFyYW17JE5lZWRlZH0gKSB7CiAgICAgICAgICAgICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpMb2cnKS0+TG9nKAogICAgICAgICAgICAgICAgUHJpb3JpdHkgPT4gJ2Vycm9yJywKICAgICAgICAgICAgICAgIE1lc3NhZ2UgID0+ICJOZWVkICROZWVkZWQhIgogICAgICAgICAgICApOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgfQogICAgZm9yIG15ICROZWVkZWQgKHF3KCBDdXN0b21lcklEIE9sZEN1c3RvbWVySUQgKSkgewogICAgICAgIGlmICggISRQYXJhbXtEYXRhfS0+eyROZWVkZWR9ICkgewogICAgICAgICAgICAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6TG9nJyktPkxvZygKICAgICAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgICAgICBNZXNzYWdlICA9PiAiTmVlZCAkTmVlZGVkIGluIERhdGEhIgogICAgICAgICAgICApOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgfQoKICAgIHJldHVybiAxIGlmICRQYXJhbXtEYXRhfS0+e0N1c3RvbWVySUR9IGVxICRQYXJhbXtEYXRhfS0+e09sZEN1c3RvbWVySUR9OwoKICAgICMgZ2V0IGN1c3RvbWVyIHVzZXIgb2JqZWN0CiAgICBteSAkQ3VzdG9tZXJVc2VyT2JqZWN0ID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkN1c3RvbWVyVXNlcicpOwoKICAgIG15ICVDdXN0b21lclVzZXJzID0gJEN1c3RvbWVyVXNlck9iamVjdC0+Q3VzdG9tZXJTZWFyY2goCiAgICAgICAgQ3VzdG9tZXJJRFJhdyA9PiAkUGFyYW17RGF0YX0tPntPbGRDdXN0b21lcklEfSwKICAgICAgICBVc2VySUQgPT4gJFNlbGYtPntVc2VySUR9LAogICAgICAgIFZhbGlkICAgICAgICAgPT4gMCwKICAgICk7CgogICAgZm9yIG15ICRDdXN0b21lclVzZXJMb2dpbiAoIHNvcnQga2V5cyAlQ3VzdG9tZXJVc2VycyApIHsKICAgICAgICBteSAlQ3VzdG9tZXJEYXRhID0gJEN1c3RvbWVyVXNlck9iamVjdC0+Q3VzdG9tZXJVc2VyRGF0YUdldCgKICAgICAgICAgICAgVXNlciA9PiAkQ3VzdG9tZXJVc2VyTG9naW4sCiAgICAgICAgKTsKCiAgICAgICAgIyB3ZSBkbyBub3QgbmVlZCB0byAnY2hhbmdlJyB0aGUgcGFzc3dvcmQgKHRoaXMgd291bGQgcmUtaGFzaCBpdCEpCiAgICAgICAgZGVsZXRlICRDdXN0b21lckRhdGF7VXNlclBhc3N3b3JkfTsKICAgICAgICAkQ3VzdG9tZXJVc2VyT2JqZWN0LT5DdXN0b21lclVzZXJVcGRhdGUoCiAgICAgICAgICAgICVDdXN0b21lckRhdGEsCiAgICAgICAgICAgIElEICAgICAgICAgICAgID0+ICRDdXN0b21lclVzZXJMb2dpbiwKICAgICAgICAgICAgVXNlckN1c3RvbWVySUQgPT4gJFBhcmFte0RhdGF9LT57Q3VzdG9tZXJJRH0sCiAgICAgICAgICAgIFVzZXJJRCAgICAgICAgID0+ICRQYXJhbXtVc2VySUR9LAogICAgICAgICk7CiAgICB9CgogICAgcmV0dXJuIDE7Cn0KCjE7Cg==</File>
        <File Location="Custom/Kernel/System/CustomerGroup.pm" Permission="660" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAwMS0yMDIxIE9UUlMgQUcsIGh0dHBzOi8vb3Rycy5jb20vCiMgQ29weXJpZ2h0IChDKSAyMDIxLTIwMjIgWm51bnkgR21iSCwgaHR0cHM6Ly96bnVueS5vcmcvCiMgLS0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQojIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwczovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2dwbC0zLjAudHh0LgojIC0tCgpwYWNrYWdlIEtlcm5lbDo6U3lzdGVtOjpDdXN0b21lckdyb3VwOwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwoKdXNlIEtlcm5lbDo6U3lzdGVtOjpWYXJpYWJsZUNoZWNrIHF3KDphbGwpOwoKb3VyIEBPYmplY3REZXBlbmRlbmNpZXMgPSAoCiAgICAnS2VybmVsOjpDb25maWcnLAogICAgJ0tlcm5lbDo6U3lzdGVtOjpDYWNoZScsCiAgICAnS2VybmVsOjpTeXN0ZW06OkN1c3RvbWVyQ29tcGFueScsCiAgICAnS2VybmVsOjpTeXN0ZW06OkN1c3RvbWVyVXNlcicsCiAgICAnS2VybmVsOjpTeXN0ZW06OkRCJywKICAgICdLZXJuZWw6OlN5c3RlbTo6R3JvdXAnLAogICAgJ0tlcm5lbDo6U3lzdGVtOjpMb2cnLAogICAgJ0tlcm5lbDo6U3lzdGVtOjpWYWxpZCcsCik7Cgo9aGVhZDEgTkFNRQoKS2VybmVsOjpTeXN0ZW06OkN1c3RvbWVyR3JvdXAgLSBjdXN0b21lciBncm91cCBsaWIKCj1oZWFkMSBERVNDUklQVElPTgoKQWxsIGN1c3RvbWVyIGdyb3VwIGZ1bmN0aW9ucy4gRS4gZy4gdG8gYWRkIGdyb3VwcyBvciB0byBnZXQgYSBtZW1iZXIgbGlzdCBvZiBhIGdyb3VwLgoKPWhlYWQxIFBVQkxJQyBJTlRFUkZBQ0UKCj1oZWFkMiBuZXcoKQoKRG9uJ3QgdXNlIHRoZSBjb25zdHJ1Y3RvciBkaXJlY3RseSwgdXNlIHRoZSBPYmplY3RNYW5hZ2VyIGluc3RlYWQ6CgogICAgbXkgJEN1c3RvbWVyR3JvdXBPYmplY3QgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6Q3VzdG9tZXJHcm91cCcpOwoKPWN1dAoKc3ViIG5ldyB7CiAgICBteSAoICRUeXBlLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgYWxsb2NhdGUgbmV3IGhhc2ggZm9yIG9iamVjdAogICAgbXkgJFNlbGYgPSB7fTsKICAgIGJsZXNzKCAkU2VsZiwgJFR5cGUgKTsKCiAgICAkU2VsZi0+e0NhY2hlVHlwZX0gPSAnQ3VzdG9tZXJHcm91cCc7CiAgICAkU2VsZi0+e0NhY2hlVFRMfSAgPSA2MCAqIDYwICogMjQgKiAyMDsKCiAgICByZXR1cm4gJFNlbGY7Cn0KCj1oZWFkMiBHcm91cE1lbWJlckFkZCgpCgp0byBhZGQgYSBtZW1iZXIgdG8gYSBncm91cAoKICAgIFBlcm1pc3Npb246IHJvLG1vdmVfaW50byxwcmlvcml0eSxjcmVhdGUscncKCiAgICBteSAkU3VjY2VzcyA9ICRDdXN0b21lckdyb3VwT2JqZWN0LT5Hcm91cE1lbWJlckFkZCgKICAgICAgICBHSUQgPT4gMTIsCiAgICAgICAgVUlEID0+IDYsCiAgICAgICAgUGVybWlzc2lvbiA9PiB7CiAgICAgICAgICAgIHJvICAgICAgICA9PiAxLAogICAgICAgICAgICBtb3ZlX2ludG8gPT4gMSwKICAgICAgICAgICAgY3JlYXRlICAgID0+IDEsCiAgICAgICAgICAgIG93bmVyICAgICA9PiAxLAogICAgICAgICAgICBwcmlvcml0eSAgPT4gMCwKICAgICAgICAgICAgcncgICAgICAgID0+IDAsCiAgICAgICAgfSwKICAgICAgICBVc2VySUQgPT4gMTIzLAogICAgKTsKCj1jdXQKCnN1YiBHcm91cE1lbWJlckFkZCB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgY2hlY2sgbmVlZGVkIHN0dWZmCiAgICBmb3IgbXkgJE5lZWRlZCAocXcoVUlEIEdJRCBVc2VySUQgUGVybWlzc2lvbikpIHsKICAgICAgICBpZiAoICEkUGFyYW17JE5lZWRlZH0gKSB7CiAgICAgICAgICAgICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpMb2cnKS0+TG9nKAogICAgICAgICAgICAgICAgUHJpb3JpdHkgPT4gJ2Vycm9yJywKICAgICAgICAgICAgICAgIE1lc3NhZ2UgID0+ICJOZWVkICROZWVkZWQhIiwKICAgICAgICAgICAgKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgIH0KCiAgICAjIGNoZWNrIHJ3IHJ1bGUgKHNldCBvbmx5IHJ3IGFuZCByZW1vdmUgcmVzdCwgYmVjYXVzZSBpdCdzIGluY2x1ZGluZyBhbGwgaW4gcncpCiAgICBpZiAoICRQYXJhbXtQZXJtaXNzaW9ufS0+e3J3fSApIHsKICAgICAgICAkUGFyYW17UGVybWlzc2lvbn0gPSB7IHJ3ID0+IDEgfTsKICAgIH0KCiAgICAjIGdldCBkYXRhYmFzZSBvYmplY3QKICAgIG15ICREQk9iamVjdCA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpEQicpOwoKICAgICMgdXBkYXRlIHBlcm1pc3Npb24KICAgIFRZUEU6CiAgICBmb3IgbXkgJFR5cGUgKCBzb3J0IGtleXMgJXsgJFBhcmFte1Blcm1pc3Npb259IH0gKSB7CgogICAgICAgICMgZGVsZXRlIGV4aXN0aW5nIHBlcm1pc3Npb24KICAgICAgICAkREJPYmplY3QtPkRvKAogICAgICAgICAgICBTUUwgPT4gJ0RFTEVURSBGUk9NIGdyb3VwX2N1c3RvbWVyX3VzZXIgV0hFUkUgJwogICAgICAgICAgICAgICAgLiAnIGdyb3VwX2lkID0gPyBBTkQgdXNlcl9pZCA9ID8gQU5EIHBlcm1pc3Npb25fa2V5ID0gPycsCiAgICAgICAgICAgIEJpbmQgPT4gWyBcJFBhcmFte0dJRH0sIFwkUGFyYW17VUlEfSwgXCRUeXBlIF0sCiAgICAgICAgKTsKCiAgICAgICAgIyBkZWJ1ZwogICAgICAgIGlmICggJFNlbGYtPntEZWJ1Z30gKSB7CiAgICAgICAgICAgICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpMb2cnKS0+TG9nKAogICAgICAgICAgICAgICAgUHJpb3JpdHkgPT4gJ25vdGljZScsCiAgICAgICAgICAgICAgICBNZXNzYWdlID0+CiAgICAgICAgICAgICAgICAgICAgIkFkZCBVSUQ6JFBhcmFte1VJRH0gdG8gR0lEOiRQYXJhbXtHSUR9LCAkVHlwZTokUGFyYW17UGVybWlzc2lvbn0tPnskVHlwZX0hIiwKICAgICAgICAgICAgKTsKICAgICAgICB9CgogICAgICAgICMgaW5zZXJ0IG5ldyBwZXJtaXNzaW9uIChpZiBuZWVkZWQpCiAgICAgICAgbmV4dCBUWVBFIGlmICEkUGFyYW17UGVybWlzc2lvbn0tPnskVHlwZX07CgogICAgICAgICREQk9iamVjdC0+RG8oCiAgICAgICAgICAgIFNRTCA9PiAnSU5TRVJUIElOVE8gZ3JvdXBfY3VzdG9tZXJfdXNlciAnCiAgICAgICAgICAgICAgICAuICcodXNlcl9pZCwgZ3JvdXBfaWQsIHBlcm1pc3Npb25fa2V5LCBwZXJtaXNzaW9uX3ZhbHVlLCAnCiAgICAgICAgICAgICAgICAuICdjcmVhdGVfdGltZSwgY3JlYXRlX2J5LCBjaGFuZ2VfdGltZSwgY2hhbmdlX2J5KSAnCiAgICAgICAgICAgICAgICAuICdWQUxVRVMgKD8sID8sID8sID8sIGN1cnJlbnRfdGltZXN0YW1wLCA/LCBjdXJyZW50X3RpbWVzdGFtcCwgPyknLAogICAgICAgICAgICBCaW5kID0+IFsKICAgICAgICAgICAgICAgIFwkUGFyYW17VUlEfSwgXCRQYXJhbXtHSUR9LCBcJFR5cGUsIFwkUGFyYW17UGVybWlzc2lvbn0tPnskVHlwZX0sIFwkUGFyYW17VXNlcklEfSwKICAgICAgICAgICAgICAgIFwkUGFyYW17VXNlcklEfSwKICAgICAgICAgICAgXSwKICAgICAgICApOwogICAgfQoKICAgICMgZGVsZXRlIGNhY2hlCiAgICAjIHJlbW92ZSBjb21wbGV0ZSBDdXN0b21lckdyb3VwIGNhY2hlIGJlY2F1c2UKICAgICMgICBHcm91cE1lbWJlckxpc3QoKSBjYWNoZSBpcyBDdXN0b21lclVzZXJJRCBiYXNlZAogICAgJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkNhY2hlJyktPkNsZWFuVXAoCiAgICAgICAgVHlwZSA9PiAkU2VsZi0+e0NhY2hlVHlwZX0sCiAgICApOwoKICAgIHJldHVybiAxOwp9Cgo9aGVhZDIgR3JvdXBNZW1iZXJMaXN0KCkKCkdldCB1c2VycyBvZiB0aGUgZ2l2ZW4gZ3JvdXAuCgogICAgbXkgJVVzZXJzID0gJEN1c3RvbWVyR3JvdXBPYmplY3QtPkdyb3VwTWVtYmVyTGlzdCgKICAgICAgICBHcm91cElEICAgICAgICA9PiAnMTIzJywKICAgICAgICBUeXBlICAgICAgICAgICA9PiAnbW92ZV9pbnRvJywgIyByb3xtb3ZlX2ludG98cHJpb3JpdHl8Y3JlYXRlfHJ3CiAgICAgICAgUmVzdWx0ICAgICAgICAgPT4gJ0hBU0gnLCAgICAgICMgcmV0dXJuIGhhc2ggb2YgdXNlciBpZCA9PiB1c2VyIG5hbWUgZW50cmllcwogICAgICAgIFJhd1Blcm1pc3Npb25zID0+IDAsICAgICAgICAgICAjIDAgKHJldHVybiBpbmhlcml0ZWQgcGVybWlzc2lvbnMgZnJvbSBDdXN0b21lckNvbXBhbnkpLCBkZWZhdWx0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgMSAocmV0dXJuIG9ubHkgZGlyZWN0IHBlcm1pc3Npb25zKQogICAgKTsKCm9yCgogICAgbXkgQFVzZXJJRHMgPSAkQ3VzdG9tZXJHcm91cE9iamVjdC0+R3JvdXBNZW1iZXJMaXN0KAogICAgICAgIEdyb3VwSUQgICAgICAgID0+ICcxMjMnLAogICAgICAgIFR5cGUgICAgICAgICAgID0+ICdtb3ZlX2ludG8nLCAjIHJvfG1vdmVfaW50b3xwcmlvcml0eXxjcmVhdGV8cncKICAgICAgICBSZXN1bHQgICAgICAgICA9PiAnSUQnLCAgICAgICAgIyByZXR1cm4gYXJyYXkgb2YgdXNlciBpZHMKICAgICAgICBSYXdQZXJtaXNzaW9ucyA9PiAwLCAgICAgICAgICAgIyAwIChyZXR1cm4gaW5oZXJpdGVkIHBlcm1pc3Npb25zIGZyb20gQ3VzdG9tZXJDb21wYW55KSwgZGVmYXVsdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIDEgKHJldHVybiBvbmx5IGRpcmVjdCBwZXJtaXNzaW9ucykKICAgICk7CgpvcgoKICAgIG15IEBVc2VyTmFtZXMgPSAkQ3VzdG9tZXJHcm91cE9iamVjdC0+R3JvdXBNZW1iZXJMaXN0KAogICAgICAgIEdyb3VwSUQgICAgICAgID0+ICcxMjMnLAogICAgICAgIFR5cGUgICAgICAgICAgID0+ICdtb3ZlX2ludG8nLCAjIHJvfG1vdmVfaW50b3xwcmlvcml0eXxjcmVhdGV8cncKICAgICAgICBSZXN1bHQgICAgICAgICA9PiAnTmFtZScsICAgICAgICAjIHJldHVybiBhcnJheSBvZiB1c2VyIG5hbWVzCiAgICAgICAgUmF3UGVybWlzc2lvbnMgPT4gMCwgICAgICAgICAgICMgMCAocmV0dXJuIGluaGVyaXRlZCBwZXJtaXNzaW9ucyBmcm9tIEN1c3RvbWVyQ29tcGFueSksIGRlZmF1bHQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyAxIChyZXR1cm4gb25seSBkaXJlY3QgcGVybWlzc2lvbnMpCiAgICApOwoKR2V0IGdyb3VwcyBvZiBnaXZlbiB1c2VyLgoKICAgIG15ICVHcm91cHMgPSAkQ3VzdG9tZXJHcm91cE9iamVjdC0+R3JvdXBNZW1iZXJMaXN0KAogICAgICAgIFVzZXJJRCAgICAgICAgID0+ICcxMjMnLAogICAgICAgIFR5cGUgICAgICAgICAgID0+ICdtb3ZlX2ludG8nLCAjIHJvfG1vdmVfaW50b3xwcmlvcml0eXxjcmVhdGV8cncKICAgICAgICBSZXN1bHQgICAgICAgICA9PiAnSEFTSCcsICAgICAgIyByZXR1cm4gaGFzaCBvZiBncm91cCBpZCA9PiBncm91cCBuYW1lIGVudHJpZXMKICAgICAgICBSYXdQZXJtaXNzaW9ucyA9PiAwLCAgICAgICAgICAgIyAwIChyZXR1cm4gaW5oZXJpdGVkIHBlcm1pc3Npb25zIGZyb20gQ3VzdG9tZXJDb21wYW55KSwgZGVmYXVsdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIDEgKHJldHVybiBvbmx5IGRpcmVjdCBwZXJtaXNzaW9ucykKICAgICk7CgpvcgoKICAgIG15IEBHcm91cElEcyA9ICRDdXN0b21lckdyb3VwT2JqZWN0LT5Hcm91cE1lbWJlckxpc3QoCiAgICAgICAgVXNlcklEICAgICAgICAgPT4gJzEyMycsCiAgICAgICAgVHlwZSAgICAgICAgICAgPT4gJ21vdmVfaW50bycsICMgcm98bW92ZV9pbnRvfHByaW9yaXR5fGNyZWF0ZXxydwogICAgICAgIFJlc3VsdCAgICAgICAgID0+ICdJRCcsICAgICAgICAjIHJldHVybiBhcnJheSBvZiBncm91cCBpZHMKICAgICAgICBSYXdQZXJtaXNzaW9ucyA9PiAwLCAgICAgICAgICAgIyAwIChyZXR1cm4gaW5oZXJpdGVkIHBlcm1pc3Npb25zIGZyb20gQ3VzdG9tZXJDb21wYW55KSwgZGVmYXVsdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIDEgKHJldHVybiBvbmx5IGRpcmVjdCBwZXJtaXNzaW9ucykKICAgICk7CgpvcgoKICAgIG15IEBHcm91cE5hbWVzID0gJEN1c3RvbWVyR3JvdXBPYmplY3QtPkdyb3VwTWVtYmVyTGlzdCgKICAgICAgICBVc2VySUQgICAgICAgICA9PiAnMTIzJywKICAgICAgICBUeXBlICAgICAgICAgICA9PiAnbW92ZV9pbnRvJywgIyByb3xtb3ZlX2ludG98cHJpb3JpdHl8Y3JlYXRlfHJ3CiAgICAgICAgUmVzdWx0ICAgICAgICAgPT4gJ05hbWUnLCAgICAgICAgIyByZXR1cm4gYXJyYXkgb2YgZ3JvdXAgbmFtZXMKICAgICAgICBSYXdQZXJtaXNzaW9ucyA9PiAwLCAgICAgICAgICAgIyAwIChyZXR1cm4gaW5oZXJpdGVkIHBlcm1pc3Npb25zIGZyb20gQ3VzdG9tZXJDb21wYW55KSwgZGVmYXVsdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIDEgKHJldHVybiBvbmx5IGRpcmVjdCBwZXJtaXNzaW9ucykKICAgICk7Cgo9Y3V0CgpzdWIgR3JvdXBNZW1iZXJMaXN0IHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgIyBjaGVjayBuZWVkZWQgc3R1ZmYKICAgIGZvciBteSAkTmVlZGVkIChxdyhSZXN1bHQgVHlwZSkpIHsKICAgICAgICBpZiAoICEkUGFyYW17JE5lZWRlZH0gKSB7CiAgICAgICAgICAgICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpMb2cnKS0+TG9nKAogICAgICAgICAgICAgICAgUHJpb3JpdHkgPT4gJ2Vycm9yJywKICAgICAgICAgICAgICAgIE1lc3NhZ2UgID0+ICJOZWVkICROZWVkZWQhIiwKICAgICAgICAgICAgKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgIH0KICAgIGlmICggISRQYXJhbXtVc2VySUR9ICYmICEkUGFyYW17R3JvdXBJRH0gKSB7CiAgICAgICAgJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkxvZycpLT5Mb2coCiAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgIE1lc3NhZ2UgID0+ICdOZWVkIFVzZXJJRCBvciBHcm91cElEIScKICAgICAgICApOwogICAgICAgIHJldHVybjsKICAgIH0KCiAgICAjIGNyZWF0ZSBjYWNoZSBrZXkKICAgIG15ICRDYWNoZUtleSA9ICdHcm91cE1lbWJlckxpc3Q6OicgLiAkUGFyYW17VHlwZX0gLiAnOjonOwogICAgaWYgKCAkUGFyYW17UmF3UGVybWlzc2lvbnN9ICkgewogICAgICAgICRDYWNoZUtleSAuPSAiUmF3OjoiOwogICAgfQogICAgaWYgKCAkUGFyYW17VXNlcklEfSApIHsKICAgICAgICAkQ2FjaGVLZXkgLj0gIlVzZXJJRDo6JFBhcmFte1VzZXJJRH0iOwogICAgfQogICAgZWxzZSB7CiAgICAgICAgJENhY2hlS2V5IC49ICJHcm91cElEOjokUGFyYW17R3JvdXBJRH0iOwogICAgfQoKICAgICMgY2hlY2sgY2FjaGUKICAgIG15ICRDYWNoZSA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpDYWNoZScpLT5HZXQoCiAgICAgICAgVHlwZSA9PiAkU2VsZi0+e0NhY2hlVHlwZX0sCiAgICAgICAgS2V5ICA9PiAkQ2FjaGVLZXksCiAgICApOwoKICAgIGlmICgkQ2FjaGUpIHsKICAgICAgICBpZiAoICRQYXJhbXtSZXN1bHR9IGVxICdIQVNIJyApIHsKICAgICAgICAgICAgcmV0dXJuICV7JENhY2hlfTsKICAgICAgICB9CiAgICAgICAgZWxzaWYgKCAkUGFyYW17UmVzdWx0fSBlcSAnSUQnICkgewogICAgICAgICAgICByZXR1cm4gKCBzb3J0IGtleXMgJXskQ2FjaGV9ICk7CiAgICAgICAgfQogICAgICAgIGVsc2lmICggJFBhcmFte1Jlc3VsdH0gZXEgJ05hbWUnICkgewogICAgICAgICAgICByZXR1cm4gKCBzb3J0IHZhbHVlcyAleyRDYWNoZX0gKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuOwogICAgfQoKICAgIG15ICVEYXRhOwoKICAgICMgY2hlY2sgaWYgY3VzdG9tZXIgZ3JvdXAgZmVhdHVyZSBpcyBhY3RpdmUsIGlmIG5vdCwgcmV0dXJuIGFsbCBncm91cHMKICAgIGlmICggISRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6Q29uZmlnJyktPkdldCgnQ3VzdG9tZXJHcm91cFN1cHBvcnQnKSApIHsKCiAgICAgICAgIyBnZXQgcGVybWlzc2lvbnMKICAgICAgICAlRGF0YSA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpHcm91cCcpLT5Hcm91cExpc3QoIFZhbGlkID0+IDEgKTsKICAgIH0KICAgIGVsc2UgewogICAgICAgIG15ICREQk9iamVjdCA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpEQicpOwoKICAgICAgICAjIGlmIGl0J3MgYWN0aXZlLCByZXR1cm4ganVzdCB0aGUgcGVybWl0dGVkIGdyb3VwcwogICAgICAgIG15ICRTUUwgPQogICAgICAgICAgICAnU0VMRUNUIGcuaWQsIGcubmFtZSwgZ3UucGVybWlzc2lvbl9rZXksIGd1LnBlcm1pc3Npb25fdmFsdWUsIGd1LnVzZXJfaWQnCiAgICAgICAgICAgIC4gJyBGUk9NIHBlcm1pc3Npb25fZ3JvdXBzIGcsIGdyb3VwX2N1c3RvbWVyX3VzZXIgZ3UnCiAgICAgICAgICAgIC4gJyBXSEVSRSBnLnZhbGlkX2lkIElOICggJyAuIGpvaW4gJywgJywgJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OlZhbGlkJyktPlZhbGlkSURzR2V0KCkgLiAnKScKICAgICAgICAgICAgLiAnIEFORCBnLmlkID0gZ3UuZ3JvdXBfaWQgQU5EIGd1LnBlcm1pc3Npb25fdmFsdWUgPSAxJwogICAgICAgICAgICAuICIgQU5EIGd1LnBlcm1pc3Npb25fa2V5IElOICg/LCAncncnKSI7CiAgICAgICAgbXkgQEJpbmQgPSAoIFwkUGFyYW17VHlwZX0gKTsKCiAgICAgICAgaWYgKCAkUGFyYW17VXNlcklEfSApIHsKICAgICAgICAgICAgJFNRTCAuPSAnIEFORCBndS51c2VyX2lkID0gPyc7CiAgICAgICAgICAgIHB1c2ggQEJpbmQsIFwkUGFyYW17VXNlcklEfTsKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICRTUUwgLj0gJyBBTkQgZ3UuZ3JvdXBfaWQgPSA/JzsKICAgICAgICAgICAgcHVzaCBAQmluZCwgXCRQYXJhbXtHcm91cElEfTsKICAgICAgICB9CgogICAgICAgICREQk9iamVjdC0+UHJlcGFyZSgKICAgICAgICAgICAgU1FMICA9PiAkU1FMLAogICAgICAgICAgICBCaW5kID0+IFxAQmluZCwKICAgICAgICApOwoKICAgICAgICB3aGlsZSAoIG15IEBSb3cgPSAkREJPYmplY3QtPkZldGNocm93QXJyYXkoKSApIHsKICAgICAgICAgICAgaWYgKCAkUGFyYW17VXNlcklEfSApIHsKICAgICAgICAgICAgICAgICREYXRheyAkUm93WzBdIH0gPSAkUm93WzFdOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgJERhdGF7ICRSb3dbNF0gfSA9ICRSb3dbMV07CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIG15ICRDdXN0b21lclVzZXJPYmplY3QgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6Q3VzdG9tZXJVc2VyJyk7CgogICAgICAgIGZvciBteSAkS2V5ICggc29ydCBrZXlzICVEYXRhICkgewoKICAgICAgICAgICAgIyBCdWdmaXggIzEyMjg1IC0gQ2hlY2sgaWYgY3VzdG9tZXIgdXNlciBpcyB2YWxpZC4KICAgICAgICAgICAgaWYgKCAkUGFyYW17R3JvdXBJRH0gKSB7CgogICAgICAgICAgICAgICAgbXkgJVVzZXIgPSAkQ3VzdG9tZXJVc2VyT2JqZWN0LT5DdXN0b21lclVzZXJEYXRhR2V0KAogICAgICAgICAgICAgICAgICAgIFVzZXIgPT4gJEtleSwKICAgICAgICAgICAgICAgICk7CgogICAgICAgICAgICAgICAgaWYgKCBkZWZpbmVkICRVc2Vye1ZhbGlkSUR9ICYmICRVc2Vye1ZhbGlkSUR9ICE9IDEgKSB7CiAgICAgICAgICAgICAgICAgICAgZGVsZXRlICREYXRheyRLZXl9OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAjIGFkZCBjdXN0b21lciBjb21wYW55IGdyb3VwcwogICAgICAgIGlmICggISRQYXJhbXtSYXdQZXJtaXNzaW9uc30gJiYgJFBhcmFte1VzZXJJRH0gKSB7CiAgICAgICAgICAgIG15IEBDdXN0b21lcklEcyA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpDdXN0b21lclVzZXInKS0+Q3VzdG9tZXJJRHMoCiAgICAgICAgICAgICAgICBVc2VyID0+ICRQYXJhbXtVc2VySUR9LAogICAgICAgICAgICApOwoKICAgICAgICAgICAgZm9yIG15ICRDdXN0b21lcklEIChAQ3VzdG9tZXJJRHMpIHsKICAgICAgICAgICAgICAgIG15ICVDdXN0b21lckdyb3VwcyA9ICRTZWxmLT5Hcm91cEN1c3RvbWVyTGlzdCgKICAgICAgICAgICAgICAgICAgICBDdXN0b21lcklEID0+ICRDdXN0b21lcklELAogICAgICAgICAgICAgICAgICAgIFR5cGUgICAgICAgPT4gJFBhcmFte1R5cGV9LAogICAgICAgICAgICAgICAgICAgIFJlc3VsdCAgICAgPT4gJ0hBU0gnLAogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgIEdST1VQSUQ6CiAgICAgICAgICAgICAgICBmb3IgbXkgJEdyb3VwSUQgKCBzb3J0IGtleXMgJUN1c3RvbWVyR3JvdXBzICkgewogICAgICAgICAgICAgICAgICAgIG5leHQgR1JPVVBJRCBpZiAkRGF0YXskR3JvdXBJRH07CiAgICAgICAgICAgICAgICAgICAgJERhdGF7JEdyb3VwSUR9ID0gJEN1c3RvbWVyR3JvdXBzeyRHcm91cElEfTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBlbHNpZiAoICEkUGFyYW17UmF3UGVybWlzc2lvbnN9ICkgewogICAgICAgICAgICBteSAlQ3VzdG9tZXJHcm91cHMgPSAkU2VsZi0+R3JvdXBDdXN0b21lckxpc3QoCiAgICAgICAgICAgICAgICBHcm91cElEID0+ICRQYXJhbXtHcm91cElEfSwKICAgICAgICAgICAgICAgIFR5cGUgICAgPT4gJFBhcmFte1R5cGV9LAogICAgICAgICAgICAgICAgUmVzdWx0ICA9PiAnSEFTSCcsCiAgICAgICAgICAgICk7CgogICAgICAgICAgICBteSAkQ3VzdG9tZXJVc2VyT2JqZWN0ID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkN1c3RvbWVyVXNlcicpOwogICAgICAgICAgICBmb3IgbXkgJEN1c3RvbWVySUQgKCBzb3J0IGtleXMgJUN1c3RvbWVyR3JvdXBzICkgewogICAgICAgICAgICAgICAgbXkgJUN1c3RvbWVyVXNlcnMgPSAkQ3VzdG9tZXJVc2VyT2JqZWN0LT5DdXN0b21lclNlYXJjaCgKICAgICAgICAgICAgICAgICAgICBDdXN0b21lcklEUmF3ID0+ICRDdXN0b21lcklELAogICAgICAgICAgICAgICAgICAgIFVzZXJJRCAgICAgICAgPT4gJFNlbGYtPntVc2VySUR9LAogICAgICAgICAgICAgICAgICAgIFZhbGlkICAgICAgICAgPT4gMSwKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICBDVVNUT01FUlVTRVJJRDoKICAgICAgICAgICAgICAgIGZvciBteSAkQ3VzdG9tZXJVc2VySUQgKCBzb3J0IGtleXMgJUN1c3RvbWVyVXNlcnMgKSB7CiAgICAgICAgICAgICAgICAgICAgbmV4dCBDVVNUT01FUlVTRVJJRCBpZiAkRGF0YXskQ3VzdG9tZXJVc2VySUR9OwogICAgICAgICAgICAgICAgICAgICREYXRheyRDdXN0b21lclVzZXJJRH0gPSAkQ3VzdG9tZXJHcm91cHN7JEN1c3RvbWVySUR9OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgICMgYWRkIGFsd2F5cyBncm91cHMgaWYgZ3JvdXBzIGFyZSByZXF1ZXN0ZWQKICAgIGlmICgKICAgICAgICAkUGFyYW17VXNlcklEfQogICAgICAgICYmICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6Q29uZmlnJyktPkdldCgnQ3VzdG9tZXJHcm91cEFsd2F5c0dyb3VwcycpCiAgICAgICAgKQogICAgewogICAgICAgIG15ICVHcm91cHMgICAgICAgID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06Okdyb3VwJyktPkdyb3VwTGlzdCggVmFsaWQgPT4gMSApOwogICAgICAgIG15ICVHcm91cHNSZXZlcnNlID0gcmV2ZXJzZSAlR3JvdXBzOwogICAgICAgIEFMV0FZU0dST1VQOgogICAgICAgIGZvciBteSAkQWx3YXlzR3JvdXAgKCBAeyAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OkNvbmZpZycpLT5HZXQoJ0N1c3RvbWVyR3JvdXBBbHdheXNHcm91cHMnKSB9ICkgewogICAgICAgICAgICBuZXh0IEFMV0FZU0dST1VQIGlmICEkR3JvdXBzUmV2ZXJzZXskQWx3YXlzR3JvdXB9OwogICAgICAgICAgICBuZXh0IEFMV0FZU0dST1VQIGlmICREYXRheyAkR3JvdXBzUmV2ZXJzZXskQWx3YXlzR3JvdXB9IH07CiAgICAgICAgICAgICREYXRheyAkR3JvdXBzUmV2ZXJzZXskQWx3YXlzR3JvdXB9IH0gPSAkQWx3YXlzR3JvdXA7CiAgICAgICAgfQogICAgfQoKICAgICMgc2V0IGNhY2hlCiAgICAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6Q2FjaGUnKS0+U2V0KAogICAgICAgIFR5cGUgID0+ICRTZWxmLT57Q2FjaGVUeXBlfSwKICAgICAgICBUVEwgICA9PiAkU2VsZi0+e0NhY2hlVFRMfSwKICAgICAgICBLZXkgICA9PiAkQ2FjaGVLZXksCiAgICAgICAgVmFsdWUgPT4gXCVEYXRhLAogICAgKTsKCiAgICAjIHJldHVybiBkYXRhIGRlcGVuZGluZyBvbiByZXF1ZXN0ZWQgcmVzdWx0CiAgICBpZiAoICRQYXJhbXtSZXN1bHR9IGVxICdIQVNIJyApIHsKICAgICAgICByZXR1cm4gJURhdGE7CiAgICB9CiAgICBlbHNpZiAoICRQYXJhbXtSZXN1bHR9IGVxICdJRCcgKSB7CiAgICAgICAgcmV0dXJuICggc29ydCBrZXlzICVEYXRhICk7CiAgICB9CiAgICBlbHNpZiAoICRQYXJhbXtSZXN1bHR9IGVxICdOYW1lJyApIHsKICAgICAgICByZXR1cm4gKCBzb3J0IHZhbHVlcyAlRGF0YSApOwogICAgfQogICAgcmV0dXJuOwp9Cgo9aGVhZDIgR3JvdXBDdXN0b21lckFkZCgpCgp0byBhZGQgYSBjdXN0b21lciB0byBhIGdyb3VwCgogICAgUGVybWlzc2lvbiB0eXBlczogZS5nLiBybyxtb3ZlX2ludG8scHJpb3JpdHksY3JlYXRlLHJ3CiAgICBQZXJtaXNzaW9uIGNvbnRleHQ6IGUuZy4gVGlja2V0OjpDdXN0b21lcklEOjpTYW1lLCBUaWNrZXQ6OkN1c3RvbWVySUQ6Ok90aGVyCgogICAgbXkgJFN1Y2Nlc3MgPSAkQ3VzdG9tZXJHcm91cE9iamVjdC0+R3JvdXBDdXN0b21lckFkZCgKICAgICAgICBHSUQgICAgICAgID0+IDEyLAogICAgICAgIEN1c3RvbWVySUQgPT4gJ2N1c3RvbWVyLWNvbXBhbnknLAogICAgICAgIFBlcm1pc3Npb24gPT4gewogICAgICAgICAgICAnVGlja2V0OjpDdXN0b21lcklEOjpTYW1lJyA9PiB7CiAgICAgICAgICAgICAgICBybyAgICAgICAgICAgID0+IDEsCiAgICAgICAgICAgICAgICBtb3ZlX2ludG8gICAgID0+IDEsCiAgICAgICAgICAgICAgICBjcmVhdGUgICAgICAgID0+IDEsCiAgICAgICAgICAgICAgICBvd25lciAgICAgICAgID0+IDEsCiAgICAgICAgICAgICAgICBwcmlvcml0eSAgICAgID0+IDAsCiAgICAgICAgICAgICAgICBydyAgICAgICAgICAgID0+IDAsCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICdUaWNrZXQ6OkN1c3RvbWVySUQ6Ok90aGVyJyA9PiB7CiAgICAgICAgICAgICAgICBybyAgICAgICAgPT4gMSwKICAgICAgICAgICAgICAgIG1vdmVfaW50byA9PiAxLAogICAgICAgICAgICAgICAgY3JlYXRlICAgID0+IDEsCiAgICAgICAgICAgICAgICBvd25lciAgICAgPT4gMSwKICAgICAgICAgICAgICAgIHByaW9yaXR5ICA9PiAwLAogICAgICAgICAgICAgICAgcncgICAgICAgID0+IDAsCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIC4uLgogICAgICAgIH0sCiAgICAgICAgVXNlcklEID0+IDEyMywKICAgICk7Cgo9Y3V0CgpzdWIgR3JvdXBDdXN0b21lckFkZCB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgY2hlY2sgbmVlZGVkIHN0dWZmCiAgICBmb3IgbXkgJE5lZWRlZCAocXcoQ3VzdG9tZXJJRCBHSUQgVXNlcklEIFBlcm1pc3Npb24pKSB7CiAgICAgICAgaWYgKCAhJFBhcmFteyROZWVkZWR9ICkgewogICAgICAgICAgICAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6TG9nJyktPkxvZygKICAgICAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgICAgICBNZXNzYWdlICA9PiAiTmVlZCAkTmVlZGVkISIsCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICB9CgogICAgIyBjaGVjayBydyBydWxlIChzZXQgb25seSBydyBhbmQgcmVtb3ZlIHJlc3QsIGJlY2F1c2UgaXQncyBpbmNsdWRpbmcgYWxsIGluIHJ3KQogICAgbXkgQENvbnRleHRzID0gJFNlbGYtPkdyb3VwQ29udGV4dE5hbWVMaXN0KCk7CiAgICBDT05URVhUOgogICAgZm9yIG15ICRDb250ZXh0IChAQ29udGV4dHMpIHsKICAgICAgICBuZXh0IENPTlRFWFQgaWYgISRQYXJhbXtQZXJtaXNzaW9ufS0+eyRDb250ZXh0fS0+e3J3fTsKICAgICAgICAkUGFyYW17UGVybWlzc2lvbn0tPnskQ29udGV4dH0gPSB7IHJ3ID0+IDEgfTsKICAgIH0KCiAgICAjIGdldCBkYXRhYmFzZSBvYmplY3QKICAgIG15ICREQk9iamVjdCAgICA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpEQicpOwogICAgbXkgJFBlcm1pc3Npb25zID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpDb25maWcnKS0+R2V0KCdTeXN0ZW06OkN1c3RvbWVyOjpQZXJtaXNzaW9uJyk7CgogICAgIyB1cGRhdGUgcGVybWlzc2lvbgogICAgQ09OVEVYVDoKICAgIGZvciBteSAkQ29udGV4dCAoQENvbnRleHRzKSB7CiAgICAgICAgbmV4dCBDT05URVhUIGlmICFJc0hhc2hSZWZXaXRoRGF0YSggJFBhcmFte1Blcm1pc3Npb259LT57JENvbnRleHR9ICk7CgogICAgICAgICMgZGVsZXRlIGV4aXN0aW5nIHBlcm1pc3Npb24KICAgICAgICAkREJPYmplY3QtPkRvKAogICAgICAgICAgICBTUUwgPT4gJ0RFTEVURSBGUk9NIGdyb3VwX2N1c3RvbWVyIFdIRVJFICcKICAgICAgICAgICAgICAgIC4gJyBncm91cF9pZCA9ID8gQU5EIGN1c3RvbWVyX2lkID0gPyBBTkQgJwogICAgICAgICAgICAgICAgLiAnIHBlcm1pc3Npb25fY29udGV4dCA9ID8nLAogICAgICAgICAgICBCaW5kID0+IFsgXCRQYXJhbXtHSUR9LCBcJFBhcmFte0N1c3RvbWVySUR9LCBcJENvbnRleHQgXSwKICAgICAgICApOwoKICAgICAgICAjIGluc2VydCBuZXcgcGVybWlzc2lvbiAoaWYgbmVlZGVkKQogICAgICAgIFRZUEU6CiAgICAgICAgZm9yIG15ICRUeXBlICggQHskUGVybWlzc2lvbnN9ICkgewogICAgICAgICAgICBuZXh0IFRZUEUgaWYgISRQYXJhbXtQZXJtaXNzaW9ufS0+eyRDb250ZXh0fS0+eyRUeXBlfTsKCiAgICAgICAgICAgICMgZGVidWcKICAgICAgICAgICAgaWYgKCAkU2VsZi0+e0RlYnVnfSApIHsKICAgICAgICAgICAgICAgICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpMb2cnKS0+TG9nKAogICAgICAgICAgICAgICAgICAgIFByaW9yaXR5ID0+ICdub3RpY2UnLAogICAgICAgICAgICAgICAgICAgIE1lc3NhZ2UgPT4KICAgICAgICAgICAgICAgICAgICAgICAgIkFkZCBDdXN0b21lcklEOiRQYXJhbXtDdXN0b21lcklEfSB0byBHSUQ6JFBhcmFte0dJRH0sICRUeXBlOiRQYXJhbXtQZXJtaXNzaW9ufS0+eyRDb250ZXh0fS0+eyRUeXBlfSwgQ29udGV4dDokQ29udGV4dCEiLAogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgJERCT2JqZWN0LT5EbygKICAgICAgICAgICAgICAgIFNRTCA9PiAnSU5TRVJUIElOVE8gZ3JvdXBfY3VzdG9tZXIgJwogICAgICAgICAgICAgICAgICAgIC4gJyhjdXN0b21lcl9pZCwgZ3JvdXBfaWQsIHBlcm1pc3Npb25fa2V5LCBwZXJtaXNzaW9uX3ZhbHVlLCAnCiAgICAgICAgICAgICAgICAgICAgLiAncGVybWlzc2lvbl9jb250ZXh0LCBjcmVhdGVfdGltZSwgY3JlYXRlX2J5LCBjaGFuZ2VfdGltZSwgY2hhbmdlX2J5KSAnCiAgICAgICAgICAgICAgICAgICAgLiAnVkFMVUVTICg/LCA/LCA/LCA/LCA/LCBjdXJyZW50X3RpbWVzdGFtcCwgPywgY3VycmVudF90aW1lc3RhbXAsID8pJywKICAgICAgICAgICAgICAgIEJpbmQgPT4gWwogICAgICAgICAgICAgICAgICAgIFwkUGFyYW17Q3VzdG9tZXJJRH0sIFwkUGFyYW17R0lEfSwgXCRUeXBlLCBcJFBhcmFte1Blcm1pc3Npb259LT57JENvbnRleHR9LT57JFR5cGV9LAogICAgICAgICAgICAgICAgICAgIFwkQ29udGV4dCwgXCRQYXJhbXtVc2VySUR9LCBcJFBhcmFte1VzZXJJRH0sCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICApOwogICAgICAgIH0KICAgIH0KCiAgICAjIGRlbGV0ZSBjYWNoZQogICAgIyByZW1vdmUgY29tcGxldGUgQ3VzdG9tZXJHcm91cCBjYWNoZSBiZWNhdXNlCiAgICAjICAgaXQgYWZmZWN0cyBHcm91cE1lbWJlckxpc3QoKSB3aGljaCBpcyBDdXN0b21lclVzZXJJRCBiYXNlZAogICAgJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkNhY2hlJyktPkNsZWFuVXAoCiAgICAgICAgVHlwZSA9PiAkU2VsZi0+e0NhY2hlVHlwZX0sCiAgICApOwoKICAgIHJldHVybiAxOwp9Cgo9aGVhZDIgR3JvdXBDdXN0b21lckxpc3QoKQoKR2V0IGN1c3RvbWVycyBvZiB0aGUgZ2l2ZW4gZ3JvdXAuCgogICAgbXkgJUN1c3RvbWVycyA9ICRDdXN0b21lckdyb3VwT2JqZWN0LT5Hcm91cEN1c3RvbWVyTGlzdCgKICAgICAgICBHcm91cElEID0+ICcxMjMnLAogICAgICAgIFR5cGUgICAgPT4gJ3JvJywgICAgIyByb3xtb3ZlX2ludG98cHJpb3JpdHl8Y3JlYXRlfG93bmVyfHJ3CiAgICAgICAgQ29udGV4dCA9PiAnVGlja2V0OjpDdXN0b21lcklEOjpTYW1lJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgcGVybWlzc2lvbnMgdG8gc2FtZSBjb21wYW55IHRpY2tldHMsIGRlZmF1bHQgY29udGV4dAogICAgICAgIFJlc3VsdCAgPT4gJ0hBU0gnLCAgIyByZXR1cm4gaGFzaCBvZiBjdXN0b21lciBpZCA9PiBncm91cCBuYW1lIGVudHJpZXMKICAgICk7CgpvcgoKICAgIG15IEBDdXN0b21lcklEcyA9ICRDdXN0b21lckdyb3VwT2JqZWN0LT5Hcm91cEN1c3RvbWVyTGlzdCgKICAgICAgICBHcm91cElEID0+ICcxMjMnLAogICAgICAgIFR5cGUgICAgPT4gJ3JvJywgICAgIyByb3xtb3ZlX2ludG98cHJpb3JpdHl8Y3JlYXRlfG93bmVyfHJ3CiAgICAgICAgQ29udGV4dCA9PiAnVGlja2V0OjpDdXN0b21lcklEOjpTYW1lJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgcGVybWlzc2lvbnMgdG8gc2FtZSBjb21wYW55IHRpY2tldHMsIGRlZmF1bHQgY29udGV4dAogICAgICAgIFJlc3VsdCAgPT4gJ0lEJywgICAgIyByZXR1cm4gYXJyYXkgb2YgY3VzdG9tZXIgaWRzCiAgICApOwoKb3IKCiAgICBteSBAQ3VzdG9tZXJOYW1lcyA9ICRDdXN0b21lckdyb3VwT2JqZWN0LT5Hcm91cEN1c3RvbWVyTGlzdCgKICAgICAgICBHcm91cElEID0+ICcxMjMnLAogICAgICAgIFR5cGUgICAgPT4gJ3JvJywgICAgIyByb3xtb3ZlX2ludG98cHJpb3JpdHl8Y3JlYXRlfG93bmVyfHJ3CiAgICAgICAgQ29udGV4dCA9PiAnVGlja2V0OjpDdXN0b21lcklEOjpTYW1lJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgcGVybWlzc2lvbnMgdG8gc2FtZSBjb21wYW55IHRpY2tldHMsIGRlZmF1bHQgY29udGV4dAogICAgICAgIFJlc3VsdCAgPT4gJ05hbWUnLCAgIyByZXR1cm4gYXJyYXkgb2YgY3VzdG9tZXIgaWRzCiAgICApOwoKR2V0IGdyb3VwcyBvZiBnaXZlbiBjdXN0b21lci4KCiAgICBteSAlR3JvdXBzID0gJEN1c3RvbWVyR3JvdXBPYmplY3QtPkdyb3VwQ3VzdG9tZXJMaXN0KAogICAgICAgIEN1c3RvbWVySUQgPT4gJzEyMycsCiAgICAgICAgVHlwZSAgICAgICA9PiAncm8nLCAgICAgIyByb3xtb3ZlX2ludG98cHJpb3JpdHl8Y3JlYXRlfG93bmVyfHJ3CiAgICAgICAgQ29udGV4dCA9PiAnVGlja2V0OjpDdXN0b21lcklEOjpTYW1lJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgcGVybWlzc2lvbnMgdG8gc2FtZSBjb21wYW55IHRpY2tldHMsIGRlZmF1bHQgY29udGV4dAogICAgICAgIFJlc3VsdCAgICAgPT4gJ0hBU0gnLCAgICMgcmV0dXJuIGhhc2ggb2YgZ3JvdXAgaWQgPT4gZ3JvdXAgbmFtZSBlbnRyaWVzCiAgICApOwoKb3IKCiAgICBteSBAR3JvdXBJRHMgPSAkQ3VzdG9tZXJHcm91cE9iamVjdC0+R3JvdXBDdXN0b21lckxpc3QoCiAgICAgICAgQ3VzdG9tZXJJRCA9PiAnMTIzJywKICAgICAgICBUeXBlICAgICAgID0+ICdybycsICAgICAjIHJvfG1vdmVfaW50b3xwcmlvcml0eXxjcmVhdGV8b3duZXJ8cncKICAgICAgICBDb250ZXh0ID0+ICdUaWNrZXQ6OkN1c3RvbWVySUQ6OlNhbWUnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBwZXJtaXNzaW9ucyB0byBzYW1lIGNvbXBhbnkgdGlja2V0cywgZGVmYXVsdCBjb250ZXh0CiAgICAgICAgUmVzdWx0ICAgICA9PiAnSUQnLCAgICAgIyByZXR1cm4gYXJyYXkgb2YgZ3JvdXAgaWRzCiAgICApOwoKb3IKCiAgICBteSBAR3JvdXBOYW1lcyA9ICRDdXN0b21lckdyb3VwT2JqZWN0LT5Hcm91cEN1c3RvbWVyTGlzdCgKICAgICAgICBDdXN0b21lcklEID0+ICcxMjMnLAogICAgICAgIFR5cGUgICAgICAgPT4gJ3JvJywgICAgICMgcm98bW92ZV9pbnRvfHByaW9yaXR5fGNyZWF0ZXxvd25lcnxydwogICAgICAgIENvbnRleHQgPT4gJ1RpY2tldDo6Q3VzdG9tZXJJRDo6U2FtZScsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIHBlcm1pc3Npb25zIHRvIHNhbWUgY29tcGFueSB0aWNrZXRzLCBkZWZhdWx0IGNvbnRleHQKICAgICAgICBSZXN1bHQgICAgID0+ICdOYW1lJywgICAjIHJldHVybiBhcnJheSBvZiBncm91cCBuYW1lcwogICAgKTsKCj1jdXQKCnN1YiBHcm91cEN1c3RvbWVyTGlzdCB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgY2hlY2sgbmVlZGVkIHN0dWZmCiAgICBmb3IgbXkgJE5lZWRlZCAocXcoUmVzdWx0IFR5cGUpKSB7CiAgICAgICAgaWYgKCAhJFBhcmFteyROZWVkZWR9ICkgewogICAgICAgICAgICAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6TG9nJyktPkxvZygKICAgICAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgICAgICBNZXNzYWdlICA9PiAiTmVlZCAkTmVlZGVkISIsCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICB9CiAgICBpZiAoICEkUGFyYW17Q3VzdG9tZXJJRH0gJiYgISRQYXJhbXtHcm91cElEfSApIHsKICAgICAgICAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6TG9nJyktPkxvZygKICAgICAgICAgICAgUHJpb3JpdHkgPT4gJ2Vycm9yJywKICAgICAgICAgICAgTWVzc2FnZSAgPT4gJ05lZWQgQ3VzdG9tZXJJRCBvciBHcm91cElEIScsCiAgICAgICAgKTsKICAgICAgICByZXR1cm47CiAgICB9CgogICAgIyBmYWxsYmFjayB0byB0aGUgZGVmYXVsdCBjb250ZXh0CiAgICBpZiAoICEkUGFyYW17Q29udGV4dH0gKSB7CiAgICAgICAgJFBhcmFte0NvbnRleHR9ID0gJFNlbGYtPkdyb3VwQ29udGV4dE5hbWVHZXQoCiAgICAgICAgICAgIFN5c0NvbmZpZ05hbWUgPT4gJzAwMS1DdXN0b21lcklELXNhbWUnLAogICAgICAgICk7CiAgICB9CgogICAgIyBjcmVhdGUgY2FjaGUga2V5CiAgICBteSAkQ2FjaGVLZXkgPSAnR3JvdXBDdXN0b21lckxpc3Q6OicgLiAkUGFyYW17VHlwZX0gLiAnOjonIC4gJFBhcmFte0NvbnRleHR9IC4gJzo6JzsKICAgIGlmICggJFBhcmFte0N1c3RvbWVySUR9ICkgewogICAgICAgICRDYWNoZUtleSAuPSAnQ3VzdG9tZXJJRDo6JyAuICRQYXJhbXtDdXN0b21lcklEfTsKICAgIH0KICAgIGVsc2UgewogICAgICAgICRDYWNoZUtleSAuPSAnR3JvdXBJRDo6JyAuICRQYXJhbXtHcm91cElEfTsKICAgIH0KCiAgICAjIGNoZWNrIGNhY2hlCiAgICBteSAkQ2FjaGUgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6Q2FjaGUnKS0+R2V0KAogICAgICAgIFR5cGUgPT4gJFNlbGYtPntDYWNoZVR5cGV9LAogICAgICAgIEtleSAgPT4gJENhY2hlS2V5LAogICAgKTsKICAgIGlmICgkQ2FjaGUpIHsKICAgICAgICBpZiAoICRQYXJhbXtSZXN1bHR9IGVxICdIQVNIJyApIHsKICAgICAgICAgICAgcmV0dXJuICV7JENhY2hlfTsKICAgICAgICB9CiAgICAgICAgZWxzaWYgKCAkUGFyYW17UmVzdWx0fSBlcSAnSUQnICkgewogICAgICAgICAgICByZXR1cm4gKCBzb3J0IGtleXMgJXskQ2FjaGV9ICk7CiAgICAgICAgfQogICAgICAgIGVsc2lmICggJFBhcmFte1Jlc3VsdH0gZXEgJ05hbWUnICkgewogICAgICAgICAgICByZXR1cm4gKCBzb3J0IHZhbHVlcyAleyRDYWNoZX0gKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuOwogICAgfQoKICAgIG15ICVEYXRhOwoKICAgICMgY2hlY2sgaWYgY3VzdG9tZXIgZ3JvdXAgZmVhdHVyZSBpcyBhY3RpdmUsIGlmIG5vdCwgcmV0dXJuIGFsbCBncm91cHMKICAgIGlmICggISRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6Q29uZmlnJyktPkdldCgnQ3VzdG9tZXJHcm91cFN1cHBvcnQnKSApIHsKCiAgICAgICAgIyBnZXQgcGVybWlzc2lvbnMKICAgICAgICAlRGF0YSA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpHcm91cCcpLT5Hcm91cExpc3QoIFZhbGlkID0+IDEgKTsKICAgIH0KICAgIGVsc2UgewogICAgICAgIG15ICREQk9iamVjdCA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpEQicpOwoKICAgICAgICAjIGlmIGl0J3MgYWN0aXZlLCByZXR1cm4ganVzdCB0aGUgcGVybWl0dGVkIGdyb3VwcwogICAgICAgIG15ICRTUUwgPQogICAgICAgICAgICAnU0VMRUNUIGcuaWQsIGcubmFtZSwgZ2MucGVybWlzc2lvbl9rZXksIGdjLnBlcm1pc3Npb25fdmFsdWUsIGdjLmN1c3RvbWVyX2lkJwogICAgICAgICAgICAuICcgRlJPTSBwZXJtaXNzaW9uX2dyb3VwcyBnLCBncm91cF9jdXN0b21lciBnYycKICAgICAgICAgICAgLiAnIFdIRVJFIGcudmFsaWRfaWQgSU4gKCAnIC4gam9pbiAnLCAnLCAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6VmFsaWQnKS0+VmFsaWRJRHNHZXQoKSAuICcpJwogICAgICAgICAgICAuICcgQU5EIGcuaWQgPSBnYy5ncm91cF9pZCBBTkQgZ2MucGVybWlzc2lvbl92YWx1ZSA9IDEnCiAgICAgICAgICAgIC4gIiBBTkQgZ2MucGVybWlzc2lvbl9rZXkgSU4gKD8sICdydycpIgogICAgICAgICAgICAuICcgQU5EIGdjLnBlcm1pc3Npb25fY29udGV4dCA9ID8nOwogICAgICAgIG15IEBCaW5kID0gKCBcJFBhcmFte1R5cGV9LCBcJFBhcmFte0NvbnRleHR9ICk7CgogICAgICAgIGlmICggJFBhcmFte0N1c3RvbWVySUR9ICkgewogICAgICAgICAgICAkU1FMIC49ICcgQU5EIGdjLmN1c3RvbWVyX2lkID0gPyc7CiAgICAgICAgICAgIHB1c2ggQEJpbmQsIFwkUGFyYW17Q3VzdG9tZXJJRH07CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICAkU1FMIC49ICcgQU5EIGdjLmdyb3VwX2lkID0gPyc7CiAgICAgICAgICAgIHB1c2ggQEJpbmQsIFwkUGFyYW17R3JvdXBJRH07CiAgICAgICAgfQogICAgICAgICREQk9iamVjdC0+UHJlcGFyZSgKICAgICAgICAgICAgU1FMICA9PiAkU1FMLAogICAgICAgICAgICBCaW5kID0+IFxAQmluZCwKICAgICAgICApOwogICAgICAgIHdoaWxlICggbXkgQFJvdyA9ICREQk9iamVjdC0+RmV0Y2hyb3dBcnJheSgpICkgewogICAgICAgICAgICBpZiAoICRQYXJhbXtDdXN0b21lcklEfSApIHsKICAgICAgICAgICAgICAgICREYXRheyAkUm93WzBdIH0gPSAkUm93WzFdOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgJERhdGF7ICRSb3dbNF0gfSA9ICRSb3dbMV07CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgIyBhZGQgYWx3YXlzIGdyb3VwcyBpZiBncm91cHMgYXJlIHJlcXVlc3RlZAogICAgIyBkb24ndCBhZGQgdGhlbSBmb3Igbm9uLWRlZmF1bHQgY29udGV4dCAoc2FtZSBDdXN0b21lcklEIHBlcm1pc3Npb24pIHJlcXVlc3RzCiAgICBteSAkRGVmYXVsdENvbnRleHROYW1lID0gJFNlbGYtPkdyb3VwQ29udGV4dE5hbWVHZXQoCiAgICAgICAgU3lzQ29uZmlnTmFtZSA9PiAnMDAxLUN1c3RvbWVySUQtc2FtZScsCiAgICApOwogICAgaWYgKAogICAgICAgICRQYXJhbXtDdXN0b21lcklEfQogICAgICAgICYmICRQYXJhbXtDb250ZXh0fSBlcSAkRGVmYXVsdENvbnRleHROYW1lCiAgICAgICAgJiYgJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpDb25maWcnKS0+R2V0KCdDdXN0b21lckdyb3VwQ29tcGFueUFsd2F5c0dyb3VwcycpCiAgICAgICAgKQogICAgewogICAgICAgIG15ICVHcm91cHMgICAgICAgID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06Okdyb3VwJyktPkdyb3VwTGlzdCggVmFsaWQgPT4gMSApOwogICAgICAgIG15ICVHcm91cHNSZXZlcnNlID0gcmV2ZXJzZSAlR3JvdXBzOwogICAgICAgIEFMV0FZU0dST1VQOgogICAgICAgIGZvciBteSAkQWx3YXlzR3JvdXAgKCBAeyAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OkNvbmZpZycpLT5HZXQoJ0N1c3RvbWVyR3JvdXBDb21wYW55QWx3YXlzR3JvdXBzJykgfSApIHsKICAgICAgICAgICAgbmV4dCBBTFdBWVNHUk9VUCBpZiAhJEdyb3Vwc1JldmVyc2V7JEFsd2F5c0dyb3VwfTsKICAgICAgICAgICAgbmV4dCBBTFdBWVNHUk9VUCBpZiAkRGF0YXsgJEdyb3Vwc1JldmVyc2V7JEFsd2F5c0dyb3VwfSB9OwogICAgICAgICAgICAkRGF0YXsgJEdyb3Vwc1JldmVyc2V7JEFsd2F5c0dyb3VwfSB9ID0gJEFsd2F5c0dyb3VwOwogICAgICAgIH0KICAgIH0KCiAgICAjIHNldCBjYWNoZQogICAgJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkNhY2hlJyktPlNldCgKICAgICAgICBUeXBlICA9PiAkU2VsZi0+e0NhY2hlVHlwZX0sCiAgICAgICAgVFRMICAgPT4gJFNlbGYtPntDYWNoZVRUTH0sCiAgICAgICAgS2V5ICAgPT4gJENhY2hlS2V5LAogICAgICAgIFZhbHVlID0+IFwlRGF0YSwKICAgICk7CgogICAgIyByZXR1cm4gZGF0YSBkZXBlbmRpbmcgb24gcmVxdWVzdGVkIHJlc3VsdAogICAgaWYgKCAkUGFyYW17UmVzdWx0fSBlcSAnSEFTSCcgKSB7CiAgICAgICAgcmV0dXJuICVEYXRhOwogICAgfQogICAgZWxzaWYgKCAkUGFyYW17UmVzdWx0fSBlcSAnSUQnICkgewogICAgICAgIHJldHVybiAoIHNvcnQga2V5cyAlRGF0YSApOwogICAgfQogICAgZWxzaWYgKCAkUGFyYW17UmVzdWx0fSBlcSAnTmFtZScgKSB7CiAgICAgICAgcmV0dXJuICggc29ydCB2YWx1ZXMgJURhdGEgKTsKICAgIH0KICAgIHJldHVybjsKfQoKPWhlYWQyIEdyb3VwQ29udGV4dE5hbWVHZXQoKQoKSGVscGVyIGZ1bmN0aW9uIHRvIGdldCBjdXJyZW50bHkgY29uZmlndXJlZCBuYW1lIG9mIGEgc3BlY2lmaWMgZ3JvdXAgYWNjZXNzIGNvbnRleHQKCiAgICBteSAkQ29udGV4dE5hbWUgPSAkQ3VzdG9tZXJHcm91cE9iamVjdC0+R3JvdXBDb250ZXh0TmFtZUdldCgKICAgICAgICBTeXNDb25maWdOYW1lID0+ICcxMDAtQ3VzdG9tZXJJRC1vdGhlcicsICMgb3B0aW9uYWwsIGRlZmF1bHRzIHRvICcwMDEtQ3VzdG9tZXJJRC1zYW1lJwogICAgKTsKCj1jdXQKCnN1YiBHcm91cENvbnRleHROYW1lR2V0IHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgIyBnZXQgY29uZmlnIG5hbWUKICAgICMgZmFsbGJhY2sgdG8gJ25vcm1hbCcgZ3JvdXAgcGVybWlzc2lvbiBjb25maWcKICAgICRQYXJhbXtTeXNDb25maWdOYW1lfSB8fD0gJzAwMS1DdXN0b21lcklELXNhbWUnOwoKICAgIG15ICRDb250ZXh0Q29uZmlnID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpDb25maWcnKS0+R2V0KCdDdXN0b21lckdyb3VwUGVybWlzc2lvbkNvbnRleHQnKTsKICAgIHJldHVybiBpZiAhSXNIYXNoUmVmV2l0aERhdGEoJENvbnRleHRDb25maWcpOwogICAgcmV0dXJuIGlmICFJc0hhc2hSZWZXaXRoRGF0YSggJENvbnRleHRDb25maWctPnsgJFBhcmFte1N5c0NvbmZpZ05hbWV9IH0gKTsKCiAgICByZXR1cm4gJENvbnRleHRDb25maWctPnsgJFBhcmFte1N5c0NvbmZpZ05hbWV9IH0tPntWYWx1ZX07Cn0KCj1oZWFkMiBHcm91cENvbnRleHROYW1lTGlzdCgpCgpIZWxwZXIgZnVuY3Rpb24gdG8gZ2V0IHRoZSBuYW1lcyBvZiBhbGwgY29uZmlndXJlZCBncm91cCBhY2Nlc3MgY29udGV4dHMKCiAgICBteSBAQ29udGV4dE5hbWVzID0gJEN1c3RvbWVyR3JvdXBPYmplY3QtPkdyb3VwQ29udGV4dE5hbWVMaXN0KCk7Cgo9Y3V0CgpzdWIgR3JvdXBDb250ZXh0TmFtZUxpc3QgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICBteSAkQ29udGV4dENvbmZpZyA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6Q29uZmlnJyktPkdldCgnQ3VzdG9tZXJHcm91cFBlcm1pc3Npb25Db250ZXh0Jyk7CiAgICByZXR1cm4gKCkgaWYgIUlzSGFzaFJlZldpdGhEYXRhKCRDb250ZXh0Q29uZmlnKTsKCiAgICAjIGZpbGwgbGlzdAogICAgbXkgQENvbnRleHROYW1lczsKICAgIENPTlRFWFQ6CiAgICBmb3IgbXkgJEl0ZW0gKCBzb3J0IGtleXMgJXskQ29udGV4dENvbmZpZ30gKSB7CiAgICAgICAgbmV4dCBDT05URVhUIGlmICFJc0hhc2hSZWZXaXRoRGF0YSggJENvbnRleHRDb25maWctPnskSXRlbX0gKTsKICAgICAgICBuZXh0IENPTlRFWFQgaWYgISRDb250ZXh0Q29uZmlnLT57JEl0ZW19LT57VmFsdWV9OwoKICAgICAgICBwdXNoIEBDb250ZXh0TmFtZXMsICRDb250ZXh0Q29uZmlnLT57JEl0ZW19LT57VmFsdWV9OwogICAgfQoKICAgIHJldHVybiBAQ29udGV4dE5hbWVzOwp9Cgo9aGVhZDIgR3JvdXBDb250ZXh0Q3VzdG9tZXJzKCkKCkdldCBhbGwgY3VzdG9tZXIgY29tcGFuaWVzIG9mIHRoZSBnaXZlbiBjdXN0b21lciB1c2VyLAppbmNsdWRpbmcgdGhvc2UgYXNzb2NpYXRlZCB2aWEgY29udGV4dCBiYXNlZCBwZXJtaXNzaW9ucy4KCiAgICBteSAlQ3VzdG9tZXJzID0gJEN1c3RvbWVyR3JvdXBPYmplY3QtPkdyb3VwQ29udGV4dEN1c3RvbWVycygKICAgICAgICBDdXN0b21lclVzZXJJRCA9PiAnMTIzJywKICAgICk7CgpSZXR1cm5zIGhhc2ggd2l0aCBDdXN0b21lciBJRHMgYXMga2V5IGFuZCBDdXN0b21lciBDb21wYW55IE5hbWUgYXMgdmFsdWU6CgogICAgJUN1c3RvbWVycyA9IHsKICAgICAgJzAwMScgPT4gJ0N1c3RvbWVyIENvbXBhbnkgMScsCiAgICAgICcwMDInID0+ICdDdXN0b21lciBDb21wYW55IDInLAogICAgfTsKCj1jdXQKCnN1YiBHcm91cENvbnRleHRDdXN0b21lcnMgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGNoZWNrIG5lZWRlZCBzdHVmZgogICAgaWYgKCAhJFBhcmFte0N1c3RvbWVyVXNlcklEfSApIHsKICAgICAgICAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6TG9nJyktPkxvZygKICAgICAgICAgICAgUHJpb3JpdHkgPT4gJ2Vycm9yJywKICAgICAgICAgICAgTWVzc2FnZSAgPT4gJ05lZWQgQ3VzdG9tZXJVc2VySUQhJywKICAgICAgICApOwogICAgICAgIHJldHVybjsKICAgIH0KCiAgICAjIG5vIGNhY2hlIGlzIHVzZWQgYmVjYXVzZSBvZiB0b28gbWFueSBmYWN0b3JzIG91dHNpZGUgb3VyIGNvbnRyb2wKCiAgICAjIGdldCBjdXN0b21lciBpZHMgZnJvbSBiYWNrZW5kCiAgICBteSBAQ3VzdG9tZXJJRHMgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6Q3VzdG9tZXJVc2VyJyktPkN1c3RvbWVySURzKAogICAgICAgIFVzZXIgPT4gJFBhcmFte0N1c3RvbWVyVXNlcklEfSwKICAgICk7CgogICAgIyBjaGVjayBmb3IgYWNjZXNzIHRvIG90aGVyIEN1c3RvbWVySURzIHZpYSBncm91cCBhc3NpZ25tZW50CiAgICAjIGFkZCBhbGwgY29tYmluYXRpb25zIGJhc2VkIG9uIGNvbnRleHQgYmFzZXMgZ3JvdXAgYWNjZXNzCiAgICBteSAkRXh0cmFQZXJtaXNzaW9uQ29udGV4dCA9ICRTZWxmLT5Hcm91cENvbnRleHROYW1lR2V0KAogICAgICAgIFN5c0NvbmZpZ05hbWUgPT4gJzEwMC1DdXN0b21lcklELW90aGVyJywKICAgICk7CiAgICBpZiAoCiAgICAgICAgJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpDb25maWcnKS0+R2V0KCdDdXN0b21lckdyb3VwU3VwcG9ydCcpCiAgICAgICAgJiYgJEV4dHJhUGVybWlzc2lvbkNvbnRleHQKICAgICAgICApCiAgICB7CgogICAgICAgICMgZm9yIGFsbCBDdXN0b21lcklEcyBnZXQgZ3JvdXBzIHdpdGggZXh0cmEgYWNjZXNzCiAgICAgICAgbXkgJUV4dHJhUGVybWlzc2lvbkdyb3VwczsKICAgICAgICBDVVNUT01FUklEOgogICAgICAgIGZvciBteSAkQ3VzdG9tZXJJRCAoQEN1c3RvbWVySURzKSB7CiAgICAgICAgICAgIG15ICVHcm91cExpc3QgPSAkU2VsZi0+R3JvdXBDdXN0b21lckxpc3QoCiAgICAgICAgICAgICAgICBDdXN0b21lcklEID0+ICRDdXN0b21lcklELAogICAgICAgICAgICAgICAgVHlwZSAgICAgICA9PiAncm8nLAogICAgICAgICAgICAgICAgQ29udGV4dCAgICA9PiAkRXh0cmFQZXJtaXNzaW9uQ29udGV4dCwKICAgICAgICAgICAgICAgIFJlc3VsdCAgICAgPT4gJ0hBU0gnLAogICAgICAgICAgICApOwogICAgICAgICAgICBuZXh0IENVU1RPTUVSSUQgaWYgISVHcm91cExpc3Q7CgogICAgICAgICAgICAjIGFkZCB0byBncm91cHMKICAgICAgICAgICAgJUV4dHJhUGVybWlzc2lvbkdyb3VwcyA9ICgKICAgICAgICAgICAgICAgICVFeHRyYVBlcm1pc3Npb25Hcm91cHMsCiAgICAgICAgICAgICAgICAlR3JvdXBMaXN0LAogICAgICAgICAgICApOwogICAgICAgIH0KCiAgICAgICAgIyBhZGQgYWxsIGFjY2Vzc2libGUgQ3VzdG9tZXJJRHMKICAgICAgICBHUk9VUElEOgogICAgICAgIGZvciBteSAkR3JvdXBJRCAoIHNvcnQga2V5cyAlRXh0cmFQZXJtaXNzaW9uR3JvdXBzICkgewogICAgICAgICAgICBteSBARXh0cmFDdXN0b21lcklEcyA9ICRTZWxmLT5Hcm91cEN1c3RvbWVyTGlzdCgKICAgICAgICAgICAgICAgIEdyb3VwSUQgPT4gJEdyb3VwSUQsCiAgICAgICAgICAgICAgICBUeXBlICAgID0+ICdybycsCiAgICAgICAgICAgICAgICBSZXN1bHQgID0+ICdJRCcsCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIG5leHQgR1JPVVBJRCBpZiAhQEV4dHJhQ3VzdG9tZXJJRHM7CgogICAgICAgICAgICAjIGFkZCB0byBDdXN0b21lcklEcwogICAgICAgICAgICBwdXNoIEBDdXN0b21lcklEcywgQEV4dHJhQ3VzdG9tZXJJRHM7CiAgICAgICAgfQogICAgfQoKICAgICMgZ2V0IGFsbCBjdXN0b21lciBjb21wYW5pZXMgZm9yIHF1aWNrIG5hbWUgbG9va3VwCiAgICBteSAlQWxsQ3VzdG9tZXJzID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkN1c3RvbWVyQ29tcGFueScpLT5DdXN0b21lckNvbXBhbnlMaXN0KAogICAgICAgIFVzZXJJRCA9PiAkU2VsZi0+e1VzZXJJRH0sCiAgICAgICAgVmFsaWQgPT4gMSwKICAgICAgICBMaW1pdCA9PiAwLAogICAgKTsKCiAgICAjIGZpbHRlciByZXN1bHRzIHVzaW5nIHZhbGlkIGN1c3RvbWVycywgYWRkIGN1c3RvbWVyIG5hbWUgdG8gcmVzdWx0cwogICAgbXkgJUN1c3RvbWVyczsKICAgIENVU1RPTUVSSUQ6CiAgICBmb3IgbXkgJEN1c3RvbWVySUQgKEBDdXN0b21lcklEcykgewogICAgICAgIG5leHQgQ1VTVE9NRVJJRCBpZiAhJEFsbEN1c3RvbWVyc3skQ3VzdG9tZXJJRH07CiAgICAgICAgbmV4dCBDVVNUT01FUklEIGlmICRDdXN0b21lcnN7JEN1c3RvbWVySUR9OwogICAgICAgICRDdXN0b21lcnN7JEN1c3RvbWVySUR9ID0gJEFsbEN1c3RvbWVyc3skQ3VzdG9tZXJJRH07CiAgICB9CgogICAgcmV0dXJuICVDdXN0b21lcnM7Cn0KCj1oZWFkMiBHcm91cExvb2t1cCgpCgpnZXQgaWQgb3IgbmFtZSBmb3IgZ3JvdXAKCiAgICBteSAkR3JvdXAgPSAkQ3VzdG9tZXJHcm91cE9iamVjdC0+R3JvdXBMb29rdXAoR3JvdXBJRCA9PiAkR3JvdXBJRCk7CgogICAgbXkgJEdyb3VwSUQgPSAkQ3VzdG9tZXJHcm91cE9iamVjdC0+R3JvdXBMb29rdXAoR3JvdXAgPT4gJEdyb3VwKTsKCj1jdXQKCnN1YiBHcm91cExvb2t1cCB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgY2hlY2sgbmVlZGVkIHN0dWZmCiAgICBpZiAoICEkUGFyYW17R3JvdXB9ICYmICEkUGFyYW17R3JvdXBJRH0gKSB7CiAgICAgICAgJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkxvZycpLT5Mb2coCiAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgIE1lc3NhZ2UgID0+ICdHb3Qgbm8gR3JvdXAgb3IgR3JvdXBJRCEnLAogICAgICAgICk7CiAgICAgICAgcmV0dXJuOwogICAgfQoKICAgICMgY2hlY2sgaWYgcmVzdWx0IGlzIGNhY2hlZAogICAgbXkgJENhY2hlS2V5OwogICAgaWYgKCAkUGFyYW17R3JvdXBJRH0gKSB7CiAgICAgICAgJENhY2hlS2V5ID0gIkdyb3VwTG9va3VwOjpJRDo6JFBhcmFte0dyb3VwSUR9IjsKICAgIH0KICAgIGVsc2lmICggJFBhcmFte0dyb3VwfSApIHsKICAgICAgICAkQ2FjaGVLZXkgPSAiR3JvdXBMb29rdXA6Ok5hbWU6OiRQYXJhbXtHcm91cH0iOwogICAgfQoKICAgIG15ICRDYWNoZSA9ICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpDYWNoZScpLT5HZXQoCiAgICAgICAgVHlwZSA9PiAkU2VsZi0+e0NhY2hlVHlwZX0sCiAgICAgICAgS2V5ICA9PiAkQ2FjaGVLZXksCiAgICApOwogICAgcmV0dXJuICR7JENhY2hlfSBpZiAoIHJlZiAkQ2FjaGUgZXEgJ1NDQUxBUicgKTsKCiAgICBteSAkREJPYmplY3QgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6REInKTsKCiAgICAjIGdldCBkYXRhCiAgICBteSAkU1FMOwogICAgbXkgQEJpbmQ7CiAgICBteSAkU3VmZml4OwogICAgaWYgKCAkUGFyYW17R3JvdXB9ICkgewogICAgICAgICRQYXJhbXtXaGF0fSA9ICRQYXJhbXtHcm91cH07CiAgICAgICAgJFN1ZmZpeCAgICAgID0gJ0dyb3VwSUQnOwogICAgICAgICRTUUwgICAgICAgICA9ICdTRUxFQ1QgaWQgRlJPTSBwZXJtaXNzaW9uX2dyb3VwcyBXSEVSRSBuYW1lID0gPyc7CiAgICAgICAgcHVzaCBAQmluZCwgXCRQYXJhbXtHcm91cH07CiAgICB9CiAgICBlbHNlIHsKICAgICAgICAkUGFyYW17V2hhdH0gPSAkUGFyYW17R3JvdXBJRH07CiAgICAgICAgJFN1ZmZpeCAgICAgID0gJ0dyb3VwJzsKICAgICAgICAkU1FMICAgICAgICAgPSAnU0VMRUNUIG5hbWUgRlJPTSBwZXJtaXNzaW9uX2dyb3VwcyBXSEVSRSBpZCA9ID8nOwogICAgICAgIHB1c2ggQEJpbmQsIFwkUGFyYW17R3JvdXBJRH07CiAgICB9CiAgICByZXR1cm4gaWYgISREQk9iamVjdC0+UHJlcGFyZSgKICAgICAgICBTUUwgID0+ICRTUUwsCiAgICAgICAgQmluZCA9PiBcQEJpbmQsCiAgICApOwoKICAgIG15ICRSZXN1bHQ7CiAgICB3aGlsZSAoIG15IEBSb3cgPSAkREJPYmplY3QtPkZldGNocm93QXJyYXkoKSApIHsKCiAgICAgICAgIyBzdG9yZSByZXN1bHQKICAgICAgICAkUmVzdWx0ID0gJFJvd1swXTsKICAgIH0KCiAgICAjIGNoZWNrIGlmIGRhdGEgZXhpc3RzCiAgICBpZiAoICEkUmVzdWx0ICkgewogICAgICAgICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpMb2cnKS0+TG9nKAogICAgICAgICAgICBQcmlvcml0eSA9PiAnZXJyb3InLAogICAgICAgICAgICBNZXNzYWdlICA9PiAiRm91bmQgbm8gXCQkU3VmZml4IGZvciAkUGFyYW17V2hhdH0hIiwKICAgICAgICApOwogICAgICAgIHJldHVybjsKICAgIH0KCiAgICAjIHNldCBjYWNoZQogICAgJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkNhY2hlJyktPlNldCgKICAgICAgICBUeXBlICA9PiAkU2VsZi0+e0NhY2hlVHlwZX0sCiAgICAgICAgVFRMICAgPT4gJFNlbGYtPntDYWNoZVRUTH0sCiAgICAgICAgS2V5ICAgPT4gJENhY2hlS2V5LAogICAgICAgIFZhbHVlID0+IFwkUmVzdWx0LAogICAgKTsKCiAgICByZXR1cm4gJFJlc3VsdDsKfQoKPWhlYWQyIFBlcm1pc3Npb25DaGVjaygpCgpDaGVjayBpZiBhIGN1c3RvbWVyIHVzZXIgaGFzIGEgY2VydGFpbiBwZXJtaXNzaW9uIGZvciBhIGNlcnRhaW4gZ3JvdXAuCgogICAgbXkgJEhhc1Blcm1pc3Npb24gPSAkQ3VzdG9tZXJHcm91cE9iamVjdC0+UGVybWlzc2lvbkNoZWNrKAogICAgICAgIFVzZXJJRCAgICA9PiAkVXNlcklELAogICAgICAgIEdyb3VwTmFtZSA9PiAkR3JvdXBOYW1lLAogICAgICAgIFR5cGUgICAgICA9PiAnbW92ZV9pbnRvJywKICAgICk7Cgo9Y3V0CgpzdWIgUGVybWlzc2lvbkNoZWNrIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgIyBjaGVjayBuZWVkZWQgc3R1ZmYKICAgIGZvciBteSAkTmVlZGVkIChxdyhVc2VySUQgR3JvdXBOYW1lIFR5cGUpKSB7CiAgICAgICAgaWYgKCAhJFBhcmFteyROZWVkZWR9ICkgewogICAgICAgICAgICAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6TG9nJyktPkxvZygKICAgICAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgICAgICBNZXNzYWdlICA9PiAiTmVlZCAkTmVlZGVkISIsCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICB9CgogICAgbXkgJUdyb3VwTWVtYmVyTGlzdCA9IHJldmVyc2UgJFNlbGYtPkdyb3VwTWVtYmVyTGlzdCgKICAgICAgICBVc2VySUQgPT4gJFBhcmFte1VzZXJJRH0sCiAgICAgICAgVHlwZSAgID0+ICRQYXJhbXtUeXBlfSwKICAgICAgICBSZXN1bHQgPT4gJ0hBU0gnLAogICAgKTsKCiAgICByZXR1cm4gJEdyb3VwTWVtYmVyTGlzdHsgJFBhcmFte0dyb3VwTmFtZX0gfSA/IDEgOiAwOwp9CgoxOwoKPWhlYWQxIFRFUk1TIEFORCBDT05ESVRJT05TCgpUaGlzIHNvZnR3YXJlIGlzIHBhcnQgb2YgdGhlIE9UUlMgcHJvamVjdCAoTDxodHRwczovL290cnMub3JnLz4pLgoKVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoR1BMKS4gSWYgeW91CmRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBMPGh0dHBzOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvZ3BsLTMuMC50eHQ+LgoKPWN1dAo=</File>
        <File Location="Custom/Kernel/System/CustomerUser/DB.pm" Permission="660" Encode="Base64"></File>
        <File Location="Custom/Kernel/System/PostMaster/NewTicket.pm" Permission="660" Encode="Base64"></File>
        <File Location="Custom/Kernel/System/ProcessManagement/TransitionAction/ConfigItemUpdate.pm" Permission="660" Encode="Base64"></File>
        <File Location="Kernel/Config/Files/XML/MultiTenancy.xml" Permission="660" Encode="Base64">PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4KPG90cnNfY29uZmlnIHZlcnNpb249IjIuMCIgaW5pdD0iQXBwbGljYXRpb24iPgogICAgPFNldHRpbmcgTmFtZT0iTXVsdGlUZW5hbmN5IiBSZXF1aXJlZD0iMSIgVmFsaWQ9IjEiPgogICAgICAgIDxEZXNjcmlwdGlvbiBMYW5nPSJlbiI+SWYgZW5hYmxlZCwgYWdlbnRzIGNhbiBvbmx5IHNlZSBjdXN0b21lciB1c2VycywgcXVldWVzLCBhbmQgb3RoZXIgcmVzb3VyY2VzIHdpdGggd2hpY2ggdGhleSBzaGFyZSBhIGNvbW1vbiBncm91cCBtZW1iZXJzaGlwLjwvRGVzY3JpcHRpb24+CiAgICAgICAgPE5hdmlnYXRpb24+Q29yZTwvTmF2aWdhdGlvbj4KICAgICAgICA8TmF2aWdhdGlvbj5Db3JlPC9OYXZpZ2F0aW9uPgogICAgICAgIDxWYWx1ZT4KICAgICAgICAgICAgPEl0ZW0gVmFsdWVUeXBlPSJDaGVja2JveCI+MTwvSXRlbT4KICAgICAgICA8L1ZhbHVlPgogICAgPC9TZXR0aW5nPgogICAgPFNldHRpbmcgTmFtZT0iQ3VzdG9tZXJHcm91cFN1cHBvcnQiIFJlcXVpcmVkPSIxIiBWYWxpZD0iMSI+CiAgICAgICAgPERlc2NyaXB0aW9uIFRyYW5zbGF0YWJsZT0iMSI+QWN0aXZhdGVzIHN1cHBvcnQgZm9yIGN1c3RvbWVyIGFuZCBjdXN0b21lciB1c2VyIGdyb3Vwcy48L0Rlc2NyaXB0aW9uPgogICAgICAgIDxOYXZpZ2F0aW9uPkZyb250ZW5kOjpDdXN0b21lcjwvTmF2aWdhdGlvbj4KICAgICAgICA8VmFsdWU+CiAgICAgICAgICAgIDxJdGVtIFZhbHVlVHlwZT0iQ2hlY2tib3giPjE8L0l0ZW0+CiAgICAgICAgPC9WYWx1ZT4KICAgIDwvU2V0dGluZz4KPC9vdHJzX2NvbmZpZz4K</File>
    </Filelist>
</otrs_package>
